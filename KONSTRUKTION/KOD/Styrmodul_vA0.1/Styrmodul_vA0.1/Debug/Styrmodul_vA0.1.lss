
Styrmodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080015a  0080015a  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bc  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000251  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  00001109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000420  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5b c0       	rjmp	.+182    	; 0x104 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 35       	cpi	r26, 0x5A	; 90
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e5       	ldi	r26, 0x5A	; 90
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 35       	cpi	r26, 0x5C	; 92
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d0       	rcall	.+456    	; 0x28c <main>
  c4:	46 c1       	rjmp	.+652    	; 0x352 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Styr_InitPortDirections>:
	{
		LCD_SendCommand(128+64-16+pos);
	}
	else LCD_SendCommand(0b10000000);
	
}
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	81 b9       	out	0x01, r24	; 1
  cc:	8f eb       	ldi	r24, 0xBF	; 191
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	87 b9       	out	0x07, r24	; 7
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	08 95       	ret

000000da <SPI_MasterInit>:
  da:	1d bc       	out	0x2d, r1	; 45
  dc:	83 e7       	ldi	r24, 0x73	; 115
  de:	8c bd       	out	0x2c, r24	; 44
  e0:	08 95       	ret

000000e2 <SPI_MasterTransmit>:
  e2:	6b 36       	cpi	r22, 0x6B	; 107
  e4:	11 f4       	brne	.+4      	; 0xea <SPI_MasterTransmit+0x8>
  e6:	2c 98       	cbi	0x05, 4	; 5
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <SPI_MasterTransmit+0x16>
  ea:	63 37       	cpi	r22, 0x73	; 115
  ec:	11 f4       	brne	.+4      	; 0xf2 <SPI_MasterTransmit+0x10>
  ee:	2b 98       	cbi	0x05, 3	; 5
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <SPI_MasterTransmit+0x16>
  f2:	67 36       	cpi	r22, 0x67	; 103
  f4:	09 f4       	brne	.+2      	; 0xf8 <SPI_MasterTransmit+0x16>
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	8e bd       	out	0x2e, r24	; 46
  fa:	0d b4       	in	r0, 0x2d	; 45
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <SPI_MasterTransmit+0x18>
 100:	8e b5       	in	r24, 0x2e	; 46
 102:	08 95       	ret

00000104 <__vector_19>:
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	85 b1       	in	r24, 0x05	; 5
 112:	89 61       	ori	r24, 0x19	; 25
 114:	85 b9       	out	0x05, r24	; 5
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <LCD_Busy>:
 122:	1a b8       	out	0x0a, r1	; 10
 124:	29 9a       	sbi	0x05, 1	; 5
 126:	28 98       	cbi	0x05, 0	; 5
 128:	2a 9a       	sbi	0x05, 2	; 5
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Busy+0xa>
 12c:	89 b1       	in	r24, 0x09	; 9
 12e:	2a 98       	cbi	0x05, 2	; 5
 130:	29 98       	cbi	0x05, 1	; 5
 132:	9f ef       	ldi	r25, 0xFF	; 255
 134:	9a b9       	out	0x0a, r25	; 10
 136:	88 1f       	adc	r24, r24
 138:	88 27       	eor	r24, r24
 13a:	88 1f       	adc	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret

00000140 <LCD_SendCommand>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	06 c0       	rjmp	.+12     	; 0x152 <LCD_SendCommand+0x12>
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_SendCommand+0xa>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_SendCommand+0x10>
 150:	00 00       	nop
 152:	e7 df       	rcall	.-50     	; 0x122 <LCD_Busy>
 154:	89 2b       	or	r24, r25
 156:	b9 f7       	brne	.-18     	; 0x146 <LCD_SendCommand+0x6>
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	cb b9       	out	0x0b, r28	; 11
 15c:	2a 9a       	sbi	0x05, 2	; 5
 15e:	c1 50       	subi	r28, 0x01	; 1
 160:	c2 30       	cpi	r28, 0x02	; 2
 162:	38 f4       	brcc	.+14     	; 0x172 <LCD_SendCommand+0x32>
 164:	86 e7       	ldi	r24, 0x76	; 118
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_SendCommand+0x28>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_SendCommand+0x2e>
 16e:	00 00       	nop
 170:	04 c0       	rjmp	.+8      	; 0x17a <LCD_SendCommand+0x3a>
 172:	90 e1       	ldi	r25, 0x10	; 16
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_SendCommand+0x34>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_SendCommand+0x3a>
 17a:	2a 98       	cbi	0x05, 2	; 5
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <LCD_SetRow>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	06 c0       	rjmp	.+12     	; 0x194 <LCD_SetRow+0x14>
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_SetRow+0xc>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_SetRow+0x12>
 192:	00 00       	nop
 194:	c6 df       	rcall	.-116    	; 0x122 <LCD_Busy>
 196:	89 2b       	or	r24, r25
 198:	b9 f7       	brne	.-18     	; 0x188 <LCD_SetRow+0x8>
 19a:	28 98       	cbi	0x05, 0	; 5
 19c:	29 98       	cbi	0x05, 1	; 5
 19e:	c1 30       	cpi	r28, 0x01	; 1
 1a0:	d1 05       	cpc	r29, r1
 1a2:	19 f4       	brne	.+6      	; 0x1aa <LCD_SetRow+0x2a>
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	cc df       	rcall	.-104    	; 0x140 <LCD_SendCommand>
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <LCD_SetRow+0x32>
 1aa:	22 97       	sbiw	r28, 0x02	; 2
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <LCD_SetRow+0x32>
 1ae:	80 ec       	ldi	r24, 0xC0	; 192
 1b0:	c7 df       	rcall	.-114    	; 0x140 <LCD_SendCommand>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCD_SendCharacter>:
void LCD_SendCharacter(char symbol)
{
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
	LCD_Counter++;
 1bc:	20 91 5a 01 	lds	r18, 0x015A
 1c0:	30 91 5b 01 	lds	r19, 0x015B
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	30 93 5b 01 	sts	0x015B, r19
 1cc:	20 93 5a 01 	sts	0x015A, r18
	
	if(LCD_Counter == 16)
 1d0:	20 31       	cpi	r18, 0x10	; 16
 1d2:	31 05       	cpc	r19, r1
 1d4:	21 f4       	brne	.+8      	; 0x1de <LCD_SendCharacter+0x26>
	{
		LCD_SetRow(2);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	d2 df       	rcall	.-92     	; 0x180 <LCD_SetRow>
 1dc:	11 c0       	rjmp	.+34     	; 0x200 <LCD_SendCharacter+0x48>
	}
	else if(LCD_Counter == 32)
 1de:	20 32       	cpi	r18, 0x20	; 32
 1e0:	31 05       	cpc	r19, r1
 1e2:	71 f4       	brne	.+28     	; 0x200 <LCD_SendCharacter+0x48>
	{
		LCD_Counter = 0;
 1e4:	10 92 5b 01 	sts	0x015B, r1
 1e8:	10 92 5a 01 	sts	0x015A, r1
		LCD_SetRow(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	c7 df       	rcall	.-114    	; 0x180 <LCD_SetRow>
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <LCD_SendCharacter+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_SendCharacter+0x40>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_SendCharacter+0x46>
 1fe:	00 00       	nop
	}
	
	while(LCD_Busy())
 200:	90 df       	rcall	.-224    	; 0x122 <LCD_Busy>
 202:	89 2b       	or	r24, r25
 204:	b9 f7       	brne	.-18     	; 0x1f4 <LCD_SendCharacter+0x3c>
	{
		_delay_ms(1);
	}
	PORTB |= (1 << 0); // Set RS
 206:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1 << 1); // Clear R/W
 208:	29 98       	cbi	0x05, 1	; 5
	
	//uint8_t tempNum = (int)symbol;
	//PORTD = tempNum;
	
	// If the following doesn't work, delete it and uncomment the two lines above.
	PORTD = (int)symbol;
 20a:	cb b9       	out	0x0b, r28	; 11
	
	PORTB |= 1 << 2; // Set Enable
 20c:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	90 e1       	ldi	r25, 0x10	; 16
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_SendCharacter+0x58>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_SendCharacter+0x5e>
	_delay_us(50); // 50us is the controller execution time of the LCD.
	PORTB &= ~(1 << 2); // Pull Enable.
 216:	2a 98       	cbi	0x05, 2	; 5
}
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LCD_SendString>:

void LCD_SendString(char *text)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
	while(*text)
 222:	88 81       	ld	r24, Y
 224:	88 23       	and	r24, r24
 226:	29 f0       	breq	.+10     	; 0x232 <LCD_SendString+0x16>
 228:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_SendCharacter(*text++);
 22a:	c6 df       	rcall	.-116    	; 0x1b8 <LCD_SendCharacter>
	PORTB &= ~(1 << 2); // Pull Enable.
}

void LCD_SendString(char *text)
{
	while(*text)
 22c:	89 91       	ld	r24, Y+
 22e:	81 11       	cpse	r24, r1
 230:	fc cf       	rjmp	.-8      	; 0x22a <LCD_SendString+0xe>
	{
		LCD_SendCharacter(*text++);
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCD_WelcomeScreen>:
void LCD_WelcomeScreen(void)
{
	LCD_SendString("    ResQ.Pl heh");
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	ef df       	rcall	.-34     	; 0x21c <LCD_SendString>
	LCD_SetRow(2);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9e df       	rcall	.-196    	; 0x180 <LCD_SetRow>
	LCD_SendString("  Master Race  ");
 244:	80 e1       	ldi	r24, 0x10	; 16
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	e9 cf       	rjmp	.-46     	; 0x21c <LCD_SendString>
 24a:	08 95       	ret

0000024c <LCD_Init>:
}

// Initiatazion of the LCD, according to Initializing Flowchart(Condition fosc=270KHz) in the data sheet.
void LCD_Init()
{
	LCD_Counter = 0;
 24c:	10 92 5b 01 	sts	0x015B, r1
 250:	10 92 5a 01 	sts	0x015A, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	8b e4       	ldi	r24, 0x4B	; 75
 256:	9d e1       	ldi	r25, 0x1D	; 29
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_Init+0xc>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_Init+0x12>
 25e:	00 00       	nop
	_delay_ms(30);
	// Configure the LCD for 8 bits, 2 lines, 5x8 pixlex (dots) send instruction 00 0011 1000
	LCD_SendCommand(0b00111000);
 260:	88 e3       	ldi	r24, 0x38	; 56
 262:	6e df       	rcall	.-292    	; 0x140 <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	9d e0       	ldi	r25, 0x0D	; 13
 266:	9a 95       	dec	r25
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_Init+0x1a>
	_delay_us(39);

	// Display, cursor and blinking off, instruction 00 0000 1000
	LCD_SendCommand(0b00001000);
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	69 df       	rcall	.-302    	; 0x140 <LCD_SendCommand>
 26e:	8d e0       	ldi	r24, 0x0D	; 13
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_Init+0x24>
	_delay_us(39);

	// Clear display, instruction 00 0000 0001
	LCD_SendCommand(0b00000001);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	64 df       	rcall	.-312    	; 0x140 <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8e e7       	ldi	r24, 0x7E	; 126
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_Init+0x30>
 280:	00 00       	nop
	_delay_ms(1.53);

	// Cursor moving direction: left-to-right, do not shift he display (shift disabled), instruction 00 0000 0110
	LCD_SendCommand(0b00000110);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	5d df       	rcall	.-326    	; 0x140 <LCD_SendCommand>

	// Display on, cursor ON, blinking on, instruction 00 0000 1110
	LCD_SendCommand(0b00001110);
 286:	8e e0       	ldi	r24, 0x0E	; 14
 288:	5b cf       	rjmp	.-330    	; 0x140 <LCD_SendCommand>
 28a:	08 95       	ret

0000028c <main>:
}

int main(void)
{
	char SPDRrec_ = '0';
	sei();	// Enable global interrupts
 28c:	78 94       	sei
	sleep_enable();	// Enable sleep instruction
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	81 60       	ori	r24, 0x01	; 1
 292:	83 bf       	out	0x33, r24	; 51
	Styr_InitPortDirections();	// Initiate Port directions for the styrmodul.
 294:	19 df       	rcall	.-462    	; 0xc8 <Styr_InitPortDirections>
} 

// Setups port values, more specifically puts SS on high.
void Styr_InitPortValues(void)
{
	PORTB = 1<<PORTB3 | 1<<PORTB4 | 1<<PORTC0;
 296:	89 e1       	ldi	r24, 0x19	; 25
 298:	85 b9       	out	0x05, r24	; 5
	char SPDRrec_ = '0';
	sei();	// Enable global interrupts
	sleep_enable();	// Enable sleep instruction
	Styr_InitPortDirections();	// Initiate Port directions for the styrmodul.
	Styr_InitPortValues();	// Initiate Port Values for the styrmodul.
	SPI_MasterInit();	// Initiate the styrmodul as the SPI master.
 29a:	1f df       	rcall	.-450    	; 0xda <SPI_MasterInit>
	LCD_Init(); // Initiate the LCD.
 29c:	d7 df       	rcall	.-82     	; 0x24c <LCD_Init>
	
	LCD_WelcomeScreen(); // Welcomes the user with a nice message ;-)
 29e:	cc df       	rcall	.-104    	; 0x238 <LCD_WelcomeScreen>
	
	
 	//SPDRrec_ = SPI_MasterTransmit(0x01, 'k');
	//

	LCD_SetRow(1);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	6d df       	rcall	.-294    	; 0x180 <LCD_SetRow>
	LCD_SendCharacter('7');
 2a6:	87 e3       	ldi	r24, 0x37	; 55
 2a8:	87 df       	rcall	.-242    	; 0x1b8 <LCD_SendCharacter>
	SPDRrec_ = SPI_MasterTransmit(1, 'k');
 2aa:	6b e6       	ldi	r22, 0x6B	; 107
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	19 df       	rcall	.-462    	; 0xe2 <SPI_MasterTransmit>
	LCD_SendCharacter(SPDRrec_);
 2b0:	83 df       	rcall	.-250    	; 0x1b8 <LCD_SendCharacter>
	SPDRrec_ = SPI_MasterTransmit(2, 'k');
 2b2:	6b e6       	ldi	r22, 0x6B	; 107
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	15 df       	rcall	.-470    	; 0xe2 <SPI_MasterTransmit>
	LCD_SendCharacter(SPDRrec_);
 2b8:	7f df       	rcall	.-258    	; 0x1b8 <LCD_SendCharacter>
	
	
	
	//activate ADC in gyro, if it was not active already ("initieringen")
	char dataH, dataL;
	SPDRrec_ = SPI_MasterTransmit(0b10010100,'g');
 2ba:	67 e6       	ldi	r22, 0x67	; 103
 2bc:	84 e9       	ldi	r24, 0x94	; 148
 2be:	11 df       	rcall	.-478    	; 0xe2 <SPI_MasterTransmit>
	SPDRrec_ = SPI_MasterTransmit(0,'g');
 2c0:	67 e6       	ldi	r22, 0x67	; 103
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e df       	rcall	.-484    	; 0xe2 <SPI_MasterTransmit>
	//SPDRrec_ = SPI_MasterTransmit(0,'g');
	if (!(SPDR &= 0b10000000)) { // if bit 7 is zero, the instruction is accepted
 2c6:	8e b5       	in	r24, 0x2e	; 46
 2c8:	80 78       	andi	r24, 0x80	; 128
 2ca:	8e bd       	out	0x2e, r24	; 46
 2cc:	81 11       	cpse	r24, r1
 2ce:	11 c0       	rjmp	.+34     	; 0x2f2 <main+0x66>
		LCD_SendString("instr1 accepted");
 2d0:	80 e2       	ldi	r24, 0x20	; 32
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	a3 df       	rcall	.-186    	; 0x21c <LCD_SendString>
		while (!(SPDR &= 0b00100000)) { // wait for EOC bit (bit 5) to be set - means AD-conversion is complete
 2d6:	8e b5       	in	r24, 0x2e	; 46
 2d8:	80 72       	andi	r24, 0x20	; 32
 2da:	8e bd       	out	0x2e, r24	; 46
 2dc:	81 11       	cpse	r24, r1
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x56>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x58>
 2e4:	00 00       	nop
 2e6:	8e b5       	in	r24, 0x2e	; 46
 2e8:	80 72       	andi	r24, 0x20	; 32
 2ea:	8e bd       	out	0x2e, r24	; 46
 2ec:	88 23       	and	r24, r24
 2ee:	c1 f3       	breq	.-16     	; 0x2e0 <main+0x54>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <main+0x6c>
			_delay_us(5);  // instead of while loop can just wait for > 115us
		}
	}
	else LCD_SendString("wrong instr1");
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	92 df       	rcall	.-220    	; 0x21c <LCD_SendString>
	
	while(1)
    {		
		SPDRrec_ = SPI_MasterTransmit(0,'k');
 2f8:	6b e6       	ldi	r22, 0x6B	; 107
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	f2 de       	rcall	.-540    	; 0xe2 <SPI_MasterTransmit>
		LCD_SendCharacter(SPDRrec_);
 2fe:	5c df       	rcall	.-328    	; 0x1b8 <LCD_SendCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f e3       	ldi	r18, 0x3F	; 63
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x7a>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x84>
 310:	00 00       	nop
		
		
		
				
		// start the conversion (notera att samma instruktion skickas vid aktivering av ADC:en i gyro)
		SPDRrec_ = SPI_MasterTransmit(0b10010100,'g'); //ss to 0, enabling the sensor
 312:	67 e6       	ldi	r22, 0x67	; 103
 314:	84 e9       	ldi	r24, 0x94	; 148
 316:	e5 de       	rcall	.-566    	; 0xe2 <SPI_MasterTransmit>
		SPDRrec_ = SPI_MasterTransmit(0,'g');
 318:	67 e6       	ldi	r22, 0x67	; 103
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	e2 de       	rcall	.-572    	; 0xe2 <SPI_MasterTransmit>
		//SPDRrec_ = SPI_MasterTransmit(0,'g');
		if (!(SPDR &= 0b10000000)) { // if bit 7 is zero, the instruction is accepted
 31e:	8e b5       	in	r24, 0x2e	; 46
 320:	80 78       	andi	r24, 0x80	; 128
 322:	8e bd       	out	0x2e, r24	; 46
 324:	81 11       	cpse	r24, r1
 326:	04 c0       	rjmp	.+8      	; 0x330 <main+0xa4>
			LCD_SendString("instr2 accepted");
 328:	8d e3       	ldi	r24, 0x3D	; 61
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	77 df       	rcall	.-274    	; 0x21c <LCD_SendString>
 32e:	03 c0       	rjmp	.+6      	; 0x336 <main+0xaa>
			}
		else LCD_SendString("wrong instr2");
 330:	8d e4       	ldi	r24, 0x4D	; 77
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	73 df       	rcall	.-282    	; 0x21c <LCD_SendString>
		
		// polling and result obtaining
		SPI_MasterTransmit(0b10000000, 'g'); // send SPI ADCR instruction
 336:	67 e6       	ldi	r22, 0x67	; 103
 338:	80 e8       	ldi	r24, 0x80	; 128
 33a:	d3 de       	rcall	.-602    	; 0xe2 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	28 e2       	ldi	r18, 0x28	; 40
 33e:	2a 95       	dec	r18
 340:	f1 f7       	brne	.-4      	; 0x33e <main+0xb2>
		// mb need to check "instr accepted" bit and "and conversion done" bit before continuing.....
		_delay_us(120); //but do this for now
		dataH = SPI_MasterTransmit(0x00, 'g'); // get the sensor response high byte
 342:	67 e6       	ldi	r22, 0x67	; 103
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	cd de       	rcall	.-614    	; 0xe2 <SPI_MasterTransmit>
		dataL = SPI_MasterTransmit(0x00, 'g'); // get the sensor response low byte
 348:	67 e6       	ldi	r22, 0x67	; 103
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	ca de       	rcall	.-620    	; 0xe2 <SPI_MasterTransmit>
		PORTC |= 1<<PORTC0; //set ss to 1; disabling the sensor
 34e:	40 9a       	sbi	0x08, 0	; 8
		//_delay_ms(15000);
		//SPDRrec_ = SPI_MasterTransmit(5,'k');
		//LCD_SendCharacter(SPDRrec_);
		//_delay_ms(15000);
		//LCD_SetRow(1);
	}
 350:	d3 cf       	rjmp	.-90     	; 0x2f8 <main+0x6c>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
