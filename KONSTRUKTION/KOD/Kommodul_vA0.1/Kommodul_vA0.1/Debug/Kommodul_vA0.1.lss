
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000066c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000264  0080011e  0080011e  0000071e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000838  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000240  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044a  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e6  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000024c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	60 c1       	rjmp	.+704    	; 0x30e <__vector_19>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__vector_20>
  52:	00 00       	nop
  54:	b2 c0       	rjmp	.+356    	; 0x1ba <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5f d1       	rcall	.+702    	; 0x382 <main>
  c4:	d1 c2       	rjmp	.+1442   	; 0x668 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
	
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) & !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <send_BT_buffer>:
  f2:	44 e6       	ldi	r20, 0x64	; 100
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	bc 01       	movw	r22, r24
  f8:	8e ee       	ldi	r24, 0xEE	; 238
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	a6 d2       	rcall	.+1356   	; 0x64a <strncpy>
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Write_Buffer>:
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	8c 01       	movw	r16, r24
 116:	f6 2e       	mov	r15, r22
 118:	ea 01       	movw	r28, r20
 11a:	88 81       	ld	r24, Y
 11c:	82 36       	cpi	r24, 0x62	; 98
 11e:	21 f4       	brne	.+8      	; 0x128 <Write_Buffer+0x1e>
 120:	18 82       	st	Y, r1
 122:	8a e1       	ldi	r24, 0x1A	; 26
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	e5 df       	rcall	.-54     	; 0xf2 <send_BT_buffer>
 128:	88 81       	ld	r24, Y
 12a:	f8 01       	movw	r30, r16
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	f0 82       	st	Z, r15
 132:	88 81       	ld	r24, Y
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	88 83       	st	Y, r24
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	08 95       	ret

00000144 <Read_Buffer>:
 144:	fb 01       	movw	r30, r22
 146:	20 81       	ld	r18, Z
 148:	82 0f       	add	r24, r18
 14a:	91 1d       	adc	r25, r1
 14c:	dc 01       	movw	r26, r24
 14e:	8c 91       	ld	r24, X
 150:	90 81       	ld	r25, Z
 152:	9f 5f       	subi	r25, 0xFF	; 255
 154:	90 83       	st	Z, r25
 156:	08 95       	ret

00000158 <__vector_20>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	10 92 23 01 	sts	0x0123, r1
 182:	60 91 c6 00 	lds	r22, 0x00C6
 186:	40 91 08 01 	lds	r20, 0x0108
 18a:	50 91 09 01 	lds	r21, 0x0109
 18e:	8a e1       	ldi	r24, 0x1A	; 26
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	bb df       	rcall	.-138    	; 0x10a <Write_Buffer>
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_21>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	0b b6       	in	r0, 0x3b	; 59
 1c6:	0f 92       	push	r0
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	e0 91 06 01 	lds	r30, 0x0106
 1e4:	f0 91 07 01 	lds	r31, 0x0107
 1e8:	80 81       	ld	r24, Z
 1ea:	84 36       	cpi	r24, 0x64	; 100
 1ec:	51 f4       	brne	.+20     	; 0x202 <__vector_21+0x48>
 1ee:	10 82       	st	Z, r1
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 22 01 	sts	0x0122, r24
 1f6:	e1 ec       	ldi	r30, 0xC1	; 193
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	80 83       	st	Z, r24
 200:	08 c0       	rjmp	.+16     	; 0x212 <__vector_21+0x58>
 202:	10 92 22 01 	sts	0x0122, r1
 206:	bf 01       	movw	r22, r30
 208:	8e ee       	ldi	r24, 0xEE	; 238
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9b df       	rcall	.-202    	; 0x144 <Read_Buffer>
 20e:	80 93 c6 00 	sts	0x00C6, r24
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <add_node>:
	
}

void add_node(buffer_* lst_head, int val)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	8b 01       	movw	r16, r22

	buffer_ * curr = lst_head;
	while(curr->next != NULL) // step to end of list
 244:	2a 81       	ldd	r18, Y+2	; 0x02
 246:	3b 81       	ldd	r19, Y+3	; 0x03
 248:	21 15       	cp	r18, r1
 24a:	31 05       	cpc	r19, r1
 24c:	11 f0       	breq	.+4      	; 0x252 <add_node+0x1a>
	{
		curr = curr->next;
 24e:	e9 01       	movw	r28, r18
 250:	f9 cf       	rjmp	.-14     	; 0x244 <add_node+0xc>
	}
	curr->next = (buffer_ *)malloc(sizeof(buffer_));
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	d2 d0       	rcall	.+420    	; 0x3fc <malloc>
 258:	9b 83       	std	Y+3, r25	; 0x03
 25a:	8a 83       	std	Y+2, r24	; 0x02
	curr->next->val = val;
 25c:	fc 01       	movw	r30, r24
 25e:	11 83       	std	Z+1, r17	; 0x01
 260:	00 83       	st	Z, r16
	curr->next->next = NULL; // Add node last.
 262:	ea 81       	ldd	r30, Y+2	; 0x02
 264:	fb 81       	ldd	r31, Y+3	; 0x03
 266:	13 82       	std	Z+3, r1	; 0x03
 268:	12 82       	std	Z+2, r1	; 0x02
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <pop_node>:

int pop_node(buffer_ ** lst_head)
{
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
	buffer_* next_node = NULL;
	int retval = 0;
	
	if ( *lst_head != NULL)
 282:	e8 81       	ld	r30, Y
 284:	f9 81       	ldd	r31, Y+1	; 0x01
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	49 f0       	breq	.+18     	; 0x29c <pop_node+0x28>
	{
		next_node = (*lst_head)->next;
 28a:	e2 80       	ldd	r14, Z+2	; 0x02
 28c:	f3 80       	ldd	r15, Z+3	; 0x03
		retval = (*lst_head)->val;
 28e:	00 81       	ld	r16, Z
 290:	11 81       	ldd	r17, Z+1	; 0x01
		free(*lst_head);
 292:	cf 01       	movw	r24, r30
 294:	4b d1       	rcall	.+662    	; 0x52c <free>
		*lst_head = next_node;
 296:	f9 82       	std	Y+1, r15	; 0x01
 298:	e8 82       	st	Y, r14
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <pop_node+0x2c>
}

int pop_node(buffer_ ** lst_head)
{
	buffer_* next_node = NULL;
	int retval = 0;
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	10 e0       	ldi	r17, 0x00	; 0
		free(*lst_head);
		*lst_head = next_node;
	}
	
	return retval;
}
 2a0:	c8 01       	movw	r24, r16
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <flush_list>:

void flush_list(buffer_ ** lst_head)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
	while(*lst_head != NULL)
 2b6:	88 81       	ld	r24, Y
 2b8:	99 81       	ldd	r25, Y+1	; 0x01
 2ba:	89 2b       	or	r24, r25
 2bc:	31 f0       	breq	.+12     	; 0x2ca <flush_list+0x1a>
	{
		pop_node(lst_head);
 2be:	ce 01       	movw	r24, r28
 2c0:	d9 df       	rcall	.-78     	; 0x274 <pop_node>
	return retval;
}

void flush_list(buffer_ ** lst_head)
{
	while(*lst_head != NULL)
 2c2:	88 81       	ld	r24, Y
 2c4:	99 81       	ldd	r25, Y+1	; 0x01
 2c6:	89 2b       	or	r24, r25
 2c8:	d1 f7       	brne	.-12     	; 0x2be <flush_list+0xe>
	{
		pop_node(lst_head);
	}
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <SPI_send>:

void SPI_send(int tosend)
{
	add_node(head_SPIout, tosend); //Add node with tosend-value to desired list
 2d0:	bc 01       	movw	r22, r24
 2d2:	80 91 20 01 	lds	r24, 0x0120
 2d6:	90 91 21 01 	lds	r25, 0x0121
 2da:	ae cf       	rjmp	.-164    	; 0x238 <add_node>
 2dc:	08 95       	ret

000002de <SPI_send_arr>:
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
	int i = 0;
	while(i < size)// +2 due to continu
 2e6:	16 16       	cp	r1, r22
 2e8:	17 06       	cpc	r1, r23
 2ea:	64 f4       	brge	.+24     	; 0x304 <SPI_send_arr+0x26>
 2ec:	ec 01       	movw	r28, r24
 2ee:	8c 01       	movw	r16, r24
 2f0:	06 0f       	add	r16, r22
 2f2:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 2f4:	89 91       	ld	r24, Y+
 2f6:	99 27       	eor	r25, r25
 2f8:	87 fd       	sbrc	r24, 7
 2fa:	90 95       	com	r25
 2fc:	e9 df       	rcall	.-46     	; 0x2d0 <SPI_send>
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)// +2 due to continu
 2fe:	c0 17       	cp	r28, r16
 300:	d1 07       	cpc	r29, r17
 302:	c1 f7       	brne	.-16     	; 0x2f4 <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <__vector_19>:

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	0f 92       	push	r0
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	int data = (int)SPDR;
 334:	6e b5       	in	r22, 0x2e	; 46
 336:	70 e0       	ldi	r23, 0x00	; 0
	add_node(head_SPIin, data); // Add received data to in-queue
 338:	80 91 1e 01 	lds	r24, 0x011E
 33c:	90 91 1f 01 	lds	r25, 0x011F
 340:	7b df       	rcall	.-266    	; 0x238 <add_node>
	if (head_SPIout == NULL)
 342:	80 91 20 01 	lds	r24, 0x0120
 346:	90 91 21 01 	lds	r25, 0x0121
 34a:	89 2b       	or	r24, r25
 34c:	19 f4       	brne	.+6      	; 0x354 <__vector_19+0x46>
	{
		int8_t stop_bit = -128; //0b10000000, cant be shown on lcd as -128 due to limits in print func.
		SPDR = stop_bit;
 34e:	80 e8       	ldi	r24, 0x80	; 128
 350:	8e bd       	out	0x2e, r24	; 46
 352:	04 c0       	rjmp	.+8      	; 0x35c <__vector_19+0x4e>
	}
	else
	{
		SPDR = (int8_t)pop_node(&head_SPIout);
 354:	80 e2       	ldi	r24, 0x20	; 32
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	8d df       	rcall	.-230    	; 0x274 <pop_node>
 35a:	8e bd       	out	0x2e, r24	; 46
	}
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0b be       	out	0x3b, r0	; 59
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <main>:


int main(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	64 97       	sbiw	r28, 0x14	; 20
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61

	head_SPIout = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to send and alloc memory.
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	30 d0       	rcall	.+96     	; 0x3fc <malloc>
 39c:	90 93 21 01 	sts	0x0121, r25
 3a0:	80 93 20 01 	sts	0x0120, r24
	head_SPIout->next= NULL;
 3a4:	fc 01       	movw	r30, r24
 3a6:	13 82       	std	Z+3, r1	; 0x03
 3a8:	12 82       	std	Z+2, r1	; 0x02
	head_SPIout->val = 0;
 3aa:	11 82       	std	Z+1, r1	; 0x01
 3ac:	10 82       	st	Z, r1
	

	head_SPIin = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to receive and alloc memory.
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	24 d0       	rcall	.+72     	; 0x3fc <malloc>
 3b4:	90 93 1f 01 	sts	0x011F, r25
 3b8:	80 93 1e 01 	sts	0x011E, r24
	head_SPIin->next= NULL;
 3bc:	fc 01       	movw	r30, r24
 3be:	13 82       	std	Z+3, r1	; 0x03
 3c0:	12 82       	std	Z+2, r1	; 0x02
	head_SPIin->val = 0;
 3c2:	11 82       	std	Z+1, r1	; 0x01
 3c4:	10 82       	st	Z, r1
	
	sleep_enable();
 3c6:	83 b7       	in	r24, 0x33	; 51
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 3cc:	7d de       	rcall	.-774    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	85 b9       	out	0x05, r24	; 5
	head_SPIin->val = 0;
	
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 3d2:	7f de       	rcall	.-770    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 3d4:	82 de       	rcall	.-764    	; 0xda <BT_init>
	sei();
 3d6:	78 94       	sei
	//flush_list(&head_SPIout);
	//flush_list(&head_SPIin);
	int8_t array[] ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
 3d8:	84 e1       	ldi	r24, 0x14	; 20
 3da:	ea e0       	ldi	r30, 0x0A	; 10
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	de 01       	movw	r26, r28
 3e0:	11 96       	adiw	r26, 0x01	; 1
 3e2:	01 90       	ld	r0, Z+
 3e4:	0d 92       	st	X+, r0
 3e6:	8a 95       	dec	r24
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x60>
	SPI_send_arr(array, (sizeof(array)/sizeof(array[0]))); // sizeof(array)/sizeof(element in array) = lenght of array
 3ea:	64 e1       	ldi	r22, 0x14	; 20
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	75 df       	rcall	.-278    	; 0x2de <SPI_send_arr>
	while(1)
	{
		flush_list(&head_SPIin);
 3f4:	8e e1       	ldi	r24, 0x1E	; 30
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	5b df       	rcall	.-330    	; 0x2b0 <flush_list>
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <main+0x72>

000003fc <malloc>:
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	91 05       	cpc	r25, r1
 404:	10 f4       	brcc	.+4      	; 0x40a <malloc+0xe>
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	e0 91 80 03 	lds	r30, 0x0380
 40e:	f0 91 81 03 	lds	r31, 0x0381
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	a0 e0       	ldi	r26, 0x00	; 0
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	39 f1       	breq	.+78     	; 0x46c <malloc+0x70>
 41e:	40 81       	ld	r20, Z
 420:	51 81       	ldd	r21, Z+1	; 0x01
 422:	48 17       	cp	r20, r24
 424:	59 07       	cpc	r21, r25
 426:	b8 f0       	brcs	.+46     	; 0x456 <malloc+0x5a>
 428:	48 17       	cp	r20, r24
 42a:	59 07       	cpc	r21, r25
 42c:	71 f4       	brne	.+28     	; 0x44a <malloc+0x4e>
 42e:	82 81       	ldd	r24, Z+2	; 0x02
 430:	93 81       	ldd	r25, Z+3	; 0x03
 432:	10 97       	sbiw	r26, 0x00	; 0
 434:	29 f0       	breq	.+10     	; 0x440 <malloc+0x44>
 436:	13 96       	adiw	r26, 0x03	; 3
 438:	9c 93       	st	X, r25
 43a:	8e 93       	st	-X, r24
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	2c c0       	rjmp	.+88     	; 0x498 <malloc+0x9c>
 440:	90 93 81 03 	sts	0x0381, r25
 444:	80 93 80 03 	sts	0x0380, r24
 448:	27 c0       	rjmp	.+78     	; 0x498 <malloc+0x9c>
 44a:	21 15       	cp	r18, r1
 44c:	31 05       	cpc	r19, r1
 44e:	31 f0       	breq	.+12     	; 0x45c <malloc+0x60>
 450:	42 17       	cp	r20, r18
 452:	53 07       	cpc	r21, r19
 454:	18 f0       	brcs	.+6      	; 0x45c <malloc+0x60>
 456:	a9 01       	movw	r20, r18
 458:	db 01       	movw	r26, r22
 45a:	01 c0       	rjmp	.+2      	; 0x45e <malloc+0x62>
 45c:	ef 01       	movw	r28, r30
 45e:	9a 01       	movw	r18, r20
 460:	bd 01       	movw	r22, r26
 462:	df 01       	movw	r26, r30
 464:	02 80       	ldd	r0, Z+2	; 0x02
 466:	f3 81       	ldd	r31, Z+3	; 0x03
 468:	e0 2d       	mov	r30, r0
 46a:	d7 cf       	rjmp	.-82     	; 0x41a <malloc+0x1e>
 46c:	21 15       	cp	r18, r1
 46e:	31 05       	cpc	r19, r1
 470:	f9 f0       	breq	.+62     	; 0x4b0 <malloc+0xb4>
 472:	28 1b       	sub	r18, r24
 474:	39 0b       	sbc	r19, r25
 476:	24 30       	cpi	r18, 0x04	; 4
 478:	31 05       	cpc	r19, r1
 47a:	80 f4       	brcc	.+32     	; 0x49c <malloc+0xa0>
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	9b 81       	ldd	r25, Y+3	; 0x03
 480:	61 15       	cp	r22, r1
 482:	71 05       	cpc	r23, r1
 484:	21 f0       	breq	.+8      	; 0x48e <malloc+0x92>
 486:	fb 01       	movw	r30, r22
 488:	93 83       	std	Z+3, r25	; 0x03
 48a:	82 83       	std	Z+2, r24	; 0x02
 48c:	04 c0       	rjmp	.+8      	; 0x496 <malloc+0x9a>
 48e:	90 93 81 03 	sts	0x0381, r25
 492:	80 93 80 03 	sts	0x0380, r24
 496:	fe 01       	movw	r30, r28
 498:	32 96       	adiw	r30, 0x02	; 2
 49a:	44 c0       	rjmp	.+136    	; 0x524 <malloc+0x128>
 49c:	fe 01       	movw	r30, r28
 49e:	e2 0f       	add	r30, r18
 4a0:	f3 1f       	adc	r31, r19
 4a2:	81 93       	st	Z+, r24
 4a4:	91 93       	st	Z+, r25
 4a6:	22 50       	subi	r18, 0x02	; 2
 4a8:	31 09       	sbc	r19, r1
 4aa:	39 83       	std	Y+1, r19	; 0x01
 4ac:	28 83       	st	Y, r18
 4ae:	3a c0       	rjmp	.+116    	; 0x524 <malloc+0x128>
 4b0:	20 91 7e 03 	lds	r18, 0x037E
 4b4:	30 91 7f 03 	lds	r19, 0x037F
 4b8:	23 2b       	or	r18, r19
 4ba:	41 f4       	brne	.+16     	; 0x4cc <malloc+0xd0>
 4bc:	20 91 02 01 	lds	r18, 0x0102
 4c0:	30 91 03 01 	lds	r19, 0x0103
 4c4:	30 93 7f 03 	sts	0x037F, r19
 4c8:	20 93 7e 03 	sts	0x037E, r18
 4cc:	20 91 00 01 	lds	r18, 0x0100
 4d0:	30 91 01 01 	lds	r19, 0x0101
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	41 f4       	brne	.+16     	; 0x4ea <malloc+0xee>
 4da:	2d b7       	in	r18, 0x3d	; 61
 4dc:	3e b7       	in	r19, 0x3e	; 62
 4de:	40 91 04 01 	lds	r20, 0x0104
 4e2:	50 91 05 01 	lds	r21, 0x0105
 4e6:	24 1b       	sub	r18, r20
 4e8:	35 0b       	sbc	r19, r21
 4ea:	e0 91 7e 03 	lds	r30, 0x037E
 4ee:	f0 91 7f 03 	lds	r31, 0x037F
 4f2:	e2 17       	cp	r30, r18
 4f4:	f3 07       	cpc	r31, r19
 4f6:	a0 f4       	brcc	.+40     	; 0x520 <malloc+0x124>
 4f8:	2e 1b       	sub	r18, r30
 4fa:	3f 0b       	sbc	r19, r31
 4fc:	28 17       	cp	r18, r24
 4fe:	39 07       	cpc	r19, r25
 500:	78 f0       	brcs	.+30     	; 0x520 <malloc+0x124>
 502:	ac 01       	movw	r20, r24
 504:	4e 5f       	subi	r20, 0xFE	; 254
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	24 17       	cp	r18, r20
 50a:	35 07       	cpc	r19, r21
 50c:	48 f0       	brcs	.+18     	; 0x520 <malloc+0x124>
 50e:	4e 0f       	add	r20, r30
 510:	5f 1f       	adc	r21, r31
 512:	50 93 7f 03 	sts	0x037F, r21
 516:	40 93 7e 03 	sts	0x037E, r20
 51a:	81 93       	st	Z+, r24
 51c:	91 93       	st	Z+, r25
 51e:	02 c0       	rjmp	.+4      	; 0x524 <malloc+0x128>
 520:	e0 e0       	ldi	r30, 0x00	; 0
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	cf 01       	movw	r24, r30
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <free>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	09 f4       	brne	.+2      	; 0x536 <free+0xa>
 534:	87 c0       	rjmp	.+270    	; 0x644 <free+0x118>
 536:	fc 01       	movw	r30, r24
 538:	32 97       	sbiw	r30, 0x02	; 2
 53a:	13 82       	std	Z+3, r1	; 0x03
 53c:	12 82       	std	Z+2, r1	; 0x02
 53e:	c0 91 80 03 	lds	r28, 0x0380
 542:	d0 91 81 03 	lds	r29, 0x0381
 546:	20 97       	sbiw	r28, 0x00	; 0
 548:	81 f4       	brne	.+32     	; 0x56a <free+0x3e>
 54a:	20 81       	ld	r18, Z
 54c:	31 81       	ldd	r19, Z+1	; 0x01
 54e:	28 0f       	add	r18, r24
 550:	39 1f       	adc	r19, r25
 552:	80 91 7e 03 	lds	r24, 0x037E
 556:	90 91 7f 03 	lds	r25, 0x037F
 55a:	82 17       	cp	r24, r18
 55c:	93 07       	cpc	r25, r19
 55e:	79 f5       	brne	.+94     	; 0x5be <free+0x92>
 560:	f0 93 7f 03 	sts	0x037F, r31
 564:	e0 93 7e 03 	sts	0x037E, r30
 568:	6d c0       	rjmp	.+218    	; 0x644 <free+0x118>
 56a:	de 01       	movw	r26, r28
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	ae 17       	cp	r26, r30
 572:	bf 07       	cpc	r27, r31
 574:	50 f4       	brcc	.+20     	; 0x58a <free+0x5e>
 576:	12 96       	adiw	r26, 0x02	; 2
 578:	4d 91       	ld	r20, X+
 57a:	5c 91       	ld	r21, X
 57c:	13 97       	sbiw	r26, 0x03	; 3
 57e:	9d 01       	movw	r18, r26
 580:	41 15       	cp	r20, r1
 582:	51 05       	cpc	r21, r1
 584:	09 f1       	breq	.+66     	; 0x5c8 <free+0x9c>
 586:	da 01       	movw	r26, r20
 588:	f3 cf       	rjmp	.-26     	; 0x570 <free+0x44>
 58a:	b3 83       	std	Z+3, r27	; 0x03
 58c:	a2 83       	std	Z+2, r26	; 0x02
 58e:	40 81       	ld	r20, Z
 590:	51 81       	ldd	r21, Z+1	; 0x01
 592:	84 0f       	add	r24, r20
 594:	95 1f       	adc	r25, r21
 596:	8a 17       	cp	r24, r26
 598:	9b 07       	cpc	r25, r27
 59a:	71 f4       	brne	.+28     	; 0x5b8 <free+0x8c>
 59c:	8d 91       	ld	r24, X+
 59e:	9c 91       	ld	r25, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	84 0f       	add	r24, r20
 5a4:	95 1f       	adc	r25, r21
 5a6:	02 96       	adiw	r24, 0x02	; 2
 5a8:	91 83       	std	Z+1, r25	; 0x01
 5aa:	80 83       	st	Z, r24
 5ac:	12 96       	adiw	r26, 0x02	; 2
 5ae:	8d 91       	ld	r24, X+
 5b0:	9c 91       	ld	r25, X
 5b2:	13 97       	sbiw	r26, 0x03	; 3
 5b4:	93 83       	std	Z+3, r25	; 0x03
 5b6:	82 83       	std	Z+2, r24	; 0x02
 5b8:	21 15       	cp	r18, r1
 5ba:	31 05       	cpc	r19, r1
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <free+0x9c>
 5be:	f0 93 81 03 	sts	0x0381, r31
 5c2:	e0 93 80 03 	sts	0x0380, r30
 5c6:	3e c0       	rjmp	.+124    	; 0x644 <free+0x118>
 5c8:	d9 01       	movw	r26, r18
 5ca:	13 96       	adiw	r26, 0x03	; 3
 5cc:	fc 93       	st	X, r31
 5ce:	ee 93       	st	-X, r30
 5d0:	12 97       	sbiw	r26, 0x02	; 2
 5d2:	4d 91       	ld	r20, X+
 5d4:	5d 91       	ld	r21, X+
 5d6:	a4 0f       	add	r26, r20
 5d8:	b5 1f       	adc	r27, r21
 5da:	ea 17       	cp	r30, r26
 5dc:	fb 07       	cpc	r31, r27
 5de:	79 f4       	brne	.+30     	; 0x5fe <free+0xd2>
 5e0:	80 81       	ld	r24, Z
 5e2:	91 81       	ldd	r25, Z+1	; 0x01
 5e4:	84 0f       	add	r24, r20
 5e6:	95 1f       	adc	r25, r21
 5e8:	02 96       	adiw	r24, 0x02	; 2
 5ea:	d9 01       	movw	r26, r18
 5ec:	11 96       	adiw	r26, 0x01	; 1
 5ee:	9c 93       	st	X, r25
 5f0:	8e 93       	st	-X, r24
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	93 81       	ldd	r25, Z+3	; 0x03
 5f6:	13 96       	adiw	r26, 0x03	; 3
 5f8:	9c 93       	st	X, r25
 5fa:	8e 93       	st	-X, r24
 5fc:	12 97       	sbiw	r26, 0x02	; 2
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	9b 81       	ldd	r25, Y+3	; 0x03
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	19 f0       	breq	.+6      	; 0x610 <free+0xe4>
 60a:	fe 01       	movw	r30, r28
 60c:	ec 01       	movw	r28, r24
 60e:	f9 cf       	rjmp	.-14     	; 0x602 <free+0xd6>
 610:	ce 01       	movw	r24, r28
 612:	02 96       	adiw	r24, 0x02	; 2
 614:	28 81       	ld	r18, Y
 616:	39 81       	ldd	r19, Y+1	; 0x01
 618:	82 0f       	add	r24, r18
 61a:	93 1f       	adc	r25, r19
 61c:	20 91 7e 03 	lds	r18, 0x037E
 620:	30 91 7f 03 	lds	r19, 0x037F
 624:	28 17       	cp	r18, r24
 626:	39 07       	cpc	r19, r25
 628:	69 f4       	brne	.+26     	; 0x644 <free+0x118>
 62a:	30 97       	sbiw	r30, 0x00	; 0
 62c:	29 f4       	brne	.+10     	; 0x638 <free+0x10c>
 62e:	10 92 81 03 	sts	0x0381, r1
 632:	10 92 80 03 	sts	0x0380, r1
 636:	02 c0       	rjmp	.+4      	; 0x63c <free+0x110>
 638:	13 82       	std	Z+3, r1	; 0x03
 63a:	12 82       	std	Z+2, r1	; 0x02
 63c:	d0 93 7f 03 	sts	0x037F, r29
 640:	c0 93 7e 03 	sts	0x037E, r28
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <strncpy>:
 64a:	fb 01       	movw	r30, r22
 64c:	dc 01       	movw	r26, r24
 64e:	41 50       	subi	r20, 0x01	; 1
 650:	50 40       	sbci	r21, 0x00	; 0
 652:	48 f0       	brcs	.+18     	; 0x666 <strncpy+0x1c>
 654:	01 90       	ld	r0, Z+
 656:	0d 92       	st	X+, r0
 658:	00 20       	and	r0, r0
 65a:	c9 f7       	brne	.-14     	; 0x64e <strncpy+0x4>
 65c:	01 c0       	rjmp	.+2      	; 0x660 <strncpy+0x16>
 65e:	1d 92       	st	X+, r1
 660:	41 50       	subi	r20, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	e0 f7       	brcc	.-8      	; 0x65e <strncpy+0x14>
 666:	08 95       	ret

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
