
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800124  00800124  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ca  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000285  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047a  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007dc  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c1       	rjmp	.+604    	; 0x2aa <__vector_19>
  4e:	00 00       	nop
  50:	94 c0       	rjmp	.+296    	; 0x17a <__vector_20>
  52:	00 00       	nop
  54:	c4 c0       	rjmp	.+392    	; 0x1de <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2c d1       	rcall	.+600    	; 0x31c <main>
  c4:	a3 c2       	rjmp	.+1350   	; 0x60c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
	
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) & !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	3a 81       	ldd	r19, Y+2	; 0x02
 100:	21 15       	cp	r18, r1
 102:	31 05       	cpc	r19, r1
 104:	11 f0       	breq	.+4      	; 0x10a <add_node+0x18>
 106:	e9 01       	movw	r28, r18
 108:	f9 cf       	rjmp	.-14     	; 0xfc <add_node+0xa>
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	57 d1       	rcall	.+686    	; 0x3be <malloc>
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	fc 01       	movw	r30, r24
 116:	10 83       	st	Z, r17
 118:	e9 81       	ldd	r30, Y+1	; 0x01
 11a:	fa 81       	ldd	r31, Y+2	; 0x02
 11c:	12 82       	std	Z+2, r1	; 0x02
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <pop_node>:
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	e8 81       	ld	r30, Y
 136:	f9 81       	ldd	r31, Y+1	; 0x01
 138:	30 97       	sbiw	r30, 0x00	; 0
 13a:	41 f0       	breq	.+16     	; 0x14c <pop_node+0x24>
 13c:	01 81       	ldd	r16, Z+1	; 0x01
 13e:	12 81       	ldd	r17, Z+2	; 0x02
 140:	f0 80       	ld	r15, Z
 142:	cf 01       	movw	r24, r30
 144:	d4 d1       	rcall	.+936    	; 0x4ee <free>
 146:	19 83       	std	Y+1, r17	; 0x01
 148:	08 83       	st	Y, r16
 14a:	01 c0       	rjmp	.+2      	; 0x14e <pop_node+0x26>
 14c:	f1 2c       	mov	r15, r1
 14e:	8f 2d       	mov	r24, r15
 150:	99 27       	eor	r25, r25
 152:	87 fd       	sbrc	r24, 7
 154:	90 95       	com	r25
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	08 95       	ret

00000162 <BT_send>:
 162:	68 2f       	mov	r22, r24
 164:	80 91 26 01 	lds	r24, 0x0126
 168:	90 91 27 01 	lds	r25, 0x0127
 16c:	c2 df       	rcall	.-124    	; 0xf2 <add_node>
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 62       	ori	r24, 0x20	; 32
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <__vector_20>:
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	0b b6       	in	r0, 0x3b	; 59
 186:	0f 92       	push	r0
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	cf 93       	push	r28
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	c0 91 c6 00 	lds	r28, 0x00C6
 1a6:	6c 2f       	mov	r22, r28
 1a8:	80 91 24 01 	lds	r24, 0x0124
 1ac:	90 91 25 01 	lds	r25, 0x0125
 1b0:	a0 df       	rcall	.-192    	; 0xf2 <add_node>
 1b2:	8c 2f       	mov	r24, r28
 1b4:	d6 df       	rcall	.-84     	; 0x162 <BT_send>
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	cf 91       	pop	r28
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0b be       	out	0x3b, r0	; 59
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_21>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	80 91 26 01 	lds	r24, 0x0126
 208:	90 91 27 01 	lds	r25, 0x0127
 20c:	89 2b       	or	r24, r25
 20e:	31 f4       	brne	.+12     	; 0x21c <__vector_21+0x3e>
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8f 7d       	andi	r24, 0xDF	; 223
 218:	80 83       	st	Z, r24
 21a:	05 c0       	rjmp	.+10     	; 0x226 <__vector_21+0x48>
 21c:	86 e2       	ldi	r24, 0x26	; 38
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	83 df       	rcall	.-250    	; 0x128 <pop_node>
 222:	80 93 c6 00 	sts	0x00C6, r24
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <flush_list>:
	
}


void flush_list(buffer_ ** lst_head)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	while(*lst_head != NULL)
 252:	88 81       	ld	r24, Y
 254:	99 81       	ldd	r25, Y+1	; 0x01
 256:	89 2b       	or	r24, r25
 258:	31 f0       	breq	.+12     	; 0x266 <flush_list+0x1a>
	{
		pop_node(lst_head);
 25a:	ce 01       	movw	r24, r28
 25c:	65 df       	rcall	.-310    	; 0x128 <pop_node>
}


void flush_list(buffer_ ** lst_head)
{
	while(*lst_head != NULL)
 25e:	88 81       	ld	r24, Y
 260:	99 81       	ldd	r25, Y+1	; 0x01
 262:	89 2b       	or	r24, r25
 264:	d1 f7       	brne	.-12     	; 0x25a <flush_list+0xe>
	{
		pop_node(lst_head);
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <SPI_send>:

void SPI_send(int tosend)
{
	add_node(head_SPIout, tosend); //Add node with tosend-value to desired list
 26c:	68 2f       	mov	r22, r24
 26e:	80 91 2a 01 	lds	r24, 0x012A
 272:	90 91 2b 01 	lds	r25, 0x012B
 276:	3d cf       	rjmp	.-390    	; 0xf2 <add_node>
 278:	08 95       	ret

0000027a <SPI_send_arr>:
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
	int i = 0;
	while(i < size)// +2 due to continu
 282:	16 16       	cp	r1, r22
 284:	17 06       	cpc	r1, r23
 286:	64 f4       	brge	.+24     	; 0x2a0 <SPI_send_arr+0x26>
 288:	ec 01       	movw	r28, r24
 28a:	8c 01       	movw	r16, r24
 28c:	06 0f       	add	r16, r22
 28e:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 290:	89 91       	ld	r24, Y+
 292:	99 27       	eor	r25, r25
 294:	87 fd       	sbrc	r24, 7
 296:	90 95       	com	r25
 298:	e9 df       	rcall	.-46     	; 0x26c <SPI_send>
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)// +2 due to continu
 29a:	c0 17       	cp	r28, r16
 29c:	d1 07       	cpc	r29, r17
 29e:	c1 f7       	brne	.-16     	; 0x290 <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <__vector_19>:

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	0b b6       	in	r0, 0x3b	; 59
 2b6:	0f 92       	push	r0
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	int data = (int)SPDR;
 2d0:	6e b5       	in	r22, 0x2e	; 46
	add_node(head_SPIin, data); // Add received data to in-queue
 2d2:	80 91 28 01 	lds	r24, 0x0128
 2d6:	90 91 29 01 	lds	r25, 0x0129
 2da:	0b df       	rcall	.-490    	; 0xf2 <add_node>
	if (head_SPIout == NULL)
 2dc:	80 91 2a 01 	lds	r24, 0x012A
 2e0:	90 91 2b 01 	lds	r25, 0x012B
 2e4:	89 2b       	or	r24, r25
 2e6:	19 f4       	brne	.+6      	; 0x2ee <__vector_19+0x44>
	{
		int8_t stop_bit = -128; //0b10000000, cant be shown on lcd as -128 due to limits in print func.
		SPDR = stop_bit;
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	8e bd       	out	0x2e, r24	; 46
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__vector_19+0x4c>
	}
	else
	{
		SPDR = (int8_t)pop_node(&head_SPIout);
 2ee:	8a e2       	ldi	r24, 0x2A	; 42
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	1a df       	rcall	.-460    	; 0x128 <pop_node>
 2f4:	8e bd       	out	0x2e, r24	; 46
	}
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0b be       	out	0x3b, r0	; 59
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <main>:


int main(void)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	6d 97       	sbiw	r28, 0x1d	; 29
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61

	head_SPIout = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to send and alloc memory.
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	44 d0       	rcall	.+136    	; 0x3be <malloc>
 336:	90 93 2b 01 	sts	0x012B, r25
 33a:	80 93 2a 01 	sts	0x012A, r24
	head_SPIout->next= NULL;
 33e:	fc 01       	movw	r30, r24
 340:	12 82       	std	Z+2, r1	; 0x02
 342:	11 82       	std	Z+1, r1	; 0x01
	head_SPIout->val = 0;
 344:	10 82       	st	Z, r1
	

	head_SPIin = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to receive and alloc memory.
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	39 d0       	rcall	.+114    	; 0x3be <malloc>
 34c:	90 93 29 01 	sts	0x0129, r25
 350:	80 93 28 01 	sts	0x0128, r24
	head_SPIin->next= NULL;
 354:	fc 01       	movw	r30, r24
 356:	12 82       	std	Z+2, r1	; 0x02
 358:	11 82       	std	Z+1, r1	; 0x01
	head_SPIin->val = 0;
 35a:	10 82       	st	Z, r1
	
	head_BTin = (buffer_ *)malloc(sizeof(buffer_));
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2e d0       	rcall	.+92     	; 0x3be <malloc>
 362:	90 93 25 01 	sts	0x0125, r25
 366:	80 93 24 01 	sts	0x0124, r24
	head_BTin->next= NULL;
 36a:	fc 01       	movw	r30, r24
 36c:	12 82       	std	Z+2, r1	; 0x02
 36e:	11 82       	std	Z+1, r1	; 0x01
	head_BTin->val = 0;
 370:	10 82       	st	Z, r1
	head_BTout = (buffer_ *)malloc(sizeof(buffer_));
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	23 d0       	rcall	.+70     	; 0x3be <malloc>
 378:	90 93 27 01 	sts	0x0127, r25
 37c:	80 93 26 01 	sts	0x0126, r24
	head_BTout->next= NULL;
 380:	fc 01       	movw	r30, r24
 382:	12 82       	std	Z+2, r1	; 0x02
 384:	11 82       	std	Z+1, r1	; 0x01
	head_BTout->val = 0;
 386:	10 82       	st	Z, r1
	
	
	sleep_enable();
 388:	83 b7       	in	r24, 0x33	; 51
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 38e:	9c de       	rcall	.-712    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	85 b9       	out	0x05, r24	; 5
	
	
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 394:	9e de       	rcall	.-708    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 396:	a1 de       	rcall	.-702    	; 0xda <BT_init>
	sei();
 398:	78 94       	sei
	//flush_list(&head_SPIout);
	//flush_list(&head_SPIin);
	int8_t array[] ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
 39a:	8d e1       	ldi	r24, 0x1D	; 29
 39c:	e6 e0       	ldi	r30, 0x06	; 6
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	de 01       	movw	r26, r28
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	8a 95       	dec	r24
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x88>
	SPI_send_arr(array, (sizeof(array)/sizeof(array[0]))); // sizeof(array)/sizeof(element in array) = lenght of array
 3ac:	6d e1       	ldi	r22, 0x1D	; 29
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	62 df       	rcall	.-316    	; 0x27a <SPI_send_arr>
	while(1)
	{
		flush_list(&head_SPIin);
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	48 df       	rcall	.-368    	; 0x24c <flush_list>
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <main+0x9a>

000003be <malloc>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	91 05       	cpc	r25, r1
 3c6:	10 f4       	brcc	.+4      	; 0x3cc <malloc+0xe>
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	e0 91 2e 01 	lds	r30, 0x012E
 3d0:	f0 91 2f 01 	lds	r31, 0x012F
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	a0 e0       	ldi	r26, 0x00	; 0
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	30 97       	sbiw	r30, 0x00	; 0
 3de:	39 f1       	breq	.+78     	; 0x42e <malloc+0x70>
 3e0:	40 81       	ld	r20, Z
 3e2:	51 81       	ldd	r21, Z+1	; 0x01
 3e4:	48 17       	cp	r20, r24
 3e6:	59 07       	cpc	r21, r25
 3e8:	b8 f0       	brcs	.+46     	; 0x418 <malloc+0x5a>
 3ea:	48 17       	cp	r20, r24
 3ec:	59 07       	cpc	r21, r25
 3ee:	71 f4       	brne	.+28     	; 0x40c <malloc+0x4e>
 3f0:	82 81       	ldd	r24, Z+2	; 0x02
 3f2:	93 81       	ldd	r25, Z+3	; 0x03
 3f4:	10 97       	sbiw	r26, 0x00	; 0
 3f6:	29 f0       	breq	.+10     	; 0x402 <malloc+0x44>
 3f8:	13 96       	adiw	r26, 0x03	; 3
 3fa:	9c 93       	st	X, r25
 3fc:	8e 93       	st	-X, r24
 3fe:	12 97       	sbiw	r26, 0x02	; 2
 400:	2c c0       	rjmp	.+88     	; 0x45a <malloc+0x9c>
 402:	90 93 2f 01 	sts	0x012F, r25
 406:	80 93 2e 01 	sts	0x012E, r24
 40a:	27 c0       	rjmp	.+78     	; 0x45a <malloc+0x9c>
 40c:	21 15       	cp	r18, r1
 40e:	31 05       	cpc	r19, r1
 410:	31 f0       	breq	.+12     	; 0x41e <malloc+0x60>
 412:	42 17       	cp	r20, r18
 414:	53 07       	cpc	r21, r19
 416:	18 f0       	brcs	.+6      	; 0x41e <malloc+0x60>
 418:	a9 01       	movw	r20, r18
 41a:	db 01       	movw	r26, r22
 41c:	01 c0       	rjmp	.+2      	; 0x420 <malloc+0x62>
 41e:	ef 01       	movw	r28, r30
 420:	9a 01       	movw	r18, r20
 422:	bd 01       	movw	r22, r26
 424:	df 01       	movw	r26, r30
 426:	02 80       	ldd	r0, Z+2	; 0x02
 428:	f3 81       	ldd	r31, Z+3	; 0x03
 42a:	e0 2d       	mov	r30, r0
 42c:	d7 cf       	rjmp	.-82     	; 0x3dc <malloc+0x1e>
 42e:	21 15       	cp	r18, r1
 430:	31 05       	cpc	r19, r1
 432:	f9 f0       	breq	.+62     	; 0x472 <malloc+0xb4>
 434:	28 1b       	sub	r18, r24
 436:	39 0b       	sbc	r19, r25
 438:	24 30       	cpi	r18, 0x04	; 4
 43a:	31 05       	cpc	r19, r1
 43c:	80 f4       	brcc	.+32     	; 0x45e <malloc+0xa0>
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	9b 81       	ldd	r25, Y+3	; 0x03
 442:	61 15       	cp	r22, r1
 444:	71 05       	cpc	r23, r1
 446:	21 f0       	breq	.+8      	; 0x450 <malloc+0x92>
 448:	fb 01       	movw	r30, r22
 44a:	93 83       	std	Z+3, r25	; 0x03
 44c:	82 83       	std	Z+2, r24	; 0x02
 44e:	04 c0       	rjmp	.+8      	; 0x458 <malloc+0x9a>
 450:	90 93 2f 01 	sts	0x012F, r25
 454:	80 93 2e 01 	sts	0x012E, r24
 458:	fe 01       	movw	r30, r28
 45a:	32 96       	adiw	r30, 0x02	; 2
 45c:	44 c0       	rjmp	.+136    	; 0x4e6 <malloc+0x128>
 45e:	fe 01       	movw	r30, r28
 460:	e2 0f       	add	r30, r18
 462:	f3 1f       	adc	r31, r19
 464:	81 93       	st	Z+, r24
 466:	91 93       	st	Z+, r25
 468:	22 50       	subi	r18, 0x02	; 2
 46a:	31 09       	sbc	r19, r1
 46c:	39 83       	std	Y+1, r19	; 0x01
 46e:	28 83       	st	Y, r18
 470:	3a c0       	rjmp	.+116    	; 0x4e6 <malloc+0x128>
 472:	20 91 2c 01 	lds	r18, 0x012C
 476:	30 91 2d 01 	lds	r19, 0x012D
 47a:	23 2b       	or	r18, r19
 47c:	41 f4       	brne	.+16     	; 0x48e <malloc+0xd0>
 47e:	20 91 02 01 	lds	r18, 0x0102
 482:	30 91 03 01 	lds	r19, 0x0103
 486:	30 93 2d 01 	sts	0x012D, r19
 48a:	20 93 2c 01 	sts	0x012C, r18
 48e:	20 91 00 01 	lds	r18, 0x0100
 492:	30 91 01 01 	lds	r19, 0x0101
 496:	21 15       	cp	r18, r1
 498:	31 05       	cpc	r19, r1
 49a:	41 f4       	brne	.+16     	; 0x4ac <malloc+0xee>
 49c:	2d b7       	in	r18, 0x3d	; 61
 49e:	3e b7       	in	r19, 0x3e	; 62
 4a0:	40 91 04 01 	lds	r20, 0x0104
 4a4:	50 91 05 01 	lds	r21, 0x0105
 4a8:	24 1b       	sub	r18, r20
 4aa:	35 0b       	sbc	r19, r21
 4ac:	e0 91 2c 01 	lds	r30, 0x012C
 4b0:	f0 91 2d 01 	lds	r31, 0x012D
 4b4:	e2 17       	cp	r30, r18
 4b6:	f3 07       	cpc	r31, r19
 4b8:	a0 f4       	brcc	.+40     	; 0x4e2 <malloc+0x124>
 4ba:	2e 1b       	sub	r18, r30
 4bc:	3f 0b       	sbc	r19, r31
 4be:	28 17       	cp	r18, r24
 4c0:	39 07       	cpc	r19, r25
 4c2:	78 f0       	brcs	.+30     	; 0x4e2 <malloc+0x124>
 4c4:	ac 01       	movw	r20, r24
 4c6:	4e 5f       	subi	r20, 0xFE	; 254
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ca:	24 17       	cp	r18, r20
 4cc:	35 07       	cpc	r19, r21
 4ce:	48 f0       	brcs	.+18     	; 0x4e2 <malloc+0x124>
 4d0:	4e 0f       	add	r20, r30
 4d2:	5f 1f       	adc	r21, r31
 4d4:	50 93 2d 01 	sts	0x012D, r21
 4d8:	40 93 2c 01 	sts	0x012C, r20
 4dc:	81 93       	st	Z+, r24
 4de:	91 93       	st	Z+, r25
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <malloc+0x128>
 4e2:	e0 e0       	ldi	r30, 0x00	; 0
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	cf 01       	movw	r24, r30
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <free>:
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <free+0xa>
 4f6:	87 c0       	rjmp	.+270    	; 0x606 <free+0x118>
 4f8:	fc 01       	movw	r30, r24
 4fa:	32 97       	sbiw	r30, 0x02	; 2
 4fc:	13 82       	std	Z+3, r1	; 0x03
 4fe:	12 82       	std	Z+2, r1	; 0x02
 500:	c0 91 2e 01 	lds	r28, 0x012E
 504:	d0 91 2f 01 	lds	r29, 0x012F
 508:	20 97       	sbiw	r28, 0x00	; 0
 50a:	81 f4       	brne	.+32     	; 0x52c <free+0x3e>
 50c:	20 81       	ld	r18, Z
 50e:	31 81       	ldd	r19, Z+1	; 0x01
 510:	28 0f       	add	r18, r24
 512:	39 1f       	adc	r19, r25
 514:	80 91 2c 01 	lds	r24, 0x012C
 518:	90 91 2d 01 	lds	r25, 0x012D
 51c:	82 17       	cp	r24, r18
 51e:	93 07       	cpc	r25, r19
 520:	79 f5       	brne	.+94     	; 0x580 <free+0x92>
 522:	f0 93 2d 01 	sts	0x012D, r31
 526:	e0 93 2c 01 	sts	0x012C, r30
 52a:	6d c0       	rjmp	.+218    	; 0x606 <free+0x118>
 52c:	de 01       	movw	r26, r28
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	ae 17       	cp	r26, r30
 534:	bf 07       	cpc	r27, r31
 536:	50 f4       	brcc	.+20     	; 0x54c <free+0x5e>
 538:	12 96       	adiw	r26, 0x02	; 2
 53a:	4d 91       	ld	r20, X+
 53c:	5c 91       	ld	r21, X
 53e:	13 97       	sbiw	r26, 0x03	; 3
 540:	9d 01       	movw	r18, r26
 542:	41 15       	cp	r20, r1
 544:	51 05       	cpc	r21, r1
 546:	09 f1       	breq	.+66     	; 0x58a <free+0x9c>
 548:	da 01       	movw	r26, r20
 54a:	f3 cf       	rjmp	.-26     	; 0x532 <free+0x44>
 54c:	b3 83       	std	Z+3, r27	; 0x03
 54e:	a2 83       	std	Z+2, r26	; 0x02
 550:	40 81       	ld	r20, Z
 552:	51 81       	ldd	r21, Z+1	; 0x01
 554:	84 0f       	add	r24, r20
 556:	95 1f       	adc	r25, r21
 558:	8a 17       	cp	r24, r26
 55a:	9b 07       	cpc	r25, r27
 55c:	71 f4       	brne	.+28     	; 0x57a <free+0x8c>
 55e:	8d 91       	ld	r24, X+
 560:	9c 91       	ld	r25, X
 562:	11 97       	sbiw	r26, 0x01	; 1
 564:	84 0f       	add	r24, r20
 566:	95 1f       	adc	r25, r21
 568:	02 96       	adiw	r24, 0x02	; 2
 56a:	91 83       	std	Z+1, r25	; 0x01
 56c:	80 83       	st	Z, r24
 56e:	12 96       	adiw	r26, 0x02	; 2
 570:	8d 91       	ld	r24, X+
 572:	9c 91       	ld	r25, X
 574:	13 97       	sbiw	r26, 0x03	; 3
 576:	93 83       	std	Z+3, r25	; 0x03
 578:	82 83       	std	Z+2, r24	; 0x02
 57a:	21 15       	cp	r18, r1
 57c:	31 05       	cpc	r19, r1
 57e:	29 f4       	brne	.+10     	; 0x58a <free+0x9c>
 580:	f0 93 2f 01 	sts	0x012F, r31
 584:	e0 93 2e 01 	sts	0x012E, r30
 588:	3e c0       	rjmp	.+124    	; 0x606 <free+0x118>
 58a:	d9 01       	movw	r26, r18
 58c:	13 96       	adiw	r26, 0x03	; 3
 58e:	fc 93       	st	X, r31
 590:	ee 93       	st	-X, r30
 592:	12 97       	sbiw	r26, 0x02	; 2
 594:	4d 91       	ld	r20, X+
 596:	5d 91       	ld	r21, X+
 598:	a4 0f       	add	r26, r20
 59a:	b5 1f       	adc	r27, r21
 59c:	ea 17       	cp	r30, r26
 59e:	fb 07       	cpc	r31, r27
 5a0:	79 f4       	brne	.+30     	; 0x5c0 <free+0xd2>
 5a2:	80 81       	ld	r24, Z
 5a4:	91 81       	ldd	r25, Z+1	; 0x01
 5a6:	84 0f       	add	r24, r20
 5a8:	95 1f       	adc	r25, r21
 5aa:	02 96       	adiw	r24, 0x02	; 2
 5ac:	d9 01       	movw	r26, r18
 5ae:	11 96       	adiw	r26, 0x01	; 1
 5b0:	9c 93       	st	X, r25
 5b2:	8e 93       	st	-X, r24
 5b4:	82 81       	ldd	r24, Z+2	; 0x02
 5b6:	93 81       	ldd	r25, Z+3	; 0x03
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	9c 93       	st	X, r25
 5bc:	8e 93       	st	-X, r24
 5be:	12 97       	sbiw	r26, 0x02	; 2
 5c0:	e0 e0       	ldi	r30, 0x00	; 0
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	9b 81       	ldd	r25, Y+3	; 0x03
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <free+0xe4>
 5cc:	fe 01       	movw	r30, r28
 5ce:	ec 01       	movw	r28, r24
 5d0:	f9 cf       	rjmp	.-14     	; 0x5c4 <free+0xd6>
 5d2:	ce 01       	movw	r24, r28
 5d4:	02 96       	adiw	r24, 0x02	; 2
 5d6:	28 81       	ld	r18, Y
 5d8:	39 81       	ldd	r19, Y+1	; 0x01
 5da:	82 0f       	add	r24, r18
 5dc:	93 1f       	adc	r25, r19
 5de:	20 91 2c 01 	lds	r18, 0x012C
 5e2:	30 91 2d 01 	lds	r19, 0x012D
 5e6:	28 17       	cp	r18, r24
 5e8:	39 07       	cpc	r19, r25
 5ea:	69 f4       	brne	.+26     	; 0x606 <free+0x118>
 5ec:	30 97       	sbiw	r30, 0x00	; 0
 5ee:	29 f4       	brne	.+10     	; 0x5fa <free+0x10c>
 5f0:	10 92 2f 01 	sts	0x012F, r1
 5f4:	10 92 2e 01 	sts	0x012E, r1
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <free+0x110>
 5fa:	13 82       	std	Z+3, r1	; 0x03
 5fc:	12 82       	std	Z+2, r1	; 0x02
 5fe:	d0 93 2d 01 	sts	0x012D, r29
 602:	c0 93 2c 01 	sts	0x012C, r28
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
