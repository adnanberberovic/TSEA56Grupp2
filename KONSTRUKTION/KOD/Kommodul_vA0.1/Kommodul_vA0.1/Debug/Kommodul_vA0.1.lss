
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  00800168  00800168  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000442  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ae  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000363  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__vector_19>
  4e:	00 00       	nop
  50:	ca c0       	rjmp	.+404    	; 0x1e6 <__vector_20>
  52:	00 00       	nop
  54:	f9 c0       	rjmp	.+498    	; 0x248 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 36       	cpi	r26, 0x68	; 104
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 e6       	ldi	r26, 0x68	; 104
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 39       	cpi	r26, 0x99	; 153
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	03 d1       	rcall	.+518    	; 0x2ca <main>
  c4:	1b c1       	rjmp	.+566    	; 0x2fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
}

// Configures device as spi slave.
void SPI_SlaveInit(void)
{
	SPSR = 0<<SPI2X;
  d2:	1d bc       	out	0x2d, r1	; 45
	SPCR = 1<<SPIE | 1<<SPE | 1<<DORD | 0<<MSTR | 0<<CPOL | 0<<CPHA | 1<<SPR1 | 1<<SPR0;
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <__vector_19>:
}


// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	0b b6       	in	r0, 0x3b	; 59
  e6:	0f 92       	push	r0
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31

		if (posBuff_SPI < (BuffSize - 1))
  f2:	80 91 6c 01 	lds	r24, 0x016C
  f6:	83 36       	cpi	r24, 0x63	; 99
  f8:	88 f4       	brcc	.+34     	; 0x11c <__vector_19+0x42>
		{
			inSPDR[posBuff_SPI] = SPDR; // Save received char in inSPDR-buffer
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2e b5       	in	r18, 0x2e	; 46
  fe:	fc 01       	movw	r30, r24
 100:	e3 59       	subi	r30, 0x93	; 147
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	20 83       	st	Z, r18
			SPDR = outSPDR[posBuff_SPI]; //Sett next bit to send from outSPDR-buffer
 106:	fc 01       	movw	r30, r24
 108:	ef 52       	subi	r30, 0x2F	; 47
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 81       	ld	r24, Z
 10e:	8e bd       	out	0x2e, r24	; 46
			posBuff_SPI++; // add 1 to bufferpos
 110:	80 91 6c 01 	lds	r24, 0x016C
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 6c 01 	sts	0x016C, r24
 11a:	0d c0       	rjmp	.+26     	; 0x136 <__vector_19+0x5c>
		}
		else if (posBuff_SPI == (BuffSize - 1))
 11c:	83 36       	cpi	r24, 0x63	; 99
 11e:	49 f4       	brne	.+18     	; 0x132 <__vector_19+0x58>
		{
			inSPDR[posBuff_SPI] = SPDR; //save received char in inSPDR-buffer
 120:	8e b5       	in	r24, 0x2e	; 46
 122:	80 93 d0 01 	sts	0x01D0, r24
			SPDR = outSPDR[posBuff_SPI]; //Send last sign from outSPDR-buffer
 126:	80 91 34 02 	lds	r24, 0x0234
 12a:	8e bd       	out	0x2e, r24	; 46
			posBuff_SPI = 0; //Set bufferpos to restart
 12c:	10 92 6c 01 	sts	0x016C, r1
 130:	02 c0       	rjmp	.+4      	; 0x136 <__vector_19+0x5c>
		}
		else 
		{
			SPDR = 'E';
 132:	85 e4       	ldi	r24, 0x45	; 69
 134:	8e bd       	out	0x2e, r24	; 46
		}
	
	
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0b be       	out	0x3b, r0	; 59
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <BT_init>:

// Set up and enable Bluetooth
void BT_init(void)
{
	UBRR0H = 0x00; //correct value to change baud rate
 14e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07;//^^ same ^^ with a 14.7 mhz, scale with 1111 (7)
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (0<<UCSZ02) | (1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0);
 158:	88 ed       	ldi	r24, 0xD8	; 216
 15a:	80 93 c1 00 	sts	0x00C1, r24
	/* RXCI, TXCI Complete transmission and complete interrupt is enabled
	 * UDRIE0 not set, disabled interrupts due to UDRE0 flag. Data register empty
	 * TXEN, TXEN, transmission and receiver enable 
	 * UCSZ02 sets the third bit, defining framesize
	*/
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 c2 00 	sts	0x00C2, r24
 164:	08 95       	ret

00000166 <send_BT_buffer>:
	 */
}

void send_BT_buffer(char buffer[BuffSize] )
{
	strncpy(outBT, buffer, BuffSize); //Copy buffer to send to outBT
 166:	44 e6       	ldi	r20, 0x64	; 100
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	bc 01       	movw	r22, r24
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	b6 d0       	rcall	.+364    	; 0x2de <strncpy>
	UCSR0B &= ~(1<<UDRIE0);	//Enable UDRE interrupt flag -> send when empty dataregister
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 7d       	andi	r24, 0xDF	; 223
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <Write_Buffer>:
}


void Write_Buffer(char *buffer, char data, uint8_t *position)
{
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	8c 01       	movw	r16, r24
 18a:	f6 2e       	mov	r15, r22
 18c:	ea 01       	movw	r28, r20
	if ((*position) == (BuffSize - 2)) // If end of buffer restart from first pos, done with read.
 18e:	88 81       	ld	r24, Y
 190:	82 36       	cpi	r24, 0x62	; 98
 192:	39 f4       	brne	.+14     	; 0x1a2 <Write_Buffer+0x24>
	{
		BT_received_flag = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 69 01 	sts	0x0169, r24
		(*position) = 0; 
 19a:	18 82       	st	Y, r1
		send_BT_buffer(inBT); //Echo back inBT *****************ONLY FOR TEST******************
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	e2 df       	rcall	.-60     	; 0x166 <send_BT_buffer>
	}
	buffer[(*position)] = data; //Add data to correct location
 1a2:	88 81       	ld	r24, Y
 1a4:	f8 01       	movw	r30, r16
 1a6:	e8 0f       	add	r30, r24
 1a8:	f1 1d       	adc	r31, r1
 1aa:	f0 82       	st	Z, r15
	UDR0 = buffer[(*position)];
 1ac:	88 81       	ld	r24, Y
 1ae:	f8 01       	movw	r30, r16
 1b0:	e8 0f       	add	r30, r24
 1b2:	f1 1d       	adc	r31, r1
 1b4:	80 81       	ld	r24, Z
 1b6:	80 93 c6 00 	sts	0x00C6, r24
	(*position)++;
 1ba:	88 81       	ld	r24, Y
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	88 83       	st	Y, r24
	
	
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	08 95       	ret

000001cc <Read_Buffer>:

char Read_Buffer(char buffer[BuffSize], uint8_t *pos_read)
{
 1cc:	fb 01       	movw	r30, r22
	char data;
	if ((*pos_read) == (BuffSize - 1)) // End of buffer, reset from start 
 1ce:	20 81       	ld	r18, Z
 1d0:	23 36       	cpi	r18, 0x63	; 99
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <Read_Buffer+0xa>
	{
		(*pos_read) = 0;
 1d4:	10 82       	st	Z, r1
	}
	data = buffer[(*pos_read)]; //return next value in queue
 1d6:	20 81       	ld	r18, Z
 1d8:	dc 01       	movw	r26, r24
 1da:	a2 0f       	add	r26, r18
 1dc:	b1 1d       	adc	r27, r1
 1de:	8c 91       	ld	r24, X
	(*pos_read)++;
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	20 83       	st	Z, r18
	return data;
}
 1e4:	08 95       	ret

000001e6 <__vector_20>:


// Receive complete - triggered by interrupt
ISR(USART0_RX_vect) 
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	BT_received_flag = 0;
 20c:	10 92 69 01 	sts	0x0169, r1
	char data = UDR0; //Get received value
 210:	60 91 c6 00 	lds	r22, 0x00C6
	Write_Buffer(inBT, data, writePos_BTin); //Writes data to buffer in order they are received
 214:	40 91 66 01 	lds	r20, 0x0166
 218:	50 91 67 01 	lds	r21, 0x0167
 21c:	85 e3       	ldi	r24, 0x35	; 53
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	ae df       	rcall	.-164    	; 0x17e <Write_Buffer>
	
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0b be       	out	0x3b, r0	; 59
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_21>:


// Empty dataregister = send next character
ISR(USART0_UDRE_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	0b b6       	in	r0, 0x3b	; 59
 254:	0f 92       	push	r0
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	UDR0 = 'c';
 26e:	83 e6       	ldi	r24, 0x63	; 99
 270:	80 93 c6 00 	sts	0x00C6, r24
	if ((*readPos_BTout) == BuffSize) //Read entire buff and sent it
 274:	60 91 64 01 	lds	r22, 0x0164
 278:	70 91 65 01 	lds	r23, 0x0165
 27c:	fb 01       	movw	r30, r22
 27e:	80 81       	ld	r24, Z
 280:	84 36       	cpi	r24, 0x64	; 100
 282:	49 f4       	brne	.+18     	; 0x296 <__vector_21+0x4e>
	{
		BT_sent_flag = 1; // done with transmission
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 68 01 	sts	0x0168, r24
		UCSR0B &= ~(1<<UDRIE0); //Disable UDRE interrupt, All data is sent. 
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8f 7d       	andi	r24, 0xDF	; 223
 292:	80 83       	st	Z, r24
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__vector_21+0x5c>
	}
	else
	{
		BT_sent_flag = 0;
 296:	10 92 68 01 	sts	0x0168, r1
		UDR0 = Read_Buffer(outBT, readPos_BTout); //Send back the next value in out-buffer. 														
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	96 df       	rcall	.-212    	; 0x1cc <Read_Buffer>
 2a0:	80 93 c6 00 	sts	0x00C6, r24
	}
		
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0b be       	out	0x3b, r0	; 59
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:

int main(void)
{
	sleep_enable();
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 2d0:	fb de       	rcall	.-522    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 2d2:	80 e1       	ldi	r24, 0x10	; 16
 2d4:	85 b9       	out	0x05, r24	; 5
int main(void)
{
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 2d6:	fd de       	rcall	.-518    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 2d8:	3a df       	rcall	.-396    	; 0x14e <BT_init>
	sei();
 2da:	78 94       	sei
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <main+0x12>

000002de <strncpy>:
 2de:	fb 01       	movw	r30, r22
 2e0:	dc 01       	movw	r26, r24
 2e2:	41 50       	subi	r20, 0x01	; 1
 2e4:	50 40       	sbci	r21, 0x00	; 0
 2e6:	48 f0       	brcs	.+18     	; 0x2fa <strncpy+0x1c>
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	00 20       	and	r0, r0
 2ee:	c9 f7       	brne	.-14     	; 0x2e2 <strncpy+0x4>
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <strncpy+0x16>
 2f2:	1d 92       	st	X+, r1
 2f4:	41 50       	subi	r20, 0x01	; 1
 2f6:	50 40       	sbci	r21, 0x00	; 0
 2f8:	e0 f7       	brcc	.-8      	; 0x2f2 <strncpy+0x14>
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
