
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800116  00800116  0000087c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a93  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bf  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b8  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088f  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fa c1       	rjmp	.+1012   	; 0x442 <__vector_19>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__vector_20>
  52:	00 00       	nop
  54:	5f c1       	rjmp	.+702    	; 0x314 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	52 d2       	rcall	.+1188   	; 0x568 <main>
  c4:	84 c3       	rjmp	.+1800   	; 0x7ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
{
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) && !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 e9       	ldi	r24, 0x98	; 152
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	89 2b       	or	r24, r25
 102:	49 f4       	brne	.+18     	; 0x116 <add_node+0x24>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	3b d2       	rcall	.+1142   	; 0x580 <malloc>
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
 10e:	fc 01       	movw	r30, r24
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	10 83       	st	Z, r17
 116:	09 90       	ld	r0, Y+
 118:	d8 81       	ld	r29, Y
 11a:	c0 2d       	mov	r28, r0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	11 f0       	breq	.+4      	; 0x128 <add_node+0x36>
 124:	ec 01       	movw	r28, r24
 126:	fa cf       	rjmp	.-12     	; 0x11c <add_node+0x2a>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	29 d2       	rcall	.+1106   	; 0x580 <malloc>
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	18 83       	st	Y, r17
 134:	fc 01       	movw	r30, r24
 136:	12 82       	std	Z+2, r1	; 0x02
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <pop_node>:
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	e8 81       	ld	r30, Y
 150:	f9 81       	ldd	r31, Y+1	; 0x01
 152:	30 97       	sbiw	r30, 0x00	; 0
 154:	49 f0       	breq	.+18     	; 0x168 <pop_node+0x26>
 156:	01 81       	ldd	r16, Z+1	; 0x01
 158:	12 81       	ldd	r17, Z+2	; 0x02
 15a:	f0 80       	ld	r15, Z
 15c:	cf 01       	movw	r24, r30
 15e:	a8 d2       	rcall	.+1360   	; 0x6b0 <free>
 160:	19 83       	std	Y+1, r17	; 0x01
 162:	08 83       	st	Y, r16
 164:	8f 2d       	mov	r24, r15
 166:	01 c0       	rjmp	.+2      	; 0x16a <pop_node+0x28>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	08 95       	ret

00000176 <flush_list>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	fc 01       	movw	r30, r24
 17c:	c0 81       	ld	r28, Z
 17e:	d1 81       	ldd	r29, Z+1	; 0x01
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	59 f0       	breq	.+22     	; 0x19a <flush_list+0x24>
 184:	11 82       	std	Z+1, r1	; 0x01
 186:	10 82       	st	Z, r1
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	19 f0       	breq	.+6      	; 0x196 <flush_list+0x20>
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	f0 df       	rcall	.-32     	; 0x176 <flush_list>
 196:	ce 01       	movw	r24, r28
 198:	8b d2       	rcall	.+1302   	; 0x6b0 <free>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <send_BT_buffer>:
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	7c 01       	movw	r14, r24
 1ae:	8b 01       	movw	r16, r22
 1b0:	86 e1       	ldi	r24, 0x16	; 22
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	e0 df       	rcall	.-64     	; 0x176 <flush_list>
 1b6:	10 16       	cp	r1, r16
 1b8:	11 06       	cpc	r1, r17
 1ba:	54 f4       	brge	.+20     	; 0x1d0 <send_BT_buffer+0x30>
 1bc:	e7 01       	movw	r28, r14
 1be:	0e 0d       	add	r16, r14
 1c0:	1f 1d       	adc	r17, r15
 1c2:	69 91       	ld	r22, Y+
 1c4:	86 e1       	ldi	r24, 0x16	; 22
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	94 df       	rcall	.-216    	; 0xf2 <add_node>
 1ca:	c0 17       	cp	r28, r16
 1cc:	d1 07       	cpc	r29, r17
 1ce:	c9 f7       	brne	.-14     	; 0x1c2 <send_BT_buffer+0x22>
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	80 83       	st	Z, r24
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <BT_StartBitCheck>:
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <BT_StartBitCheck+0xa>
 1ec:	87 35       	cpi	r24, 0x57	; 87
 1ee:	b9 f4       	brne	.+46     	; 0x21e <BT_StartBitCheck+0x36>
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <BT_StartBitCheck+0x22>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 1c 01 	sts	0x011C, r24
 1f8:	10 92 1d 01 	sts	0x011D, r1
 1fc:	10 92 1b 01 	sts	0x011B, r1
 200:	10 92 1a 01 	sts	0x011A, r1
 204:	10 92 1e 01 	sts	0x011E, r1
 208:	08 95       	ret
 20a:	10 92 1b 01 	sts	0x011B, r1
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 1d 01 	sts	0x011D, r24
 214:	10 92 1c 01 	sts	0x011C, r1
 218:	10 92 1e 01 	sts	0x011E, r1
 21c:	08 95       	ret
 21e:	10 92 1e 01 	sts	0x011E, r1
 222:	10 92 1a 01 	sts	0x011A, r1
 226:	10 92 1b 01 	sts	0x011B, r1
 22a:	10 92 1d 01 	sts	0x011D, r1
 22e:	10 92 1c 01 	sts	0x011C, r1
 232:	08 95       	ret

00000234 <__vector_20>:
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	0b b6       	in	r0, 0x3b	; 59
 240:	0f 92       	push	r0
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	80 91 c6 00 	lds	r24, 0x00C6
 25e:	90 91 1c 01 	lds	r25, 0x011C
 262:	91 11       	cpse	r25, r1
 264:	0e c0       	rjmp	.+28     	; 0x282 <__vector_20+0x4e>
 266:	90 91 1d 01 	lds	r25, 0x011D
 26a:	91 11       	cpse	r25, r1
 26c:	1f c0       	rjmp	.+62     	; 0x2ac <__vector_20+0x78>
 26e:	90 91 1b 01 	lds	r25, 0x011B
 272:	91 11       	cpse	r25, r1
 274:	26 c0       	rjmp	.+76     	; 0x2c2 <__vector_20+0x8e>
 276:	90 91 1e 01 	lds	r25, 0x011E
 27a:	91 11       	cpse	r25, r1
 27c:	22 c0       	rjmp	.+68     	; 0x2c2 <__vector_20+0x8e>
 27e:	b4 df       	rcall	.-152    	; 0x1e8 <BT_StartBitCheck>
 280:	15 c0       	rjmp	.+42     	; 0x2ac <__vector_20+0x78>
 282:	91 30       	cpi	r25, 0x01	; 1
 284:	99 f4       	brne	.+38     	; 0x2ac <__vector_20+0x78>
 286:	87 35       	cpi	r24, 0x57	; 87
 288:	89 f0       	breq	.+34     	; 0x2ac <__vector_20+0x78>
 28a:	90 91 1a 01 	lds	r25, 0x011A
 28e:	e9 2f       	mov	r30, r25
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	e0 5f       	subi	r30, 0xF0	; 240
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	80 83       	st	Z, r24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 0f       	add	r24, r25
 29c:	80 93 1a 01 	sts	0x011A, r24
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	21 f4       	brne	.+8      	; 0x2ac <__vector_20+0x78>
 2a4:	10 92 1c 01 	sts	0x011C, r1
 2a8:	10 92 1a 01 	sts	0x011A, r1
 2ac:	80 91 1d 01 	lds	r24, 0x011D
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	39 f4       	brne	.+14     	; 0x2c2 <__vector_20+0x8e>
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	71 df       	rcall	.-286    	; 0x1a0 <send_BT_buffer>
 2be:	10 92 1d 01 	sts	0x011D, r1
 2c2:	80 91 1b 01 	lds	r24, 0x011B
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <__vector_20+0xa4>
 2ca:	63 e0       	ldi	r22, 0x03	; 3
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	66 df       	rcall	.-308    	; 0x1a0 <send_BT_buffer>
 2d4:	10 92 1b 01 	sts	0x011B, r1
 2d8:	80 91 1e 01 	lds	r24, 0x011E
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	39 f4       	brne	.+14     	; 0x2ee <__vector_20+0xba>
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	85 e2       	ldi	r24, 0x25	; 37
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	5b df       	rcall	.-330    	; 0x1a0 <send_BT_buffer>
 2ea:	10 92 1e 01 	sts	0x011E, r1
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_21>:
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
 33a:	80 91 16 01 	lds	r24, 0x0116
 33e:	90 91 17 01 	lds	r25, 0x0117
 342:	89 2b       	or	r24, r25
 344:	31 f4       	brne	.+12     	; 0x352 <__vector_21+0x3e>
 346:	e1 ec       	ldi	r30, 0xC1	; 193
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8f 7d       	andi	r24, 0xDF	; 223
 34e:	80 83       	st	Z, r24
 350:	05 c0       	rjmp	.+10     	; 0x35c <__vector_21+0x48>
 352:	86 e1       	ldi	r24, 0x16	; 22
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	f5 de       	rcall	.-534    	; 0x142 <pop_node>
 358:	80 93 c6 00 	sts	0x00C6, r24
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0b be       	out	0x3b, r0	; 59
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <SPI_send>:
	
}
void SPI_send(uint8_t tosend)
{
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
 382:	68 2f       	mov	r22, r24
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	b4 ce       	rjmp	.-664    	; 0xf2 <add_node>
 38a:	08 95       	ret

0000038c <SPI_send_arr>:
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
	int i = 0;
	while(i < size)
 394:	16 16       	cp	r1, r22
 396:	17 06       	cpc	r1, r23
 398:	4c f4       	brge	.+18     	; 0x3ac <SPI_send_arr+0x20>
 39a:	ec 01       	movw	r28, r24
 39c:	8c 01       	movw	r16, r24
 39e:	06 0f       	add	r16, r22
 3a0:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 3a2:	89 91       	ld	r24, Y+
 3a4:	ee df       	rcall	.-36     	; 0x382 <SPI_send>
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)
 3a6:	c0 17       	cp	r28, r16
 3a8:	d1 07       	cpc	r29, r17
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	08 95       	ret

000003b6 <SPI_StartBitCheck>:
void SPI_StartBitCheck(uint8_t in_)
{
	switch (in_){
 3b6:	85 34       	cpi	r24, 0x45	; 69
 3b8:	69 f1       	breq	.+90     	; 0x414 <SPI_StartBitCheck+0x5e>
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <SPI_StartBitCheck+0xc>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	31 f0       	breq	.+12     	; 0x3cc <SPI_StartBitCheck+0x16>
 3c0:	35 c0       	rjmp	.+106    	; 0x42c <SPI_StartBitCheck+0x76>
 3c2:	8e 3f       	cpi	r24, 0xFE	; 254
 3c4:	d9 f0       	breq	.+54     	; 0x3fc <SPI_StartBitCheck+0x46>
 3c6:	8f 3f       	cpi	r24, 0xFF	; 255
 3c8:	69 f0       	breq	.+26     	; 0x3e4 <SPI_StartBitCheck+0x2e>
 3ca:	30 c0       	rjmp	.+96     	; 0x42c <SPI_StartBitCheck+0x76>
		
		case 1: 
		speedFlag_ = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 21 01 	sts	0x0121, r24
		speedoutFlag_ = 0;
 3d2:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 3d6:	10 92 22 01 	sts	0x0122, r1
		mapFlag_ = 0;
 3da:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 3de:	10 92 1f 01 	sts	0x011F, r1
		break;
 3e2:	08 95       	ret
		
		case 255: 
		sensorFlag_ = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 22 01 	sts	0x0122, r24
		speedoutFlag_ = 0;
 3ea:	10 92 20 01 	sts	0x0120, r1
		speedFlag_ = 0;
 3ee:	10 92 21 01 	sts	0x0121, r1
		mapFlag_ = 0;		
 3f2:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 3f6:	10 92 1f 01 	sts	0x011F, r1
		break; 
 3fa:	08 95       	ret
		
		case 254:
		speedoutFlag_ = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 20 01 	sts	0x0120, r24
		sensorFlag_ = 0;
 402:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 406:	10 92 21 01 	sts	0x0121, r1
		mapFlag_ = 0;		
 40a:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 40e:	10 92 1f 01 	sts	0x011F, r1
		break;
 412:	08 95       	ret
		
		case 69:
		mapFlag_ = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 23 01 	sts	0x0123, r24
		speedoutFlag_ = 0;
 41a:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 41e:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 422:	10 92 21 01 	sts	0x0121, r1
		counter_ = 0;
 426:	10 92 1f 01 	sts	0x011F, r1
		break;
 42a:	08 95       	ret
		
		default: 
		mapFlag_ = 0;
 42c:	10 92 23 01 	sts	0x0123, r1
		speedoutFlag_ = 0;
 430:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 434:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 438:	10 92 21 01 	sts	0x0121, r1
		counter_ = 0;
 43c:	10 92 1f 01 	sts	0x011F, r1
 440:	08 95       	ret

00000442 <__vector_19>:
	}
}
// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	0f 92       	push	r0
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	uint8_t data = SPDR;
 468:	8e b5       	in	r24, 0x2e	; 46
	
	if ( (speedFlag_ == 0) && (sensorFlag_ == 0) && (speedoutFlag_ == 0) && (mapFlag_ == 0)){
 46a:	90 91 21 01 	lds	r25, 0x0121
 46e:	91 11       	cpse	r25, r1
 470:	0e c0       	rjmp	.+28     	; 0x48e <__vector_19+0x4c>
 472:	90 91 22 01 	lds	r25, 0x0122
 476:	91 11       	cpse	r25, r1
 478:	0a c0       	rjmp	.+20     	; 0x48e <__vector_19+0x4c>
 47a:	90 91 20 01 	lds	r25, 0x0120
 47e:	91 11       	cpse	r25, r1
 480:	1c c0       	rjmp	.+56     	; 0x4ba <__vector_19+0x78>
 482:	90 91 23 01 	lds	r25, 0x0123
 486:	91 11       	cpse	r25, r1
 488:	2e c0       	rjmp	.+92     	; 0x4e6 <__vector_19+0xa4>
		SPI_StartBitCheck(data);
 48a:	95 df       	rcall	.-214    	; 0x3b6 <SPI_StartBitCheck>
 48c:	3d c0       	rjmp	.+122    	; 0x508 <__vector_19+0xc6>
	}
	
	else if (sensorFlag_ == 1){
 48e:	90 91 22 01 	lds	r25, 0x0122
 492:	91 30       	cpi	r25, 0x01	; 1
 494:	91 f4       	brne	.+36     	; 0x4ba <__vector_19+0x78>
	arrSensor[counter_] = data; //Load into correct pos of array 0-6
 496:	90 91 1f 01 	lds	r25, 0x011F
 49a:	e9 2f       	mov	r30, r25
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ea 5f       	subi	r30, 0xFA	; 250
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	80 83       	st	Z, r24
	counter_++;
 4a4:	9f 5f       	subi	r25, 0xFF	; 255
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
 4a6:	97 30       	cpi	r25, 0x07	; 7
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <__vector_19+0x6e>
		SPI_StartBitCheck(data);
	}
	
	else if (sensorFlag_ == 1){
	arrSensor[counter_] = data; //Load into correct pos of array 0-6
	counter_++;
 4aa:	90 93 1f 01 	sts	0x011F, r25
 4ae:	2c c0       	rjmp	.+88     	; 0x508 <__vector_19+0xc6>
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
				counter_ = 0;
 4b0:	10 92 1f 01 	sts	0x011F, r1
				sensorFlag_ = 0;
 4b4:	10 92 22 01 	sts	0x0122, r1
 4b8:	27 c0       	rjmp	.+78     	; 0x508 <__vector_19+0xc6>
		}
	}
	else if (speedoutFlag_ == 1){
 4ba:	90 91 20 01 	lds	r25, 0x0120
 4be:	91 30       	cpi	r25, 0x01	; 1
 4c0:	91 f4       	brne	.+36     	; 0x4e6 <__vector_19+0xa4>
		arrSpeedout[counter_] = data; //Load into correct pos of array 0-3
 4c2:	90 91 1f 01 	lds	r25, 0x011F
 4c6:	e9 2f       	mov	r30, r25
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	e3 5f       	subi	r30, 0xF3	; 243
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 83       	st	Z, r24
		counter_++;
 4d0:	9f 5f       	subi	r25, 0xFF	; 255
		if (counter_ == (sizeof(arrSpeedout)/sizeof(arrSpeedout[0])) ){  //all values in.
 4d2:	93 30       	cpi	r25, 0x03	; 3
 4d4:	19 f0       	breq	.+6      	; 0x4dc <__vector_19+0x9a>
				sensorFlag_ = 0;
		}
	}
	else if (speedoutFlag_ == 1){
		arrSpeedout[counter_] = data; //Load into correct pos of array 0-3
		counter_++;
 4d6:	90 93 1f 01 	sts	0x011F, r25
 4da:	16 c0       	rjmp	.+44     	; 0x508 <__vector_19+0xc6>
		if (counter_ == (sizeof(arrSpeedout)/sizeof(arrSpeedout[0])) ){  //all values in.
			counter_ = 0;
 4dc:	10 92 1f 01 	sts	0x011F, r1
			speedoutFlag_ = 0;
 4e0:	10 92 20 01 	sts	0x0120, r1
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__vector_19+0xc6>
		}
	}
	else if (mapFlag_ == 1){
 4e6:	90 91 23 01 	lds	r25, 0x0123
 4ea:	91 30       	cpi	r25, 0x01	; 1
 4ec:	69 f4       	brne	.+26     	; 0x508 <__vector_19+0xc6>
		arrMap[counter_] = data; // Load into corr pos of array 0-2
 4ee:	90 91 1f 01 	lds	r25, 0x011F
 4f2:	e9 2f       	mov	r30, r25
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	eb 5d       	subi	r30, 0xDB	; 219
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	80 83       	st	Z, r24
		if (counter_ == (sizeof(arrMap)/sizeof(arrMap[0]))){
 4fc:	93 30       	cpi	r25, 0x03	; 3
 4fe:	21 f4       	brne	.+8      	; 0x508 <__vector_19+0xc6>
			counter_ = 0;
 500:	10 92 1f 01 	sts	0x011F, r1
			mapFlag_ = 0;
 504:	10 92 23 01 	sts	0x0123, r1
		}
	}
	// Speed is to be sent.
	if (speedFlag_ == 1){
 508:	80 91 21 01 	lds	r24, 0x0121
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	61 f4       	brne	.+24     	; 0x528 <__vector_19+0xe6>
		SPI_send_arr(arrSpeed,(sizeof(arrSpeed)/sizeof(arrSpeed[0])));
 510:	65 e0       	ldi	r22, 0x05	; 5
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	39 df       	rcall	.-398    	; 0x38c <SPI_send_arr>
		SPDR =  pop_node(&head_SPIout);
 51a:	88 e1       	ldi	r24, 0x18	; 24
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	11 de       	rcall	.-990    	; 0x142 <pop_node>
 520:	8e bd       	out	0x2e, r24	; 46
		speedFlag_ = 0;
 522:	10 92 21 01 	sts	0x0121, r1
		return;
 526:	0d c0       	rjmp	.+26     	; 0x542 <__vector_19+0x100>
	}
	

	if (head_SPIout == NULL){ //Sendback function will always be performed when something is to be sent.
 528:	80 91 18 01 	lds	r24, 0x0118
 52c:	90 91 19 01 	lds	r25, 0x0119
 530:	89 2b       	or	r24, r25
 532:	19 f4       	brne	.+6      	; 0x53a <__vector_19+0xf8>
		uint8_t stop_bit = 255;
		SPDR = stop_bit;
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	8e bd       	out	0x2e, r24	; 46
 538:	04 c0       	rjmp	.+8      	; 0x542 <__vector_19+0x100>
	}
	else{
		SPDR = pop_node(&head_SPIout);
 53a:	88 e1       	ldi	r24, 0x18	; 24
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	01 de       	rcall	.-1022   	; 0x142 <pop_node>
 540:	8e bd       	out	0x2e, r24	; 46
	}
	
}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	0f 90       	pop	r0
 55c:	0b be       	out	0x3b, r0	; 59
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <main>:



int main(void)
{	
	Flag_ = 0;
 568:	10 92 24 01 	sts	0x0124, r1
	sleep_enable();
 56c:	83 b7       	in	r24, 0x33	; 51
 56e:	81 60       	ori	r24, 0x01	; 1
 570:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 572:	aa dd       	rcall	.-1196   	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 574:	80 e1       	ldi	r24, 0x10	; 16
 576:	85 b9       	out	0x05, r24	; 5
{	
	Flag_ = 0;
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 578:	ac dd       	rcall	.-1192   	; 0xd2 <SPI_SlaveInit>
	BT_init();
 57a:	af dd       	rcall	.-1186   	; 0xda <BT_init>
	sei();
 57c:	78 94       	sei
 57e:	ff cf       	rjmp	.-2      	; 0x57e <main+0x16>

00000580 <malloc>:
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	91 05       	cpc	r25, r1
 588:	10 f4       	brcc	.+4      	; 0x58e <malloc+0xe>
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	e0 91 2a 01 	lds	r30, 0x012A
 592:	f0 91 2b 01 	lds	r31, 0x012B
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	a0 e0       	ldi	r26, 0x00	; 0
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	30 97       	sbiw	r30, 0x00	; 0
 5a0:	39 f1       	breq	.+78     	; 0x5f0 <malloc+0x70>
 5a2:	40 81       	ld	r20, Z
 5a4:	51 81       	ldd	r21, Z+1	; 0x01
 5a6:	48 17       	cp	r20, r24
 5a8:	59 07       	cpc	r21, r25
 5aa:	b8 f0       	brcs	.+46     	; 0x5da <malloc+0x5a>
 5ac:	48 17       	cp	r20, r24
 5ae:	59 07       	cpc	r21, r25
 5b0:	71 f4       	brne	.+28     	; 0x5ce <malloc+0x4e>
 5b2:	82 81       	ldd	r24, Z+2	; 0x02
 5b4:	93 81       	ldd	r25, Z+3	; 0x03
 5b6:	10 97       	sbiw	r26, 0x00	; 0
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <malloc+0x44>
 5ba:	13 96       	adiw	r26, 0x03	; 3
 5bc:	9c 93       	st	X, r25
 5be:	8e 93       	st	-X, r24
 5c0:	12 97       	sbiw	r26, 0x02	; 2
 5c2:	2c c0       	rjmp	.+88     	; 0x61c <malloc+0x9c>
 5c4:	90 93 2b 01 	sts	0x012B, r25
 5c8:	80 93 2a 01 	sts	0x012A, r24
 5cc:	27 c0       	rjmp	.+78     	; 0x61c <malloc+0x9c>
 5ce:	21 15       	cp	r18, r1
 5d0:	31 05       	cpc	r19, r1
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <malloc+0x60>
 5d4:	42 17       	cp	r20, r18
 5d6:	53 07       	cpc	r21, r19
 5d8:	18 f0       	brcs	.+6      	; 0x5e0 <malloc+0x60>
 5da:	a9 01       	movw	r20, r18
 5dc:	db 01       	movw	r26, r22
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <malloc+0x62>
 5e0:	ef 01       	movw	r28, r30
 5e2:	9a 01       	movw	r18, r20
 5e4:	bd 01       	movw	r22, r26
 5e6:	df 01       	movw	r26, r30
 5e8:	02 80       	ldd	r0, Z+2	; 0x02
 5ea:	f3 81       	ldd	r31, Z+3	; 0x03
 5ec:	e0 2d       	mov	r30, r0
 5ee:	d7 cf       	rjmp	.-82     	; 0x59e <malloc+0x1e>
 5f0:	21 15       	cp	r18, r1
 5f2:	31 05       	cpc	r19, r1
 5f4:	f9 f0       	breq	.+62     	; 0x634 <malloc+0xb4>
 5f6:	28 1b       	sub	r18, r24
 5f8:	39 0b       	sbc	r19, r25
 5fa:	24 30       	cpi	r18, 0x04	; 4
 5fc:	31 05       	cpc	r19, r1
 5fe:	80 f4       	brcc	.+32     	; 0x620 <malloc+0xa0>
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	9b 81       	ldd	r25, Y+3	; 0x03
 604:	61 15       	cp	r22, r1
 606:	71 05       	cpc	r23, r1
 608:	21 f0       	breq	.+8      	; 0x612 <malloc+0x92>
 60a:	fb 01       	movw	r30, r22
 60c:	93 83       	std	Z+3, r25	; 0x03
 60e:	82 83       	std	Z+2, r24	; 0x02
 610:	04 c0       	rjmp	.+8      	; 0x61a <malloc+0x9a>
 612:	90 93 2b 01 	sts	0x012B, r25
 616:	80 93 2a 01 	sts	0x012A, r24
 61a:	fe 01       	movw	r30, r28
 61c:	32 96       	adiw	r30, 0x02	; 2
 61e:	44 c0       	rjmp	.+136    	; 0x6a8 <malloc+0x128>
 620:	fe 01       	movw	r30, r28
 622:	e2 0f       	add	r30, r18
 624:	f3 1f       	adc	r31, r19
 626:	81 93       	st	Z+, r24
 628:	91 93       	st	Z+, r25
 62a:	22 50       	subi	r18, 0x02	; 2
 62c:	31 09       	sbc	r19, r1
 62e:	39 83       	std	Y+1, r19	; 0x01
 630:	28 83       	st	Y, r18
 632:	3a c0       	rjmp	.+116    	; 0x6a8 <malloc+0x128>
 634:	20 91 28 01 	lds	r18, 0x0128
 638:	30 91 29 01 	lds	r19, 0x0129
 63c:	23 2b       	or	r18, r19
 63e:	41 f4       	brne	.+16     	; 0x650 <malloc+0xd0>
 640:	20 91 02 01 	lds	r18, 0x0102
 644:	30 91 03 01 	lds	r19, 0x0103
 648:	30 93 29 01 	sts	0x0129, r19
 64c:	20 93 28 01 	sts	0x0128, r18
 650:	20 91 00 01 	lds	r18, 0x0100
 654:	30 91 01 01 	lds	r19, 0x0101
 658:	21 15       	cp	r18, r1
 65a:	31 05       	cpc	r19, r1
 65c:	41 f4       	brne	.+16     	; 0x66e <malloc+0xee>
 65e:	2d b7       	in	r18, 0x3d	; 61
 660:	3e b7       	in	r19, 0x3e	; 62
 662:	40 91 04 01 	lds	r20, 0x0104
 666:	50 91 05 01 	lds	r21, 0x0105
 66a:	24 1b       	sub	r18, r20
 66c:	35 0b       	sbc	r19, r21
 66e:	e0 91 28 01 	lds	r30, 0x0128
 672:	f0 91 29 01 	lds	r31, 0x0129
 676:	e2 17       	cp	r30, r18
 678:	f3 07       	cpc	r31, r19
 67a:	a0 f4       	brcc	.+40     	; 0x6a4 <malloc+0x124>
 67c:	2e 1b       	sub	r18, r30
 67e:	3f 0b       	sbc	r19, r31
 680:	28 17       	cp	r18, r24
 682:	39 07       	cpc	r19, r25
 684:	78 f0       	brcs	.+30     	; 0x6a4 <malloc+0x124>
 686:	ac 01       	movw	r20, r24
 688:	4e 5f       	subi	r20, 0xFE	; 254
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	24 17       	cp	r18, r20
 68e:	35 07       	cpc	r19, r21
 690:	48 f0       	brcs	.+18     	; 0x6a4 <malloc+0x124>
 692:	4e 0f       	add	r20, r30
 694:	5f 1f       	adc	r21, r31
 696:	50 93 29 01 	sts	0x0129, r21
 69a:	40 93 28 01 	sts	0x0128, r20
 69e:	81 93       	st	Z+, r24
 6a0:	91 93       	st	Z+, r25
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <malloc+0x128>
 6a4:	e0 e0       	ldi	r30, 0x00	; 0
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	cf 01       	movw	r24, r30
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <free>:
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	09 f4       	brne	.+2      	; 0x6ba <free+0xa>
 6b8:	87 c0       	rjmp	.+270    	; 0x7c8 <free+0x118>
 6ba:	fc 01       	movw	r30, r24
 6bc:	32 97       	sbiw	r30, 0x02	; 2
 6be:	13 82       	std	Z+3, r1	; 0x03
 6c0:	12 82       	std	Z+2, r1	; 0x02
 6c2:	c0 91 2a 01 	lds	r28, 0x012A
 6c6:	d0 91 2b 01 	lds	r29, 0x012B
 6ca:	20 97       	sbiw	r28, 0x00	; 0
 6cc:	81 f4       	brne	.+32     	; 0x6ee <free+0x3e>
 6ce:	20 81       	ld	r18, Z
 6d0:	31 81       	ldd	r19, Z+1	; 0x01
 6d2:	28 0f       	add	r18, r24
 6d4:	39 1f       	adc	r19, r25
 6d6:	80 91 28 01 	lds	r24, 0x0128
 6da:	90 91 29 01 	lds	r25, 0x0129
 6de:	82 17       	cp	r24, r18
 6e0:	93 07       	cpc	r25, r19
 6e2:	79 f5       	brne	.+94     	; 0x742 <free+0x92>
 6e4:	f0 93 29 01 	sts	0x0129, r31
 6e8:	e0 93 28 01 	sts	0x0128, r30
 6ec:	6d c0       	rjmp	.+218    	; 0x7c8 <free+0x118>
 6ee:	de 01       	movw	r26, r28
 6f0:	20 e0       	ldi	r18, 0x00	; 0
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	ae 17       	cp	r26, r30
 6f6:	bf 07       	cpc	r27, r31
 6f8:	50 f4       	brcc	.+20     	; 0x70e <free+0x5e>
 6fa:	12 96       	adiw	r26, 0x02	; 2
 6fc:	4d 91       	ld	r20, X+
 6fe:	5c 91       	ld	r21, X
 700:	13 97       	sbiw	r26, 0x03	; 3
 702:	9d 01       	movw	r18, r26
 704:	41 15       	cp	r20, r1
 706:	51 05       	cpc	r21, r1
 708:	09 f1       	breq	.+66     	; 0x74c <free+0x9c>
 70a:	da 01       	movw	r26, r20
 70c:	f3 cf       	rjmp	.-26     	; 0x6f4 <free+0x44>
 70e:	b3 83       	std	Z+3, r27	; 0x03
 710:	a2 83       	std	Z+2, r26	; 0x02
 712:	40 81       	ld	r20, Z
 714:	51 81       	ldd	r21, Z+1	; 0x01
 716:	84 0f       	add	r24, r20
 718:	95 1f       	adc	r25, r21
 71a:	8a 17       	cp	r24, r26
 71c:	9b 07       	cpc	r25, r27
 71e:	71 f4       	brne	.+28     	; 0x73c <free+0x8c>
 720:	8d 91       	ld	r24, X+
 722:	9c 91       	ld	r25, X
 724:	11 97       	sbiw	r26, 0x01	; 1
 726:	84 0f       	add	r24, r20
 728:	95 1f       	adc	r25, r21
 72a:	02 96       	adiw	r24, 0x02	; 2
 72c:	91 83       	std	Z+1, r25	; 0x01
 72e:	80 83       	st	Z, r24
 730:	12 96       	adiw	r26, 0x02	; 2
 732:	8d 91       	ld	r24, X+
 734:	9c 91       	ld	r25, X
 736:	13 97       	sbiw	r26, 0x03	; 3
 738:	93 83       	std	Z+3, r25	; 0x03
 73a:	82 83       	std	Z+2, r24	; 0x02
 73c:	21 15       	cp	r18, r1
 73e:	31 05       	cpc	r19, r1
 740:	29 f4       	brne	.+10     	; 0x74c <free+0x9c>
 742:	f0 93 2b 01 	sts	0x012B, r31
 746:	e0 93 2a 01 	sts	0x012A, r30
 74a:	3e c0       	rjmp	.+124    	; 0x7c8 <free+0x118>
 74c:	d9 01       	movw	r26, r18
 74e:	13 96       	adiw	r26, 0x03	; 3
 750:	fc 93       	st	X, r31
 752:	ee 93       	st	-X, r30
 754:	12 97       	sbiw	r26, 0x02	; 2
 756:	4d 91       	ld	r20, X+
 758:	5d 91       	ld	r21, X+
 75a:	a4 0f       	add	r26, r20
 75c:	b5 1f       	adc	r27, r21
 75e:	ea 17       	cp	r30, r26
 760:	fb 07       	cpc	r31, r27
 762:	79 f4       	brne	.+30     	; 0x782 <free+0xd2>
 764:	80 81       	ld	r24, Z
 766:	91 81       	ldd	r25, Z+1	; 0x01
 768:	84 0f       	add	r24, r20
 76a:	95 1f       	adc	r25, r21
 76c:	02 96       	adiw	r24, 0x02	; 2
 76e:	d9 01       	movw	r26, r18
 770:	11 96       	adiw	r26, 0x01	; 1
 772:	9c 93       	st	X, r25
 774:	8e 93       	st	-X, r24
 776:	82 81       	ldd	r24, Z+2	; 0x02
 778:	93 81       	ldd	r25, Z+3	; 0x03
 77a:	13 96       	adiw	r26, 0x03	; 3
 77c:	9c 93       	st	X, r25
 77e:	8e 93       	st	-X, r24
 780:	12 97       	sbiw	r26, 0x02	; 2
 782:	e0 e0       	ldi	r30, 0x00	; 0
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	9b 81       	ldd	r25, Y+3	; 0x03
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	19 f0       	breq	.+6      	; 0x794 <free+0xe4>
 78e:	fe 01       	movw	r30, r28
 790:	ec 01       	movw	r28, r24
 792:	f9 cf       	rjmp	.-14     	; 0x786 <free+0xd6>
 794:	ce 01       	movw	r24, r28
 796:	02 96       	adiw	r24, 0x02	; 2
 798:	28 81       	ld	r18, Y
 79a:	39 81       	ldd	r19, Y+1	; 0x01
 79c:	82 0f       	add	r24, r18
 79e:	93 1f       	adc	r25, r19
 7a0:	20 91 28 01 	lds	r18, 0x0128
 7a4:	30 91 29 01 	lds	r19, 0x0129
 7a8:	28 17       	cp	r18, r24
 7aa:	39 07       	cpc	r19, r25
 7ac:	69 f4       	brne	.+26     	; 0x7c8 <free+0x118>
 7ae:	30 97       	sbiw	r30, 0x00	; 0
 7b0:	29 f4       	brne	.+10     	; 0x7bc <free+0x10c>
 7b2:	10 92 2b 01 	sts	0x012B, r1
 7b6:	10 92 2a 01 	sts	0x012A, r1
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <free+0x110>
 7bc:	13 82       	std	Z+3, r1	; 0x03
 7be:	12 82       	std	Z+2, r1	; 0x02
 7c0:	d0 93 29 01 	sts	0x0129, r29
 7c4:	c0 93 28 01 	sts	0x0128, r28
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
