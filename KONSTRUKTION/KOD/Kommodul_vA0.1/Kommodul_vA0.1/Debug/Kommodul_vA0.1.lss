
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000568  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000608  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b0  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b2  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ee  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	18 c1       	rjmp	.+560    	; 0x27e <__vector_19>
  4e:	00 00       	nop
  50:	92 c0       	rjmp	.+292    	; 0x176 <__vector_20>
  52:	00 00       	nop
  54:	c3 c0       	rjmp	.+390    	; 0x1dc <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d1       	rcall	.+570    	; 0x2fe <main>
  c4:	4f c2       	rjmp	.+1182   	; 0x564 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
	
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) && !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	89 2b       	or	r24, r25
 102:	49 f4       	brne	.+18     	; 0x116 <add_node+0x24>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	06 d1       	rcall	.+524    	; 0x316 <malloc>
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
 10e:	fc 01       	movw	r30, r24
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	10 83       	st	Z, r17
 116:	09 90       	ld	r0, Y+
 118:	d8 81       	ld	r29, Y
 11a:	c0 2d       	mov	r28, r0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	11 f0       	breq	.+4      	; 0x128 <add_node+0x36>
 124:	ec 01       	movw	r28, r24
 126:	fa cf       	rjmp	.-12     	; 0x11c <add_node+0x2a>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	f4 d0       	rcall	.+488    	; 0x316 <malloc>
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	18 83       	st	Y, r17
 134:	fc 01       	movw	r30, r24
 136:	12 82       	std	Z+2, r1	; 0x02
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <pop_node>:
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	e8 81       	ld	r30, Y
 150:	f9 81       	ldd	r31, Y+1	; 0x01
 152:	30 97       	sbiw	r30, 0x00	; 0
 154:	49 f0       	breq	.+18     	; 0x168 <pop_node+0x26>
 156:	01 81       	ldd	r16, Z+1	; 0x01
 158:	12 81       	ldd	r17, Z+2	; 0x02
 15a:	f0 80       	ld	r15, Z
 15c:	cf 01       	movw	r24, r30
 15e:	73 d1       	rcall	.+742    	; 0x446 <free>
 160:	19 83       	std	Y+1, r17	; 0x01
 162:	08 83       	st	Y, r16
 164:	8f 2d       	mov	r24, r15
 166:	01 c0       	rjmp	.+2      	; 0x16a <pop_node+0x28>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	08 95       	ret

00000176 <__vector_20>:
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	0b b6       	in	r0, 0x3b	; 59
 182:	0f 92       	push	r0
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
 18c:	90 91 c6 00 	lds	r25, 0x00C6
 190:	91 30       	cpi	r25, 0x01	; 1
 192:	41 f4       	brne	.+16     	; 0x1a4 <__vector_20+0x2e>
 194:	80 91 10 01 	lds	r24, 0x0110
 198:	81 11       	cpse	r24, r1
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <__vector_20+0x36>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 10 01 	sts	0x0110, r24
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <__vector_20+0x50>
 1a4:	80 91 10 01 	lds	r24, 0x0110
 1a8:	88 23       	and	r24, r24
 1aa:	69 f0       	breq	.+26     	; 0x1c6 <__vector_20+0x50>
 1ac:	e8 2f       	mov	r30, r24
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	eb 5f       	subi	r30, 0xFB	; 251
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	90 83       	st	Z, r25
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	86 30       	cpi	r24, 0x06	; 6
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <__vector_20+0x4c>
 1bc:	80 93 10 01 	sts	0x0110, r24
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__vector_20+0x50>
 1c2:	10 92 10 01 	sts	0x0110, r1
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0b be       	out	0x3b, r0	; 59
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_21>:
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0b b6       	in	r0, 0x3b	; 59
 1e8:	0f 92       	push	r0
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	80 91 0c 01 	lds	r24, 0x010C
 206:	90 91 0d 01 	lds	r25, 0x010D
 20a:	89 2b       	or	r24, r25
 20c:	31 f4       	brne	.+12     	; 0x21a <__vector_21+0x3e>
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8f 7d       	andi	r24, 0xDF	; 223
 216:	80 83       	st	Z, r24
 218:	05 c0       	rjmp	.+10     	; 0x224 <__vector_21+0x48>
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	91 df       	rcall	.-222    	; 0x142 <pop_node>
 220:	80 93 c6 00 	sts	0x00C6, r24
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <SPI_send>:
	
}

void SPI_send(uint8_t tosend)
{
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
 24a:	68 2f       	mov	r22, r24
 24c:	8e e0       	ldi	r24, 0x0E	; 14
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	50 cf       	rjmp	.-352    	; 0xf2 <add_node>
 252:	08 95       	ret

00000254 <SPI_send_arr>:
}

void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
	int i = 0;
	while(i < size)
 25c:	16 16       	cp	r1, r22
 25e:	17 06       	cpc	r1, r23
 260:	4c f4       	brge	.+18     	; 0x274 <SPI_send_arr+0x20>
 262:	ec 01       	movw	r28, r24
 264:	8c 01       	movw	r16, r24
 266:	06 0f       	add	r16, r22
 268:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 26a:	89 91       	ld	r24, Y+
 26c:	ee df       	rcall	.-36     	; 0x24a <SPI_send>
}

void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)
 26e:	c0 17       	cp	r28, r16
 270:	d1 07       	cpc	r29, r17
 272:	d9 f7       	brne	.-10     	; 0x26a <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <__vector_19>:

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	uint8_t data = SPDR;
 2a4:	8e b5       	in	r24, 0x2e	; 46
	
	if (data == 1)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	51 f4       	brne	.+20     	; 0x2be <__vector_19+0x40>
	{
		SPI_send_arr(arrSpeed,(sizeof(arrSpeed)/sizeof(arrSpeed[0])));
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	d0 df       	rcall	.-96     	; 0x254 <SPI_send_arr>
		SPDR =  pop_node(&head_SPIout);
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	44 df       	rcall	.-376    	; 0x142 <pop_node>
 2ba:	8e bd       	out	0x2e, r24	; 46
		return;
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__vector_19+0x5a>
	}
	
	//add_node(&head_SPIin, data); // Add received data to in-queue
	if (head_SPIout == NULL)
 2be:	80 91 0e 01 	lds	r24, 0x010E
 2c2:	90 91 0f 01 	lds	r25, 0x010F
 2c6:	89 2b       	or	r24, r25
 2c8:	19 f4       	brne	.+6      	; 0x2d0 <__vector_19+0x52>
	{
		uint8_t stop_bit = 255; 
		SPDR = stop_bit;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	8e bd       	out	0x2e, r24	; 46
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <__vector_19+0x5a>
	}
	else
	{
		SPDR = pop_node(&head_SPIout);
 2d0:	8e e0       	ldi	r24, 0x0E	; 14
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	36 df       	rcall	.-404    	; 0x142 <pop_node>
 2d6:	8e bd       	out	0x2e, r24	; 46
		
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:


int main(void)
{	
	Flag_ = 0;
 2fe:	10 92 10 01 	sts	0x0110, r1
	sleep_enable();
 302:	83 b7       	in	r24, 0x33	; 51
 304:	81 60       	ori	r24, 0x01	; 1
 306:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 308:	df de       	rcall	.-578    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	85 b9       	out	0x05, r24	; 5
{	
	Flag_ = 0;
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 30e:	e1 de       	rcall	.-574    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 310:	e4 de       	rcall	.-568    	; 0xda <BT_init>
	sei();
 312:	78 94       	sei
 314:	ff cf       	rjmp	.-2      	; 0x314 <main+0x16>

00000316 <malloc>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	91 05       	cpc	r25, r1
 31e:	10 f4       	brcc	.+4      	; 0x324 <malloc+0xe>
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	e0 91 13 01 	lds	r30, 0x0113
 328:	f0 91 14 01 	lds	r31, 0x0114
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	a0 e0       	ldi	r26, 0x00	; 0
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	30 97       	sbiw	r30, 0x00	; 0
 336:	39 f1       	breq	.+78     	; 0x386 <malloc+0x70>
 338:	40 81       	ld	r20, Z
 33a:	51 81       	ldd	r21, Z+1	; 0x01
 33c:	48 17       	cp	r20, r24
 33e:	59 07       	cpc	r21, r25
 340:	b8 f0       	brcs	.+46     	; 0x370 <malloc+0x5a>
 342:	48 17       	cp	r20, r24
 344:	59 07       	cpc	r21, r25
 346:	71 f4       	brne	.+28     	; 0x364 <malloc+0x4e>
 348:	82 81       	ldd	r24, Z+2	; 0x02
 34a:	93 81       	ldd	r25, Z+3	; 0x03
 34c:	10 97       	sbiw	r26, 0x00	; 0
 34e:	29 f0       	breq	.+10     	; 0x35a <malloc+0x44>
 350:	13 96       	adiw	r26, 0x03	; 3
 352:	9c 93       	st	X, r25
 354:	8e 93       	st	-X, r24
 356:	12 97       	sbiw	r26, 0x02	; 2
 358:	2c c0       	rjmp	.+88     	; 0x3b2 <malloc+0x9c>
 35a:	90 93 14 01 	sts	0x0114, r25
 35e:	80 93 13 01 	sts	0x0113, r24
 362:	27 c0       	rjmp	.+78     	; 0x3b2 <malloc+0x9c>
 364:	21 15       	cp	r18, r1
 366:	31 05       	cpc	r19, r1
 368:	31 f0       	breq	.+12     	; 0x376 <malloc+0x60>
 36a:	42 17       	cp	r20, r18
 36c:	53 07       	cpc	r21, r19
 36e:	18 f0       	brcs	.+6      	; 0x376 <malloc+0x60>
 370:	a9 01       	movw	r20, r18
 372:	db 01       	movw	r26, r22
 374:	01 c0       	rjmp	.+2      	; 0x378 <malloc+0x62>
 376:	ef 01       	movw	r28, r30
 378:	9a 01       	movw	r18, r20
 37a:	bd 01       	movw	r22, r26
 37c:	df 01       	movw	r26, r30
 37e:	02 80       	ldd	r0, Z+2	; 0x02
 380:	f3 81       	ldd	r31, Z+3	; 0x03
 382:	e0 2d       	mov	r30, r0
 384:	d7 cf       	rjmp	.-82     	; 0x334 <malloc+0x1e>
 386:	21 15       	cp	r18, r1
 388:	31 05       	cpc	r19, r1
 38a:	f9 f0       	breq	.+62     	; 0x3ca <malloc+0xb4>
 38c:	28 1b       	sub	r18, r24
 38e:	39 0b       	sbc	r19, r25
 390:	24 30       	cpi	r18, 0x04	; 4
 392:	31 05       	cpc	r19, r1
 394:	80 f4       	brcc	.+32     	; 0x3b6 <malloc+0xa0>
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	9b 81       	ldd	r25, Y+3	; 0x03
 39a:	61 15       	cp	r22, r1
 39c:	71 05       	cpc	r23, r1
 39e:	21 f0       	breq	.+8      	; 0x3a8 <malloc+0x92>
 3a0:	fb 01       	movw	r30, r22
 3a2:	93 83       	std	Z+3, r25	; 0x03
 3a4:	82 83       	std	Z+2, r24	; 0x02
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <malloc+0x9a>
 3a8:	90 93 14 01 	sts	0x0114, r25
 3ac:	80 93 13 01 	sts	0x0113, r24
 3b0:	fe 01       	movw	r30, r28
 3b2:	32 96       	adiw	r30, 0x02	; 2
 3b4:	44 c0       	rjmp	.+136    	; 0x43e <malloc+0x128>
 3b6:	fe 01       	movw	r30, r28
 3b8:	e2 0f       	add	r30, r18
 3ba:	f3 1f       	adc	r31, r19
 3bc:	81 93       	st	Z+, r24
 3be:	91 93       	st	Z+, r25
 3c0:	22 50       	subi	r18, 0x02	; 2
 3c2:	31 09       	sbc	r19, r1
 3c4:	39 83       	std	Y+1, r19	; 0x01
 3c6:	28 83       	st	Y, r18
 3c8:	3a c0       	rjmp	.+116    	; 0x43e <malloc+0x128>
 3ca:	20 91 11 01 	lds	r18, 0x0111
 3ce:	30 91 12 01 	lds	r19, 0x0112
 3d2:	23 2b       	or	r18, r19
 3d4:	41 f4       	brne	.+16     	; 0x3e6 <malloc+0xd0>
 3d6:	20 91 02 01 	lds	r18, 0x0102
 3da:	30 91 03 01 	lds	r19, 0x0103
 3de:	30 93 12 01 	sts	0x0112, r19
 3e2:	20 93 11 01 	sts	0x0111, r18
 3e6:	20 91 00 01 	lds	r18, 0x0100
 3ea:	30 91 01 01 	lds	r19, 0x0101
 3ee:	21 15       	cp	r18, r1
 3f0:	31 05       	cpc	r19, r1
 3f2:	41 f4       	brne	.+16     	; 0x404 <malloc+0xee>
 3f4:	2d b7       	in	r18, 0x3d	; 61
 3f6:	3e b7       	in	r19, 0x3e	; 62
 3f8:	40 91 04 01 	lds	r20, 0x0104
 3fc:	50 91 05 01 	lds	r21, 0x0105
 400:	24 1b       	sub	r18, r20
 402:	35 0b       	sbc	r19, r21
 404:	e0 91 11 01 	lds	r30, 0x0111
 408:	f0 91 12 01 	lds	r31, 0x0112
 40c:	e2 17       	cp	r30, r18
 40e:	f3 07       	cpc	r31, r19
 410:	a0 f4       	brcc	.+40     	; 0x43a <malloc+0x124>
 412:	2e 1b       	sub	r18, r30
 414:	3f 0b       	sbc	r19, r31
 416:	28 17       	cp	r18, r24
 418:	39 07       	cpc	r19, r25
 41a:	78 f0       	brcs	.+30     	; 0x43a <malloc+0x124>
 41c:	ac 01       	movw	r20, r24
 41e:	4e 5f       	subi	r20, 0xFE	; 254
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	24 17       	cp	r18, r20
 424:	35 07       	cpc	r19, r21
 426:	48 f0       	brcs	.+18     	; 0x43a <malloc+0x124>
 428:	4e 0f       	add	r20, r30
 42a:	5f 1f       	adc	r21, r31
 42c:	50 93 12 01 	sts	0x0112, r21
 430:	40 93 11 01 	sts	0x0111, r20
 434:	81 93       	st	Z+, r24
 436:	91 93       	st	Z+, r25
 438:	02 c0       	rjmp	.+4      	; 0x43e <malloc+0x128>
 43a:	e0 e0       	ldi	r30, 0x00	; 0
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	cf 01       	movw	r24, r30
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <free>:
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	09 f4       	brne	.+2      	; 0x450 <free+0xa>
 44e:	87 c0       	rjmp	.+270    	; 0x55e <free+0x118>
 450:	fc 01       	movw	r30, r24
 452:	32 97       	sbiw	r30, 0x02	; 2
 454:	13 82       	std	Z+3, r1	; 0x03
 456:	12 82       	std	Z+2, r1	; 0x02
 458:	c0 91 13 01 	lds	r28, 0x0113
 45c:	d0 91 14 01 	lds	r29, 0x0114
 460:	20 97       	sbiw	r28, 0x00	; 0
 462:	81 f4       	brne	.+32     	; 0x484 <free+0x3e>
 464:	20 81       	ld	r18, Z
 466:	31 81       	ldd	r19, Z+1	; 0x01
 468:	28 0f       	add	r18, r24
 46a:	39 1f       	adc	r19, r25
 46c:	80 91 11 01 	lds	r24, 0x0111
 470:	90 91 12 01 	lds	r25, 0x0112
 474:	82 17       	cp	r24, r18
 476:	93 07       	cpc	r25, r19
 478:	79 f5       	brne	.+94     	; 0x4d8 <free+0x92>
 47a:	f0 93 12 01 	sts	0x0112, r31
 47e:	e0 93 11 01 	sts	0x0111, r30
 482:	6d c0       	rjmp	.+218    	; 0x55e <free+0x118>
 484:	de 01       	movw	r26, r28
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	ae 17       	cp	r26, r30
 48c:	bf 07       	cpc	r27, r31
 48e:	50 f4       	brcc	.+20     	; 0x4a4 <free+0x5e>
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	4d 91       	ld	r20, X+
 494:	5c 91       	ld	r21, X
 496:	13 97       	sbiw	r26, 0x03	; 3
 498:	9d 01       	movw	r18, r26
 49a:	41 15       	cp	r20, r1
 49c:	51 05       	cpc	r21, r1
 49e:	09 f1       	breq	.+66     	; 0x4e2 <free+0x9c>
 4a0:	da 01       	movw	r26, r20
 4a2:	f3 cf       	rjmp	.-26     	; 0x48a <free+0x44>
 4a4:	b3 83       	std	Z+3, r27	; 0x03
 4a6:	a2 83       	std	Z+2, r26	; 0x02
 4a8:	40 81       	ld	r20, Z
 4aa:	51 81       	ldd	r21, Z+1	; 0x01
 4ac:	84 0f       	add	r24, r20
 4ae:	95 1f       	adc	r25, r21
 4b0:	8a 17       	cp	r24, r26
 4b2:	9b 07       	cpc	r25, r27
 4b4:	71 f4       	brne	.+28     	; 0x4d2 <free+0x8c>
 4b6:	8d 91       	ld	r24, X+
 4b8:	9c 91       	ld	r25, X
 4ba:	11 97       	sbiw	r26, 0x01	; 1
 4bc:	84 0f       	add	r24, r20
 4be:	95 1f       	adc	r25, r21
 4c0:	02 96       	adiw	r24, 0x02	; 2
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
 4c6:	12 96       	adiw	r26, 0x02	; 2
 4c8:	8d 91       	ld	r24, X+
 4ca:	9c 91       	ld	r25, X
 4cc:	13 97       	sbiw	r26, 0x03	; 3
 4ce:	93 83       	std	Z+3, r25	; 0x03
 4d0:	82 83       	std	Z+2, r24	; 0x02
 4d2:	21 15       	cp	r18, r1
 4d4:	31 05       	cpc	r19, r1
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <free+0x9c>
 4d8:	f0 93 14 01 	sts	0x0114, r31
 4dc:	e0 93 13 01 	sts	0x0113, r30
 4e0:	3e c0       	rjmp	.+124    	; 0x55e <free+0x118>
 4e2:	d9 01       	movw	r26, r18
 4e4:	13 96       	adiw	r26, 0x03	; 3
 4e6:	fc 93       	st	X, r31
 4e8:	ee 93       	st	-X, r30
 4ea:	12 97       	sbiw	r26, 0x02	; 2
 4ec:	4d 91       	ld	r20, X+
 4ee:	5d 91       	ld	r21, X+
 4f0:	a4 0f       	add	r26, r20
 4f2:	b5 1f       	adc	r27, r21
 4f4:	ea 17       	cp	r30, r26
 4f6:	fb 07       	cpc	r31, r27
 4f8:	79 f4       	brne	.+30     	; 0x518 <free+0xd2>
 4fa:	80 81       	ld	r24, Z
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 4fe:	84 0f       	add	r24, r20
 500:	95 1f       	adc	r25, r21
 502:	02 96       	adiw	r24, 0x02	; 2
 504:	d9 01       	movw	r26, r18
 506:	11 96       	adiw	r26, 0x01	; 1
 508:	9c 93       	st	X, r25
 50a:	8e 93       	st	-X, r24
 50c:	82 81       	ldd	r24, Z+2	; 0x02
 50e:	93 81       	ldd	r25, Z+3	; 0x03
 510:	13 96       	adiw	r26, 0x03	; 3
 512:	9c 93       	st	X, r25
 514:	8e 93       	st	-X, r24
 516:	12 97       	sbiw	r26, 0x02	; 2
 518:	e0 e0       	ldi	r30, 0x00	; 0
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	9b 81       	ldd	r25, Y+3	; 0x03
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	19 f0       	breq	.+6      	; 0x52a <free+0xe4>
 524:	fe 01       	movw	r30, r28
 526:	ec 01       	movw	r28, r24
 528:	f9 cf       	rjmp	.-14     	; 0x51c <free+0xd6>
 52a:	ce 01       	movw	r24, r28
 52c:	02 96       	adiw	r24, 0x02	; 2
 52e:	28 81       	ld	r18, Y
 530:	39 81       	ldd	r19, Y+1	; 0x01
 532:	82 0f       	add	r24, r18
 534:	93 1f       	adc	r25, r19
 536:	20 91 11 01 	lds	r18, 0x0111
 53a:	30 91 12 01 	lds	r19, 0x0112
 53e:	28 17       	cp	r18, r24
 540:	39 07       	cpc	r19, r25
 542:	69 f4       	brne	.+26     	; 0x55e <free+0x118>
 544:	30 97       	sbiw	r30, 0x00	; 0
 546:	29 f4       	brne	.+10     	; 0x552 <free+0x10c>
 548:	10 92 14 01 	sts	0x0114, r1
 54c:	10 92 13 01 	sts	0x0113, r1
 550:	02 c0       	rjmp	.+4      	; 0x556 <free+0x110>
 552:	13 82       	std	Z+3, r1	; 0x03
 554:	12 82       	std	Z+2, r1	; 0x02
 556:	d0 93 12 01 	sts	0x0112, r29
 55a:	c0 93 11 01 	sts	0x0111, r28
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
