
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000006f2  00000786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800112  00800112  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a47  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bf  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005da  00000000  00000000  00001586  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000852  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002aa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ba c1       	rjmp	.+884    	; 0x3c2 <__vector_19>
  4e:	00 00       	nop
  50:	ea c0       	rjmp	.+468    	; 0x226 <__vector_20>
  52:	00 00       	nop
  54:	49 c1       	rjmp	.+658    	; 0x2e8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e2 d1       	rcall	.+964    	; 0x488 <main>
  c4:	14 c3       	rjmp	.+1576   	; 0x6ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
{
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) && !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 e9       	ldi	r24, 0x98	; 152
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	89 2b       	or	r24, r25
 102:	49 f4       	brne	.+18     	; 0x116 <add_node+0x24>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	cb d1       	rcall	.+918    	; 0x4a0 <malloc>
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
 10e:	fc 01       	movw	r30, r24
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	10 83       	st	Z, r17
 116:	09 90       	ld	r0, Y+
 118:	d8 81       	ld	r29, Y
 11a:	c0 2d       	mov	r28, r0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	11 f0       	breq	.+4      	; 0x128 <add_node+0x36>
 124:	ec 01       	movw	r28, r24
 126:	fa cf       	rjmp	.-12     	; 0x11c <add_node+0x2a>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	b9 d1       	rcall	.+882    	; 0x4a0 <malloc>
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	18 83       	st	Y, r17
 134:	fc 01       	movw	r30, r24
 136:	12 82       	std	Z+2, r1	; 0x02
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <pop_node>:
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	e8 81       	ld	r30, Y
 150:	f9 81       	ldd	r31, Y+1	; 0x01
 152:	30 97       	sbiw	r30, 0x00	; 0
 154:	49 f0       	breq	.+18     	; 0x168 <pop_node+0x26>
 156:	01 81       	ldd	r16, Z+1	; 0x01
 158:	12 81       	ldd	r17, Z+2	; 0x02
 15a:	f0 80       	ld	r15, Z
 15c:	cf 01       	movw	r24, r30
 15e:	38 d2       	rcall	.+1136   	; 0x5d0 <free>
 160:	19 83       	std	Y+1, r17	; 0x01
 162:	08 83       	st	Y, r16
 164:	8f 2d       	mov	r24, r15
 166:	01 c0       	rjmp	.+2      	; 0x16a <pop_node+0x28>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	08 95       	ret

00000176 <flush_list>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	fc 01       	movw	r30, r24
 17c:	c0 81       	ld	r28, Z
 17e:	d1 81       	ldd	r29, Z+1	; 0x01
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	59 f0       	breq	.+22     	; 0x19a <flush_list+0x24>
 184:	11 82       	std	Z+1, r1	; 0x01
 186:	10 82       	st	Z, r1
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	19 f0       	breq	.+6      	; 0x196 <flush_list+0x20>
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	f0 df       	rcall	.-32     	; 0x176 <flush_list>
 196:	ce 01       	movw	r24, r28
 198:	1b d2       	rcall	.+1078   	; 0x5d0 <free>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <send_BT_buffer>:
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	7c 01       	movw	r14, r24
 1ae:	8b 01       	movw	r16, r22
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	e0 df       	rcall	.-64     	; 0x176 <flush_list>
 1b6:	10 16       	cp	r1, r16
 1b8:	11 06       	cpc	r1, r17
 1ba:	54 f4       	brge	.+20     	; 0x1d0 <send_BT_buffer+0x30>
 1bc:	e7 01       	movw	r28, r14
 1be:	0e 0d       	add	r16, r14
 1c0:	1f 1d       	adc	r17, r15
 1c2:	69 91       	ld	r22, Y+
 1c4:	82 e1       	ldi	r24, 0x12	; 18
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	94 df       	rcall	.-216    	; 0xf2 <add_node>
 1ca:	c0 17       	cp	r28, r16
 1cc:	d1 07       	cpc	r29, r17
 1ce:	c9 f7       	brne	.-14     	; 0x1c2 <send_BT_buffer+0x22>
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	80 83       	st	Z, r24
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <BT_StartBitCheck>:
 1e8:	87 35       	cpi	r24, 0x57	; 87
 1ea:	69 f0       	breq	.+26     	; 0x206 <BT_StartBitCheck+0x1e>
 1ec:	89 35       	cpi	r24, 0x59	; 89
 1ee:	99 f0       	breq	.+38     	; 0x216 <BT_StartBitCheck+0x2e>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	c1 f4       	brne	.+48     	; 0x224 <BT_StartBitCheck+0x3c>
 1f4:	80 93 18 01 	sts	0x0118, r24
 1f8:	10 92 19 01 	sts	0x0119, r1
 1fc:	10 92 17 01 	sts	0x0117, r1
 200:	10 92 16 01 	sts	0x0116, r1
 204:	08 95       	ret
 206:	10 92 17 01 	sts	0x0117, r1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 19 01 	sts	0x0119, r24
 210:	10 92 18 01 	sts	0x0118, r1
 214:	08 95       	ret
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 17 01 	sts	0x0117, r24
 21c:	10 92 19 01 	sts	0x0119, r1
 220:	10 92 18 01 	sts	0x0118, r1
 224:	08 95       	ret

00000226 <__vector_20>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
 24c:	80 91 c6 00 	lds	r24, 0x00C6
 250:	90 91 18 01 	lds	r25, 0x0118
 254:	91 11       	cpse	r25, r1
 256:	0a c0       	rjmp	.+20     	; 0x26c <__vector_20+0x46>
 258:	90 91 19 01 	lds	r25, 0x0119
 25c:	91 11       	cpse	r25, r1
 25e:	1b c0       	rjmp	.+54     	; 0x296 <__vector_20+0x70>
 260:	90 91 17 01 	lds	r25, 0x0117
 264:	91 11       	cpse	r25, r1
 266:	22 c0       	rjmp	.+68     	; 0x2ac <__vector_20+0x86>
 268:	bf df       	rcall	.-130    	; 0x1e8 <BT_StartBitCheck>
 26a:	15 c0       	rjmp	.+42     	; 0x296 <__vector_20+0x70>
 26c:	91 30       	cpi	r25, 0x01	; 1
 26e:	99 f4       	brne	.+38     	; 0x296 <__vector_20+0x70>
 270:	87 35       	cpi	r24, 0x57	; 87
 272:	89 f0       	breq	.+34     	; 0x296 <__vector_20+0x70>
 274:	90 91 16 01 	lds	r25, 0x0116
 278:	e9 2f       	mov	r30, r25
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e3 5f       	subi	r30, 0xF3	; 243
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 83       	st	Z, r24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 0f       	add	r24, r25
 286:	80 93 16 01 	sts	0x0116, r24
 28a:	85 30       	cpi	r24, 0x05	; 5
 28c:	21 f4       	brne	.+8      	; 0x296 <__vector_20+0x70>
 28e:	10 92 18 01 	sts	0x0118, r1
 292:	10 92 16 01 	sts	0x0116, r1
 296:	80 91 19 01 	lds	r24, 0x0119
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	39 f4       	brne	.+14     	; 0x2ac <__vector_20+0x86>
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	7c df       	rcall	.-264    	; 0x1a0 <send_BT_buffer>
 2a8:	10 92 19 01 	sts	0x0119, r1
 2ac:	80 91 17 01 	lds	r24, 0x0117
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	39 f4       	brne	.+14     	; 0x2c2 <__vector_20+0x9c>
 2b4:	63 e0       	ldi	r22, 0x03	; 3
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	71 df       	rcall	.-286    	; 0x1a0 <send_BT_buffer>
 2be:	10 92 17 01 	sts	0x0117, r1
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0b be       	out	0x3b, r0	; 59
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_21>:
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
 30e:	80 91 12 01 	lds	r24, 0x0112
 312:	90 91 13 01 	lds	r25, 0x0113
 316:	89 2b       	or	r24, r25
 318:	31 f4       	brne	.+12     	; 0x326 <__vector_21+0x3e>
 31a:	e1 ec       	ldi	r30, 0xC1	; 193
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8f 7d       	andi	r24, 0xDF	; 223
 322:	80 83       	st	Z, r24
 324:	05 c0       	rjmp	.+10     	; 0x330 <__vector_21+0x48>
 326:	82 e1       	ldi	r24, 0x12	; 18
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0b df       	rcall	.-490    	; 0x142 <pop_node>
 32c:	80 93 c6 00 	sts	0x00C6, r24
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0b be       	out	0x3b, r0	; 59
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <SPI_send>:
	
}
void SPI_send(uint8_t tosend)
{
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
 356:	68 2f       	mov	r22, r24
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	ca ce       	rjmp	.-620    	; 0xf2 <add_node>
 35e:	08 95       	ret

00000360 <SPI_send_arr>:
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
	int i = 0;
	while(i < size)
 368:	16 16       	cp	r1, r22
 36a:	17 06       	cpc	r1, r23
 36c:	4c f4       	brge	.+18     	; 0x380 <SPI_send_arr+0x20>
 36e:	ec 01       	movw	r28, r24
 370:	8c 01       	movw	r16, r24
 372:	06 0f       	add	r16, r22
 374:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 376:	89 91       	ld	r24, Y+
 378:	ee df       	rcall	.-36     	; 0x356 <SPI_send>
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)
 37a:	c0 17       	cp	r28, r16
 37c:	d1 07       	cpc	r29, r17
 37e:	d9 f7       	brne	.-10     	; 0x376 <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <SPI_StartBitCheck>:
void SPI_StartBitCheck(uint8_t in_)
{
	switch (in_){
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	19 f0       	breq	.+6      	; 0x394 <SPI_StartBitCheck+0xa>
 38e:	8f 3f       	cpi	r24, 0xFF	; 255
 390:	49 f0       	breq	.+18     	; 0x3a4 <SPI_StartBitCheck+0x1a>
 392:	10 c0       	rjmp	.+32     	; 0x3b4 <SPI_StartBitCheck+0x2a>
		
		case 1: 
		speedFlag_ = 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 1b 01 	sts	0x011B, r24
		sensorFlag_ = 0;
 39a:	10 92 1c 01 	sts	0x011C, r1
		counter_ = 0;
 39e:	10 92 1a 01 	sts	0x011A, r1
		break;
 3a2:	08 95       	ret
		
		case 255: 
		sensorFlag_ = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 1c 01 	sts	0x011C, r24
		speedFlag_ = 0;
 3aa:	10 92 1b 01 	sts	0x011B, r1
		counter_ = 0;
 3ae:	10 92 1a 01 	sts	0x011A, r1
		break; 
 3b2:	08 95       	ret
		
		default: 
		sensorFlag_ = 0;
 3b4:	10 92 1c 01 	sts	0x011C, r1
		speedFlag_ = 0;
 3b8:	10 92 1b 01 	sts	0x011B, r1
		counter_ = 0;
 3bc:	10 92 1a 01 	sts	0x011A, r1
 3c0:	08 95       	ret

000003c2 <__vector_19>:
	}
}
// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	0b b6       	in	r0, 0x3b	; 59
 3ce:	0f 92       	push	r0
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	uint8_t data = SPDR;
 3e8:	8e b5       	in	r24, 0x2e	; 46
	
	if ( (speedFlag_ == 0) && (sensorFlag_ == 0) ){
 3ea:	90 91 1b 01 	lds	r25, 0x011B
 3ee:	91 11       	cpse	r25, r1
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <__vector_19+0x3c>
 3f2:	90 91 1c 01 	lds	r25, 0x011C
 3f6:	91 11       	cpse	r25, r1
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <__vector_19+0x3c>
		SPI_StartBitCheck(data);
 3fa:	c7 df       	rcall	.-114    	; 0x38a <SPI_StartBitCheck>
 3fc:	15 c0       	rjmp	.+42     	; 0x428 <__vector_19+0x66>
		//if (sensorFlag_ == 1){
			//return; //first bit is not interesting
		//}
	}
	
	else if (sensorFlag_ == 1){
 3fe:	90 91 1c 01 	lds	r25, 0x011C
 402:	91 30       	cpi	r25, 0x01	; 1
 404:	89 f4       	brne	.+34     	; 0x428 <__vector_19+0x66>
	arrSensor[counter_] = data; //Load into correct pos of array 0-3
 406:	90 91 1a 01 	lds	r25, 0x011A
 40a:	e9 2f       	mov	r30, r25
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ea 5f       	subi	r30, 0xFA	; 250
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	80 83       	st	Z, r24
	counter_++;
 414:	9f 5f       	subi	r25, 0xFF	; 255
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
 416:	94 30       	cpi	r25, 0x04	; 4
 418:	19 f0       	breq	.+6      	; 0x420 <__vector_19+0x5e>
		//}
	}
	
	else if (sensorFlag_ == 1){
	arrSensor[counter_] = data; //Load into correct pos of array 0-3
	counter_++;
 41a:	90 93 1a 01 	sts	0x011A, r25
 41e:	04 c0       	rjmp	.+8      	; 0x428 <__vector_19+0x66>
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
				counter_ = 0;
 420:	10 92 1a 01 	sts	0x011A, r1
				sensorFlag_ = 0;
 424:	10 92 1c 01 	sts	0x011C, r1
		}
	}
	
	
	// Speed is to be sent.
	if (speedFlag_ == 1){
 428:	80 91 1b 01 	lds	r24, 0x011B
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	61 f4       	brne	.+24     	; 0x448 <__vector_19+0x86>
		SPI_send_arr(arrSpeed,(sizeof(arrSpeed)/sizeof(arrSpeed[0])));
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	8d e0       	ldi	r24, 0x0D	; 13
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	93 df       	rcall	.-218    	; 0x360 <SPI_send_arr>
		SPDR =  pop_node(&head_SPIout);
 43a:	84 e1       	ldi	r24, 0x14	; 20
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	81 de       	rcall	.-766    	; 0x142 <pop_node>
 440:	8e bd       	out	0x2e, r24	; 46
		speedFlag_ = 0;
 442:	10 92 1b 01 	sts	0x011B, r1
		return;
 446:	0d c0       	rjmp	.+26     	; 0x462 <__vector_19+0xa0>
	}
	

	if (head_SPIout == NULL){ //Sendback function will always be performed when something is to be sent.
 448:	80 91 14 01 	lds	r24, 0x0114
 44c:	90 91 15 01 	lds	r25, 0x0115
 450:	89 2b       	or	r24, r25
 452:	19 f4       	brne	.+6      	; 0x45a <__vector_19+0x98>
		uint8_t stop_bit = 255;
		SPDR = stop_bit;
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	8e bd       	out	0x2e, r24	; 46
 458:	04 c0       	rjmp	.+8      	; 0x462 <__vector_19+0xa0>
	}
	else{
		SPDR = pop_node(&head_SPIout);
 45a:	84 e1       	ldi	r24, 0x14	; 20
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	71 de       	rcall	.-798    	; 0x142 <pop_node>
 460:	8e bd       	out	0x2e, r24	; 46
			//else
			//{
				//Flag_++;
			//}
		//}
}
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0b be       	out	0x3b, r0	; 59
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <main>:



int main(void)
{	
	Flag_ = 0;
 488:	10 92 1d 01 	sts	0x011D, r1
	sleep_enable();
 48c:	83 b7       	in	r24, 0x33	; 51
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 492:	1a de       	rcall	.-972    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 494:	80 e1       	ldi	r24, 0x10	; 16
 496:	85 b9       	out	0x05, r24	; 5
{	
	Flag_ = 0;
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 498:	1c de       	rcall	.-968    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 49a:	1f de       	rcall	.-962    	; 0xda <BT_init>
	sei();
 49c:	78 94       	sei
 49e:	ff cf       	rjmp	.-2      	; 0x49e <main+0x16>

000004a0 <malloc>:
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	91 05       	cpc	r25, r1
 4a8:	10 f4       	brcc	.+4      	; 0x4ae <malloc+0xe>
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	e0 91 20 01 	lds	r30, 0x0120
 4b2:	f0 91 21 01 	lds	r31, 0x0121
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	a0 e0       	ldi	r26, 0x00	; 0
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	39 f1       	breq	.+78     	; 0x510 <malloc+0x70>
 4c2:	40 81       	ld	r20, Z
 4c4:	51 81       	ldd	r21, Z+1	; 0x01
 4c6:	48 17       	cp	r20, r24
 4c8:	59 07       	cpc	r21, r25
 4ca:	b8 f0       	brcs	.+46     	; 0x4fa <malloc+0x5a>
 4cc:	48 17       	cp	r20, r24
 4ce:	59 07       	cpc	r21, r25
 4d0:	71 f4       	brne	.+28     	; 0x4ee <malloc+0x4e>
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	93 81       	ldd	r25, Z+3	; 0x03
 4d6:	10 97       	sbiw	r26, 0x00	; 0
 4d8:	29 f0       	breq	.+10     	; 0x4e4 <malloc+0x44>
 4da:	13 96       	adiw	r26, 0x03	; 3
 4dc:	9c 93       	st	X, r25
 4de:	8e 93       	st	-X, r24
 4e0:	12 97       	sbiw	r26, 0x02	; 2
 4e2:	2c c0       	rjmp	.+88     	; 0x53c <malloc+0x9c>
 4e4:	90 93 21 01 	sts	0x0121, r25
 4e8:	80 93 20 01 	sts	0x0120, r24
 4ec:	27 c0       	rjmp	.+78     	; 0x53c <malloc+0x9c>
 4ee:	21 15       	cp	r18, r1
 4f0:	31 05       	cpc	r19, r1
 4f2:	31 f0       	breq	.+12     	; 0x500 <malloc+0x60>
 4f4:	42 17       	cp	r20, r18
 4f6:	53 07       	cpc	r21, r19
 4f8:	18 f0       	brcs	.+6      	; 0x500 <malloc+0x60>
 4fa:	a9 01       	movw	r20, r18
 4fc:	db 01       	movw	r26, r22
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <malloc+0x62>
 500:	ef 01       	movw	r28, r30
 502:	9a 01       	movw	r18, r20
 504:	bd 01       	movw	r22, r26
 506:	df 01       	movw	r26, r30
 508:	02 80       	ldd	r0, Z+2	; 0x02
 50a:	f3 81       	ldd	r31, Z+3	; 0x03
 50c:	e0 2d       	mov	r30, r0
 50e:	d7 cf       	rjmp	.-82     	; 0x4be <malloc+0x1e>
 510:	21 15       	cp	r18, r1
 512:	31 05       	cpc	r19, r1
 514:	f9 f0       	breq	.+62     	; 0x554 <malloc+0xb4>
 516:	28 1b       	sub	r18, r24
 518:	39 0b       	sbc	r19, r25
 51a:	24 30       	cpi	r18, 0x04	; 4
 51c:	31 05       	cpc	r19, r1
 51e:	80 f4       	brcc	.+32     	; 0x540 <malloc+0xa0>
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	9b 81       	ldd	r25, Y+3	; 0x03
 524:	61 15       	cp	r22, r1
 526:	71 05       	cpc	r23, r1
 528:	21 f0       	breq	.+8      	; 0x532 <malloc+0x92>
 52a:	fb 01       	movw	r30, r22
 52c:	93 83       	std	Z+3, r25	; 0x03
 52e:	82 83       	std	Z+2, r24	; 0x02
 530:	04 c0       	rjmp	.+8      	; 0x53a <malloc+0x9a>
 532:	90 93 21 01 	sts	0x0121, r25
 536:	80 93 20 01 	sts	0x0120, r24
 53a:	fe 01       	movw	r30, r28
 53c:	32 96       	adiw	r30, 0x02	; 2
 53e:	44 c0       	rjmp	.+136    	; 0x5c8 <malloc+0x128>
 540:	fe 01       	movw	r30, r28
 542:	e2 0f       	add	r30, r18
 544:	f3 1f       	adc	r31, r19
 546:	81 93       	st	Z+, r24
 548:	91 93       	st	Z+, r25
 54a:	22 50       	subi	r18, 0x02	; 2
 54c:	31 09       	sbc	r19, r1
 54e:	39 83       	std	Y+1, r19	; 0x01
 550:	28 83       	st	Y, r18
 552:	3a c0       	rjmp	.+116    	; 0x5c8 <malloc+0x128>
 554:	20 91 1e 01 	lds	r18, 0x011E
 558:	30 91 1f 01 	lds	r19, 0x011F
 55c:	23 2b       	or	r18, r19
 55e:	41 f4       	brne	.+16     	; 0x570 <malloc+0xd0>
 560:	20 91 02 01 	lds	r18, 0x0102
 564:	30 91 03 01 	lds	r19, 0x0103
 568:	30 93 1f 01 	sts	0x011F, r19
 56c:	20 93 1e 01 	sts	0x011E, r18
 570:	20 91 00 01 	lds	r18, 0x0100
 574:	30 91 01 01 	lds	r19, 0x0101
 578:	21 15       	cp	r18, r1
 57a:	31 05       	cpc	r19, r1
 57c:	41 f4       	brne	.+16     	; 0x58e <malloc+0xee>
 57e:	2d b7       	in	r18, 0x3d	; 61
 580:	3e b7       	in	r19, 0x3e	; 62
 582:	40 91 04 01 	lds	r20, 0x0104
 586:	50 91 05 01 	lds	r21, 0x0105
 58a:	24 1b       	sub	r18, r20
 58c:	35 0b       	sbc	r19, r21
 58e:	e0 91 1e 01 	lds	r30, 0x011E
 592:	f0 91 1f 01 	lds	r31, 0x011F
 596:	e2 17       	cp	r30, r18
 598:	f3 07       	cpc	r31, r19
 59a:	a0 f4       	brcc	.+40     	; 0x5c4 <malloc+0x124>
 59c:	2e 1b       	sub	r18, r30
 59e:	3f 0b       	sbc	r19, r31
 5a0:	28 17       	cp	r18, r24
 5a2:	39 07       	cpc	r19, r25
 5a4:	78 f0       	brcs	.+30     	; 0x5c4 <malloc+0x124>
 5a6:	ac 01       	movw	r20, r24
 5a8:	4e 5f       	subi	r20, 0xFE	; 254
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	24 17       	cp	r18, r20
 5ae:	35 07       	cpc	r19, r21
 5b0:	48 f0       	brcs	.+18     	; 0x5c4 <malloc+0x124>
 5b2:	4e 0f       	add	r20, r30
 5b4:	5f 1f       	adc	r21, r31
 5b6:	50 93 1f 01 	sts	0x011F, r21
 5ba:	40 93 1e 01 	sts	0x011E, r20
 5be:	81 93       	st	Z+, r24
 5c0:	91 93       	st	Z+, r25
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <malloc+0x128>
 5c4:	e0 e0       	ldi	r30, 0x00	; 0
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	cf 01       	movw	r24, r30
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <free>:
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	09 f4       	brne	.+2      	; 0x5da <free+0xa>
 5d8:	87 c0       	rjmp	.+270    	; 0x6e8 <free+0x118>
 5da:	fc 01       	movw	r30, r24
 5dc:	32 97       	sbiw	r30, 0x02	; 2
 5de:	13 82       	std	Z+3, r1	; 0x03
 5e0:	12 82       	std	Z+2, r1	; 0x02
 5e2:	c0 91 20 01 	lds	r28, 0x0120
 5e6:	d0 91 21 01 	lds	r29, 0x0121
 5ea:	20 97       	sbiw	r28, 0x00	; 0
 5ec:	81 f4       	brne	.+32     	; 0x60e <free+0x3e>
 5ee:	20 81       	ld	r18, Z
 5f0:	31 81       	ldd	r19, Z+1	; 0x01
 5f2:	28 0f       	add	r18, r24
 5f4:	39 1f       	adc	r19, r25
 5f6:	80 91 1e 01 	lds	r24, 0x011E
 5fa:	90 91 1f 01 	lds	r25, 0x011F
 5fe:	82 17       	cp	r24, r18
 600:	93 07       	cpc	r25, r19
 602:	79 f5       	brne	.+94     	; 0x662 <free+0x92>
 604:	f0 93 1f 01 	sts	0x011F, r31
 608:	e0 93 1e 01 	sts	0x011E, r30
 60c:	6d c0       	rjmp	.+218    	; 0x6e8 <free+0x118>
 60e:	de 01       	movw	r26, r28
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	ae 17       	cp	r26, r30
 616:	bf 07       	cpc	r27, r31
 618:	50 f4       	brcc	.+20     	; 0x62e <free+0x5e>
 61a:	12 96       	adiw	r26, 0x02	; 2
 61c:	4d 91       	ld	r20, X+
 61e:	5c 91       	ld	r21, X
 620:	13 97       	sbiw	r26, 0x03	; 3
 622:	9d 01       	movw	r18, r26
 624:	41 15       	cp	r20, r1
 626:	51 05       	cpc	r21, r1
 628:	09 f1       	breq	.+66     	; 0x66c <free+0x9c>
 62a:	da 01       	movw	r26, r20
 62c:	f3 cf       	rjmp	.-26     	; 0x614 <free+0x44>
 62e:	b3 83       	std	Z+3, r27	; 0x03
 630:	a2 83       	std	Z+2, r26	; 0x02
 632:	40 81       	ld	r20, Z
 634:	51 81       	ldd	r21, Z+1	; 0x01
 636:	84 0f       	add	r24, r20
 638:	95 1f       	adc	r25, r21
 63a:	8a 17       	cp	r24, r26
 63c:	9b 07       	cpc	r25, r27
 63e:	71 f4       	brne	.+28     	; 0x65c <free+0x8c>
 640:	8d 91       	ld	r24, X+
 642:	9c 91       	ld	r25, X
 644:	11 97       	sbiw	r26, 0x01	; 1
 646:	84 0f       	add	r24, r20
 648:	95 1f       	adc	r25, r21
 64a:	02 96       	adiw	r24, 0x02	; 2
 64c:	91 83       	std	Z+1, r25	; 0x01
 64e:	80 83       	st	Z, r24
 650:	12 96       	adiw	r26, 0x02	; 2
 652:	8d 91       	ld	r24, X+
 654:	9c 91       	ld	r25, X
 656:	13 97       	sbiw	r26, 0x03	; 3
 658:	93 83       	std	Z+3, r25	; 0x03
 65a:	82 83       	std	Z+2, r24	; 0x02
 65c:	21 15       	cp	r18, r1
 65e:	31 05       	cpc	r19, r1
 660:	29 f4       	brne	.+10     	; 0x66c <free+0x9c>
 662:	f0 93 21 01 	sts	0x0121, r31
 666:	e0 93 20 01 	sts	0x0120, r30
 66a:	3e c0       	rjmp	.+124    	; 0x6e8 <free+0x118>
 66c:	d9 01       	movw	r26, r18
 66e:	13 96       	adiw	r26, 0x03	; 3
 670:	fc 93       	st	X, r31
 672:	ee 93       	st	-X, r30
 674:	12 97       	sbiw	r26, 0x02	; 2
 676:	4d 91       	ld	r20, X+
 678:	5d 91       	ld	r21, X+
 67a:	a4 0f       	add	r26, r20
 67c:	b5 1f       	adc	r27, r21
 67e:	ea 17       	cp	r30, r26
 680:	fb 07       	cpc	r31, r27
 682:	79 f4       	brne	.+30     	; 0x6a2 <free+0xd2>
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	84 0f       	add	r24, r20
 68a:	95 1f       	adc	r25, r21
 68c:	02 96       	adiw	r24, 0x02	; 2
 68e:	d9 01       	movw	r26, r18
 690:	11 96       	adiw	r26, 0x01	; 1
 692:	9c 93       	st	X, r25
 694:	8e 93       	st	-X, r24
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	13 96       	adiw	r26, 0x03	; 3
 69c:	9c 93       	st	X, r25
 69e:	8e 93       	st	-X, r24
 6a0:	12 97       	sbiw	r26, 0x02	; 2
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	9b 81       	ldd	r25, Y+3	; 0x03
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <free+0xe4>
 6ae:	fe 01       	movw	r30, r28
 6b0:	ec 01       	movw	r28, r24
 6b2:	f9 cf       	rjmp	.-14     	; 0x6a6 <free+0xd6>
 6b4:	ce 01       	movw	r24, r28
 6b6:	02 96       	adiw	r24, 0x02	; 2
 6b8:	28 81       	ld	r18, Y
 6ba:	39 81       	ldd	r19, Y+1	; 0x01
 6bc:	82 0f       	add	r24, r18
 6be:	93 1f       	adc	r25, r19
 6c0:	20 91 1e 01 	lds	r18, 0x011E
 6c4:	30 91 1f 01 	lds	r19, 0x011F
 6c8:	28 17       	cp	r18, r24
 6ca:	39 07       	cpc	r19, r25
 6cc:	69 f4       	brne	.+26     	; 0x6e8 <free+0x118>
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	29 f4       	brne	.+10     	; 0x6dc <free+0x10c>
 6d2:	10 92 21 01 	sts	0x0121, r1
 6d6:	10 92 20 01 	sts	0x0120, r1
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <free+0x110>
 6dc:	13 82       	std	Z+3, r1	; 0x03
 6de:	12 82       	std	Z+2, r1	; 0x02
 6e0:	d0 93 1f 01 	sts	0x011F, r29
 6e4:	c0 93 1e 01 	sts	0x011E, r28
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <_exit>:
 6ee:	f8 94       	cli

000006f0 <__stop_program>:
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <__stop_program>
