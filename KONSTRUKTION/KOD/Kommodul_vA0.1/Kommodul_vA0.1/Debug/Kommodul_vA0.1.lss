
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080010a  0080010a  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000385  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001da  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000219  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__vector_19>
  4e:	00 00       	nop
  50:	92 c0       	rjmp	.+292    	; 0x176 <__vector_20>
  52:	00 00       	nop
  54:	e8 c0       	rjmp	.+464    	; 0x226 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bb d0       	rcall	.+374    	; 0x23a <main>
  c4:	e1 c0       	rjmp	.+450    	; 0x288 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:


// Transmit data via BT.
void BT_transmit(unsigned char outData)
{
	UDR0 = outData;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <__vector_19>:
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	0b b6       	in	r0, 0x3b	; 59
  e6:	0f 92       	push	r0
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	80 91 0a 01 	lds	r24, 0x010A
  f6:	90 91 0b 01 	lds	r25, 0x010B
  fa:	89 30       	cpi	r24, 0x09	; 9
  fc:	91 05       	cpc	r25, r1
  fe:	a4 f4       	brge	.+40     	; 0x128 <__vector_19+0x4e>
 100:	2e b5       	in	r18, 0x2e	; 46
 102:	fc 01       	movw	r30, r24
 104:	e2 5f       	subi	r30, 0xF2	; 242
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	20 83       	st	Z, r18
 10a:	fc 01       	movw	r30, r24
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	8e bd       	out	0x2e, r24	; 46
 114:	80 91 0a 01 	lds	r24, 0x010A
 118:	90 91 0b 01 	lds	r25, 0x010B
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 0b 01 	sts	0x010B, r25
 122:	80 93 0a 01 	sts	0x010A, r24
 126:	0f c0       	rjmp	.+30     	; 0x146 <__vector_19+0x6c>
 128:	09 97       	sbiw	r24, 0x09	; 9
 12a:	59 f4       	brne	.+22     	; 0x142 <__vector_19+0x68>
 12c:	8e b5       	in	r24, 0x2e	; 46
 12e:	80 93 17 01 	sts	0x0117, r24
 132:	80 91 09 01 	lds	r24, 0x0109
 136:	8e bd       	out	0x2e, r24	; 46
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 0a 01 	sts	0x010A, r1
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_19+0x6c>
 142:	85 e4       	ldi	r24, 0x45	; 69
 144:	8e bd       	out	0x2e, r24	; 46
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0b be       	out	0x3b, r0	; 59
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <BT_init>:
 15e:	10 92 c5 00 	sts	0x00C5, r1
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	80 93 c4 00 	sts	0x00C4, r24
 168:	88 ed       	ldi	r24, 0xD8	; 216
 16a:	80 93 c1 00 	sts	0x00C1, r24
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 c2 00 	sts	0x00C2, r24
 174:	08 95       	ret

00000176 <__vector_20>:
	// UCSR0B |= (1<<UDRIE0); // enable 'empty buffer interrupt'
}

// Receive complete - triggered by interrupt
ISR(USART0_RX_vect) 
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	0b b6       	in	r0, 0x3b	; 59
 182:	0f 92       	push	r0
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	if (posBuff == 0)
 1a0:	c0 91 0c 01 	lds	r28, 0x010C
 1a4:	d0 91 0d 01 	lds	r29, 0x010D
 1a8:	20 97       	sbiw	r28, 0x00	; 0
 1aa:	41 f4       	brne	.+16     	; 0x1bc <__vector_20+0x46>
	{
		memset(&inBT,' ',10);
 1ac:	4a e0       	ldi	r20, 0x0A	; 10
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	60 e2       	ldi	r22, 0x20	; 32
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	82 e2       	ldi	r24, 0x22	; 34
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	51 d0       	rcall	.+162    	; 0x25c <memset>
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <__vector_20+0x4c>
	}
	if (posBuff < BuffSize)
 1bc:	ca 30       	cpi	r28, 0x0A	; 10
 1be:	d1 05       	cpc	r29, r1
 1c0:	8c f4       	brge	.+34     	; 0x1e4 <__vector_20+0x6e>
	{
		inBT[posBuff] = UDR0; //Load bit 1-9.
 1c2:	e6 ec       	ldi	r30, 0xC6	; 198
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	ce 5d       	subi	r28, 0xDE	; 222
 1ca:	de 4f       	sbci	r29, 0xFE	; 254
 1cc:	88 83       	st	Y, r24


// Transmit data via BT.
void BT_transmit(unsigned char outData)
{
	UDR0 = outData;
 1ce:	80 83       	st	Z, r24
	}
	if (posBuff < BuffSize)
	{
		inBT[posBuff] = UDR0; //Load bit 1-9.
		BT_transmit(inBT[posBuff]);
		posBuff++;
 1d0:	80 91 0c 01 	lds	r24, 0x010C
 1d4:	90 91 0d 01 	lds	r25, 0x010D
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 0d 01 	sts	0x010D, r25
 1de:	80 93 0c 01 	sts	0x010C, r24
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <__vector_20+0x86>
	}
	else if (posBuff == BuffSize )
 1e4:	2a 97       	sbiw	r28, 0x0a	; 10
 1e6:	51 f4       	brne	.+20     	; 0x1fc <__vector_20+0x86>
	{
		inBT[posBuff] = UDR0; //Load 10th bit
 1e8:	e6 ec       	ldi	r30, 0xC6	; 198
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 93 2c 01 	sts	0x012C, r24


// Transmit data via BT.
void BT_transmit(unsigned char outData)
{
	UDR0 = outData;
 1f2:	80 83       	st	Z, r24
	}
	else if (posBuff == BuffSize )
	{
		inBT[posBuff] = UDR0; //Load 10th bit
		BT_transmit(inBT[posBuff]); // Send back incoming
		posBuff = 0;	
 1f4:	10 92 0d 01 	sts	0x010D, r1
 1f8:	10 92 0c 01 	sts	0x010C, r1
	}

}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0b be       	out	0x3b, r0	; 59
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_21>:


// Empty dataregister = send next character
ISR(USART0_UDRE_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
	//{
		//UDR0 = outBT[posBuff]; //Load 10th bit
		//posBuff = 0;
		//UCSR0B &= ~(1<<UDRIE0); // disable 'empty buffer interrupt'
	//}
}
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:

int main(void)
{
	sleep_enable();
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 240:	43 df       	rcall	.-378    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	85 b9       	out	0x05, r24	; 5
int main(void)
{
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 246:	45 df       	rcall	.-374    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 248:	8a df       	rcall	.-236    	; 0x15e <BT_init>
	sei();
 24a:	78 94       	sei
	while(1)
	{
		strncpy(outSPDR, inBT, BuffSize); //copy data from inBT to outbuffer (SLAVE)
 24c:	4a e0       	ldi	r20, 0x0A	; 10
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	62 e2       	ldi	r22, 0x22	; 34
 252:	71 e0       	ldi	r23, 0x01	; 1
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	08 d0       	rcall	.+16     	; 0x26a <strncpy>
 25a:	f8 cf       	rjmp	.-16     	; 0x24c <main+0x12>

0000025c <memset>:
 25c:	dc 01       	movw	r26, r24
 25e:	01 c0       	rjmp	.+2      	; 0x262 <memset+0x6>
 260:	6d 93       	st	X+, r22
 262:	41 50       	subi	r20, 0x01	; 1
 264:	50 40       	sbci	r21, 0x00	; 0
 266:	e0 f7       	brcc	.-8      	; 0x260 <memset+0x4>
 268:	08 95       	ret

0000026a <strncpy>:
 26a:	fb 01       	movw	r30, r22
 26c:	dc 01       	movw	r26, r24
 26e:	41 50       	subi	r20, 0x01	; 1
 270:	50 40       	sbci	r21, 0x00	; 0
 272:	48 f0       	brcs	.+18     	; 0x286 <strncpy+0x1c>
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	00 20       	and	r0, r0
 27a:	c9 f7       	brne	.-14     	; 0x26e <strncpy+0x4>
 27c:	01 c0       	rjmp	.+2      	; 0x280 <strncpy+0x16>
 27e:	1d 92       	st	X+, r1
 280:	41 50       	subi	r20, 0x01	; 1
 282:	50 40       	sbci	r21, 0x00	; 0
 284:	e0 f7       	brcc	.-8      	; 0x27e <strncpy+0x14>
 286:	08 95       	ret

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
