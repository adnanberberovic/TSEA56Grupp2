
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000196  00800104  00800104  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000451  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a7  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b1  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000029b  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__vector_19>
  4e:	00 00       	nop
  50:	ba c0       	rjmp	.+372    	; 0x1c6 <__vector_20>
  52:	00 00       	nop
  54:	ec c0       	rjmp	.+472    	; 0x22e <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 39       	cpi	r26, 0x9A	; 154
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f0 d0       	rcall	.+480    	; 0x2a4 <main>
  c4:	0f c1       	rjmp	.+542    	; 0x2e4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
}

void send_BT_buffer(char buffer[BuffSize] )
{
	strncpy(outBT, buffer, BuffSize); //Copy buffer to send to outBT
	UCSR0B &= ~(1<<UDRIE0);	//Enable UDRE interrupt flag -> send when empty dataregister
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <__vector_19>:
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	0b b6       	in	r0, 0x3b	; 59
  e6:	0f 92       	push	r0
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	80 91 08 01 	lds	r24, 0x0108
  f6:	90 91 09 01 	lds	r25, 0x0109
  fa:	83 36       	cpi	r24, 0x63	; 99
  fc:	91 05       	cpc	r25, r1
  fe:	a4 f4       	brge	.+40     	; 0x128 <__vector_19+0x4e>
 100:	2e b5       	in	r18, 0x2e	; 46
 102:	fc 01       	movw	r30, r24
 104:	e6 5f       	subi	r30, 0xF6	; 246
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	20 83       	st	Z, r18
 10a:	fc 01       	movw	r30, r24
 10c:	e2 59       	subi	r30, 0x92	; 146
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 81       	ld	r24, Z
 112:	8e bd       	out	0x2e, r24	; 46
 114:	80 91 08 01 	lds	r24, 0x0108
 118:	90 91 09 01 	lds	r25, 0x0109
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 09 01 	sts	0x0109, r25
 122:	80 93 08 01 	sts	0x0108, r24
 126:	10 c0       	rjmp	.+32     	; 0x148 <__vector_19+0x6e>
 128:	83 36       	cpi	r24, 0x63	; 99
 12a:	91 05       	cpc	r25, r1
 12c:	59 f4       	brne	.+22     	; 0x144 <__vector_19+0x6a>
 12e:	8e b5       	in	r24, 0x2e	; 46
 130:	80 93 6d 01 	sts	0x016D, r24
 134:	80 91 d1 01 	lds	r24, 0x01D1
 138:	8e bd       	out	0x2e, r24	; 46
 13a:	10 92 09 01 	sts	0x0109, r1
 13e:	10 92 08 01 	sts	0x0108, r1
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_19+0x6e>
 144:	85 e4       	ldi	r24, 0x45	; 69
 146:	8e bd       	out	0x2e, r24	; 46
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0b be       	out	0x3b, r0	; 59
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <BT_init>:
 160:	10 92 c5 00 	sts	0x00C5, r1
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	80 93 c4 00 	sts	0x00C4, r24
 16a:	88 ed       	ldi	r24, 0xD8	; 216
 16c:	80 93 c1 00 	sts	0x00C1, r24
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 c2 00 	sts	0x00C2, r24
 176:	08 95       	ret

00000178 <Write_Buffer>:
 178:	fa 01       	movw	r30, r20
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	23 36       	cpi	r18, 0x63	; 99
 180:	31 05       	cpc	r19, r1
 182:	11 f4       	brne	.+4      	; 0x188 <Write_Buffer+0x10>
 184:	11 82       	std	Z+1, r1	; 0x01
 186:	10 82       	st	Z, r1
 188:	20 81       	ld	r18, Z
 18a:	31 81       	ldd	r19, Z+1	; 0x01
 18c:	dc 01       	movw	r26, r24
 18e:	a2 0f       	add	r26, r18
 190:	b3 1f       	adc	r27, r19
 192:	6c 93       	st	X, r22
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <Read_Buffer>:
 1a0:	fb 01       	movw	r30, r22
 1a2:	20 81       	ld	r18, Z
 1a4:	31 81       	ldd	r19, Z+1	; 0x01
 1a6:	23 36       	cpi	r18, 0x63	; 99
 1a8:	31 05       	cpc	r19, r1
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <Read_Buffer+0x10>
 1ac:	11 82       	std	Z+1, r1	; 0x01
 1ae:	10 82       	st	Z, r1
 1b0:	20 81       	ld	r18, Z
 1b2:	31 81       	ldd	r19, Z+1	; 0x01
 1b4:	dc 01       	movw	r26, r24
 1b6:	a2 0f       	add	r26, r18
 1b8:	b3 1f       	adc	r27, r19
 1ba:	8c 91       	ld	r24, X
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	31 83       	std	Z+1, r19	; 0x01
 1c2:	20 83       	st	Z, r18
 1c4:	08 95       	ret

000001c6 <__vector_20>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
 1ec:	60 91 c6 00 	lds	r22, 0x00C6
 1f0:	40 91 02 01 	lds	r20, 0x0102
 1f4:	50 91 03 01 	lds	r21, 0x0103
 1f8:	86 e3       	ldi	r24, 0x36	; 54
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	bd df       	rcall	.-134    	; 0x178 <Write_Buffer>
 1fe:	e1 ec       	ldi	r30, 0xC1	; 193
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 62       	ori	r24, 0x20	; 32
 206:	80 83       	st	Z, r24
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_21>:
}

// Empty dataregister = send next character
ISR(USART0_UDRE_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	0b b6       	in	r0, 0x3b	; 59
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	if ((*readPos_BTout) == BuffSize) //Read entire buff and sent it
 254:	60 91 00 01 	lds	r22, 0x0100
 258:	70 91 01 01 	lds	r23, 0x0101
 25c:	fb 01       	movw	r30, r22
 25e:	80 81       	ld	r24, Z
 260:	91 81       	ldd	r25, Z+1	; 0x01
 262:	84 36       	cpi	r24, 0x64	; 100
 264:	91 05       	cpc	r25, r1
 266:	31 f4       	brne	.+12     	; 0x274 <__vector_21+0x46>
	{
		UCSR0B &= ~(1<<UDRIE0); //Disable UDRE interrupt, All data is sent. 
 268:	e1 ec       	ldi	r30, 0xC1	; 193
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8f 7d       	andi	r24, 0xDF	; 223
 270:	80 83       	st	Z, r24
 272:	05 c0       	rjmp	.+10     	; 0x27e <__vector_21+0x50>
	}
	else
	{
		UDR0 = Read_Buffer(outBT, readPos_BTout); //Send back the next value in out-buffer. 														
 274:	82 ed       	ldi	r24, 0xD2	; 210
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	93 df       	rcall	.-218    	; 0x1a0 <Read_Buffer>
 27a:	80 93 c6 00 	sts	0x00C6, r24
	}
		
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <main>:

int main(void)
{
	sleep_enable();
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 2aa:	0e df       	rcall	.-484    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 2ac:	80 e1       	ldi	r24, 0x10	; 16
 2ae:	85 b9       	out	0x05, r24	; 5
int main(void)
{
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 2b0:	10 df       	rcall	.-480    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 2b2:	56 df       	rcall	.-340    	; 0x160 <BT_init>
	sei();
 2b4:	78 94       	sei
	while(1)
	{
		strncpy(outSPDR, inBT, BuffSize); //copy data from inBT to outbuffer (SLAVE)
 2b6:	44 e6       	ldi	r20, 0x64	; 100
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	66 e3       	ldi	r22, 0x36	; 54
 2bc:	72 e0       	ldi	r23, 0x02	; 2
 2be:	8e e6       	ldi	r24, 0x6E	; 110
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	01 d0       	rcall	.+2      	; 0x2c6 <strncpy>
 2c4:	f8 cf       	rjmp	.-16     	; 0x2b6 <main+0x12>

000002c6 <strncpy>:
 2c6:	fb 01       	movw	r30, r22
 2c8:	dc 01       	movw	r26, r24
 2ca:	41 50       	subi	r20, 0x01	; 1
 2cc:	50 40       	sbci	r21, 0x00	; 0
 2ce:	48 f0       	brcs	.+18     	; 0x2e2 <strncpy+0x1c>
 2d0:	01 90       	ld	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	00 20       	and	r0, r0
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <strncpy+0x4>
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <strncpy+0x16>
 2da:	1d 92       	st	X+, r1
 2dc:	41 50       	subi	r20, 0x01	; 1
 2de:	50 40       	sbci	r21, 0x00	; 0
 2e0:	e0 f7       	brcc	.-8      	; 0x2da <strncpy+0x14>
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
