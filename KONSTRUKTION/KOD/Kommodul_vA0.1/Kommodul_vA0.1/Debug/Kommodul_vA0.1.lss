
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000063a  000006ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800142  00800142  00000710  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000909  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c8  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ac  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000790  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c1       	rjmp	.+646    	; 0x2d4 <__vector_19>
  4e:	00 00       	nop
  50:	af c0       	rjmp	.+350    	; 0x1b0 <__vector_20>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	41 d1       	rcall	.+642    	; 0x346 <main>
  c4:	b8 c2       	rjmp	.+1392   	; 0x636 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
	
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) & !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	91 f0       	breq	.+36     	; 0x124 <add_node+0x32>
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	21 15       	cp	r18, r1
 106:	31 05       	cpc	r19, r1
 108:	11 f0       	breq	.+4      	; 0x10e <add_node+0x1c>
 10a:	e9 01       	movw	r28, r18
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <add_node+0xe>
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	6a d1       	rcall	.+724    	; 0x3e8 <malloc>
 114:	9a 83       	std	Y+2, r25	; 0x02
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	10 83       	st	Z, r17
 11c:	e9 81       	ldd	r30, Y+1	; 0x01
 11e:	fa 81       	ldd	r31, Y+2	; 0x02
 120:	12 82       	std	Z+2, r1	; 0x02
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	08 95       	ret

0000012c <pop_node>:
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	e8 81       	ld	r30, Y
 13a:	f9 81       	ldd	r31, Y+1	; 0x01
 13c:	30 97       	sbiw	r30, 0x00	; 0
 13e:	41 f0       	breq	.+16     	; 0x150 <pop_node+0x24>
 140:	01 81       	ldd	r16, Z+1	; 0x01
 142:	12 81       	ldd	r17, Z+2	; 0x02
 144:	f0 80       	ld	r15, Z
 146:	cf 01       	movw	r24, r30
 148:	e7 d1       	rcall	.+974    	; 0x518 <free>
 14a:	19 83       	std	Y+1, r17	; 0x01
 14c:	08 83       	st	Y, r16
 14e:	01 c0       	rjmp	.+2      	; 0x152 <pop_node+0x26>
 150:	f1 2c       	mov	r15, r1
 152:	8f 2d       	mov	r24, r15
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	08 95       	ret

00000160 <flush_list>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	88 81       	ld	r24, Y
 168:	99 81       	ldd	r25, Y+1	; 0x01
 16a:	89 2b       	or	r24, r25
 16c:	31 f0       	breq	.+12     	; 0x17a <flush_list+0x1a>
 16e:	ce 01       	movw	r24, r28
 170:	dd df       	rcall	.-70     	; 0x12c <pop_node>
 172:	88 81       	ld	r24, Y
 174:	99 81       	ldd	r25, Y+1	; 0x01
 176:	89 2b       	or	r24, r25
 178:	d1 f7       	brne	.-12     	; 0x16e <flush_list+0xe>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <send_BT_buffer>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	fc 01       	movw	r30, r24
 186:	60 81       	ld	r22, Z
 188:	66 23       	and	r22, r22
 18a:	51 f0       	breq	.+20     	; 0x1a0 <send_BT_buffer+0x20>
 18c:	ec 01       	movw	r28, r24
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	80 91 44 01 	lds	r24, 0x0144
 194:	90 91 45 01 	lds	r25, 0x0145
 198:	ac df       	rcall	.-168    	; 0xf2 <add_node>
 19a:	69 91       	ld	r22, Y+
 19c:	61 11       	cpse	r22, r1
 19e:	f8 cf       	rjmp	.-16     	; 0x190 <send_BT_buffer+0x10>
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	80 83       	st	Z, r24
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <__vector_20>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	0b b6       	in	r0, 0x3b	; 59
 1bc:	0f 92       	push	r0
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	80 91 c6 00 	lds	r24, 0x00C6
 1da:	81 33       	cpi	r24, 0x31	; 49
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <__vector_20+0x36>
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	ce df       	rcall	.-100    	; 0x180 <send_BT_buffer>
 1e4:	0e c0       	rjmp	.+28     	; 0x202 <__vector_20+0x52>
 1e6:	82 33       	cpi	r24, 0x32	; 50
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <__vector_20+0x42>
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	c8 df       	rcall	.-112    	; 0x180 <send_BT_buffer>
 1f0:	08 c0       	rjmp	.+16     	; 0x202 <__vector_20+0x52>
 1f2:	83 33       	cpi	r24, 0x33	; 51
 1f4:	21 f4       	brne	.+8      	; 0x1fe <__vector_20+0x4e>
 1f6:	8a e1       	ldi	r24, 0x1A	; 26
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	c2 df       	rcall	.-124    	; 0x180 <send_BT_buffer>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__vector_20+0x52>
 1fe:	80 93 c6 00 	sts	0x00C6, r24
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0b be       	out	0x3b, r0	; 59
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_21>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
 24e:	80 91 44 01 	lds	r24, 0x0144
 252:	90 91 45 01 	lds	r25, 0x0145
 256:	89 2b       	or	r24, r25
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_21+0x3e>
 25a:	e1 ec       	ldi	r30, 0xC1	; 193
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	80 83       	st	Z, r24
 264:	05 c0       	rjmp	.+10     	; 0x270 <__vector_21+0x48>
 266:	84 e4       	ldi	r24, 0x44	; 68
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	60 df       	rcall	.-320    	; 0x12c <pop_node>
 26c:	80 93 c6 00 	sts	0x00C6, r24
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0b be       	out	0x3b, r0	; 59
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <SPI_send>:



void SPI_send(int tosend)
{
	add_node(head_SPIout, tosend); //Add node with tosend-value to desired list
 296:	68 2f       	mov	r22, r24
 298:	80 91 48 01 	lds	r24, 0x0148
 29c:	90 91 49 01 	lds	r25, 0x0149
 2a0:	28 cf       	rjmp	.-432    	; 0xf2 <add_node>
 2a2:	08 95       	ret

000002a4 <SPI_send_arr>:
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
	int i = 0;
	while(i < size)// +2 due to continu
 2ac:	16 16       	cp	r1, r22
 2ae:	17 06       	cpc	r1, r23
 2b0:	64 f4       	brge	.+24     	; 0x2ca <SPI_send_arr+0x26>
 2b2:	ec 01       	movw	r28, r24
 2b4:	8c 01       	movw	r16, r24
 2b6:	06 0f       	add	r16, r22
 2b8:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 2ba:	89 91       	ld	r24, Y+
 2bc:	99 27       	eor	r25, r25
 2be:	87 fd       	sbrc	r24, 7
 2c0:	90 95       	com	r25
 2c2:	e9 df       	rcall	.-46     	; 0x296 <SPI_send>
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)// +2 due to continu
 2c4:	c0 17       	cp	r28, r16
 2c6:	d1 07       	cpc	r29, r17
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <__vector_19>:

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	0b b6       	in	r0, 0x3b	; 59
 2e0:	0f 92       	push	r0
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	int data = (int)SPDR;
 2fa:	6e b5       	in	r22, 0x2e	; 46
	add_node(head_SPIin, data); // Add received data to in-queue
 2fc:	80 91 46 01 	lds	r24, 0x0146
 300:	90 91 47 01 	lds	r25, 0x0147
 304:	f6 de       	rcall	.-532    	; 0xf2 <add_node>
	if (head_SPIout == NULL)
 306:	80 91 48 01 	lds	r24, 0x0148
 30a:	90 91 49 01 	lds	r25, 0x0149
 30e:	89 2b       	or	r24, r25
 310:	19 f4       	brne	.+6      	; 0x318 <__vector_19+0x44>
	{
		int8_t stop_bit = -128; //0b10000000, cant be shown on lcd as -128 due to limits in print func.
		SPDR = stop_bit;
 312:	80 e8       	ldi	r24, 0x80	; 128
 314:	8e bd       	out	0x2e, r24	; 46
 316:	04 c0       	rjmp	.+8      	; 0x320 <__vector_19+0x4c>
	}
	else
	{
		SPDR = (int8_t)pop_node(&head_SPIout);
 318:	88 e4       	ldi	r24, 0x48	; 72
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	07 df       	rcall	.-498    	; 0x12c <pop_node>
 31e:	8e bd       	out	0x2e, r24	; 46
	}
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0b be       	out	0x3b, r0	; 59
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <main>:


int main(void)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	6d 97       	sbiw	r28, 0x1d	; 29
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61

	head_SPIout = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to send and alloc memory.
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	44 d0       	rcall	.+136    	; 0x3e8 <malloc>
 360:	90 93 49 01 	sts	0x0149, r25
 364:	80 93 48 01 	sts	0x0148, r24
	head_SPIout->next= NULL;
 368:	fc 01       	movw	r30, r24
 36a:	12 82       	std	Z+2, r1	; 0x02
 36c:	11 82       	std	Z+1, r1	; 0x01
	head_SPIout->val = 0;
 36e:	10 82       	st	Z, r1
	

	head_SPIin = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to receive and alloc memory.
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	39 d0       	rcall	.+114    	; 0x3e8 <malloc>
 376:	90 93 47 01 	sts	0x0147, r25
 37a:	80 93 46 01 	sts	0x0146, r24
	head_SPIin->next= NULL;
 37e:	fc 01       	movw	r30, r24
 380:	12 82       	std	Z+2, r1	; 0x02
 382:	11 82       	std	Z+1, r1	; 0x01
	head_SPIin->val = 0;
 384:	10 82       	st	Z, r1
	
	head_BTin = (buffer_ *)malloc(sizeof(buffer_));
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2e d0       	rcall	.+92     	; 0x3e8 <malloc>
 38c:	90 93 43 01 	sts	0x0143, r25
 390:	80 93 42 01 	sts	0x0142, r24
	head_BTin->next= NULL;
 394:	fc 01       	movw	r30, r24
 396:	12 82       	std	Z+2, r1	; 0x02
 398:	11 82       	std	Z+1, r1	; 0x01
	head_BTin->val = 0;
 39a:	10 82       	st	Z, r1
	head_BTout = (buffer_ *)malloc(sizeof(buffer_));
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	23 d0       	rcall	.+70     	; 0x3e8 <malloc>
 3a2:	90 93 45 01 	sts	0x0145, r25
 3a6:	80 93 44 01 	sts	0x0144, r24
	head_BTout->next= NULL;
 3aa:	fc 01       	movw	r30, r24
 3ac:	12 82       	std	Z+2, r1	; 0x02
 3ae:	11 82       	std	Z+1, r1	; 0x01
	head_BTout->val = 0;
 3b0:	10 82       	st	Z, r1
	
	
	sleep_enable();
 3b2:	83 b7       	in	r24, 0x33	; 51
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 3b8:	87 de       	rcall	.-754    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 3ba:	80 e1       	ldi	r24, 0x10	; 16
 3bc:	85 b9       	out	0x05, r24	; 5
	
	
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 3be:	89 de       	rcall	.-750    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 3c0:	8c de       	rcall	.-744    	; 0xda <BT_init>
	sei();
 3c2:	78 94       	sei
	//flush_list(&head_SPIout);
	//flush_list(&head_SPIin);
	int8_t array[] ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
 3c4:	8d e1       	ldi	r24, 0x1D	; 29
 3c6:	e4 e2       	ldi	r30, 0x24	; 36
 3c8:	f1 e0       	ldi	r31, 0x01	; 1
 3ca:	de 01       	movw	r26, r28
 3cc:	11 96       	adiw	r26, 0x01	; 1
 3ce:	01 90       	ld	r0, Z+
 3d0:	0d 92       	st	X+, r0
 3d2:	8a 95       	dec	r24
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x88>
	SPI_send_arr(array, (sizeof(array)/sizeof(array[0]))); // sizeof(array)/sizeof(element in array) = lenght of array
 3d6:	6d e1       	ldi	r22, 0x1D	; 29
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	62 df       	rcall	.-316    	; 0x2a4 <SPI_send_arr>
	while(1)
	{
		flush_list(&head_SPIin);
 3e0:	86 e4       	ldi	r24, 0x46	; 70
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	bd de       	rcall	.-646    	; 0x160 <flush_list>
 3e6:	fc cf       	rjmp	.-8      	; 0x3e0 <main+0x9a>

000003e8 <malloc>:
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	82 30       	cpi	r24, 0x02	; 2
 3ee:	91 05       	cpc	r25, r1
 3f0:	10 f4       	brcc	.+4      	; 0x3f6 <malloc+0xe>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	e0 91 4c 01 	lds	r30, 0x014C
 3fa:	f0 91 4d 01 	lds	r31, 0x014D
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	a0 e0       	ldi	r26, 0x00	; 0
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	30 97       	sbiw	r30, 0x00	; 0
 408:	39 f1       	breq	.+78     	; 0x458 <malloc+0x70>
 40a:	40 81       	ld	r20, Z
 40c:	51 81       	ldd	r21, Z+1	; 0x01
 40e:	48 17       	cp	r20, r24
 410:	59 07       	cpc	r21, r25
 412:	b8 f0       	brcs	.+46     	; 0x442 <malloc+0x5a>
 414:	48 17       	cp	r20, r24
 416:	59 07       	cpc	r21, r25
 418:	71 f4       	brne	.+28     	; 0x436 <malloc+0x4e>
 41a:	82 81       	ldd	r24, Z+2	; 0x02
 41c:	93 81       	ldd	r25, Z+3	; 0x03
 41e:	10 97       	sbiw	r26, 0x00	; 0
 420:	29 f0       	breq	.+10     	; 0x42c <malloc+0x44>
 422:	13 96       	adiw	r26, 0x03	; 3
 424:	9c 93       	st	X, r25
 426:	8e 93       	st	-X, r24
 428:	12 97       	sbiw	r26, 0x02	; 2
 42a:	2c c0       	rjmp	.+88     	; 0x484 <malloc+0x9c>
 42c:	90 93 4d 01 	sts	0x014D, r25
 430:	80 93 4c 01 	sts	0x014C, r24
 434:	27 c0       	rjmp	.+78     	; 0x484 <malloc+0x9c>
 436:	21 15       	cp	r18, r1
 438:	31 05       	cpc	r19, r1
 43a:	31 f0       	breq	.+12     	; 0x448 <malloc+0x60>
 43c:	42 17       	cp	r20, r18
 43e:	53 07       	cpc	r21, r19
 440:	18 f0       	brcs	.+6      	; 0x448 <malloc+0x60>
 442:	a9 01       	movw	r20, r18
 444:	db 01       	movw	r26, r22
 446:	01 c0       	rjmp	.+2      	; 0x44a <malloc+0x62>
 448:	ef 01       	movw	r28, r30
 44a:	9a 01       	movw	r18, r20
 44c:	bd 01       	movw	r22, r26
 44e:	df 01       	movw	r26, r30
 450:	02 80       	ldd	r0, Z+2	; 0x02
 452:	f3 81       	ldd	r31, Z+3	; 0x03
 454:	e0 2d       	mov	r30, r0
 456:	d7 cf       	rjmp	.-82     	; 0x406 <malloc+0x1e>
 458:	21 15       	cp	r18, r1
 45a:	31 05       	cpc	r19, r1
 45c:	f9 f0       	breq	.+62     	; 0x49c <malloc+0xb4>
 45e:	28 1b       	sub	r18, r24
 460:	39 0b       	sbc	r19, r25
 462:	24 30       	cpi	r18, 0x04	; 4
 464:	31 05       	cpc	r19, r1
 466:	80 f4       	brcc	.+32     	; 0x488 <malloc+0xa0>
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	9b 81       	ldd	r25, Y+3	; 0x03
 46c:	61 15       	cp	r22, r1
 46e:	71 05       	cpc	r23, r1
 470:	21 f0       	breq	.+8      	; 0x47a <malloc+0x92>
 472:	fb 01       	movw	r30, r22
 474:	93 83       	std	Z+3, r25	; 0x03
 476:	82 83       	std	Z+2, r24	; 0x02
 478:	04 c0       	rjmp	.+8      	; 0x482 <malloc+0x9a>
 47a:	90 93 4d 01 	sts	0x014D, r25
 47e:	80 93 4c 01 	sts	0x014C, r24
 482:	fe 01       	movw	r30, r28
 484:	32 96       	adiw	r30, 0x02	; 2
 486:	44 c0       	rjmp	.+136    	; 0x510 <malloc+0x128>
 488:	fe 01       	movw	r30, r28
 48a:	e2 0f       	add	r30, r18
 48c:	f3 1f       	adc	r31, r19
 48e:	81 93       	st	Z+, r24
 490:	91 93       	st	Z+, r25
 492:	22 50       	subi	r18, 0x02	; 2
 494:	31 09       	sbc	r19, r1
 496:	39 83       	std	Y+1, r19	; 0x01
 498:	28 83       	st	Y, r18
 49a:	3a c0       	rjmp	.+116    	; 0x510 <malloc+0x128>
 49c:	20 91 4a 01 	lds	r18, 0x014A
 4a0:	30 91 4b 01 	lds	r19, 0x014B
 4a4:	23 2b       	or	r18, r19
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <malloc+0xd0>
 4a8:	20 91 02 01 	lds	r18, 0x0102
 4ac:	30 91 03 01 	lds	r19, 0x0103
 4b0:	30 93 4b 01 	sts	0x014B, r19
 4b4:	20 93 4a 01 	sts	0x014A, r18
 4b8:	20 91 00 01 	lds	r18, 0x0100
 4bc:	30 91 01 01 	lds	r19, 0x0101
 4c0:	21 15       	cp	r18, r1
 4c2:	31 05       	cpc	r19, r1
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <malloc+0xee>
 4c6:	2d b7       	in	r18, 0x3d	; 61
 4c8:	3e b7       	in	r19, 0x3e	; 62
 4ca:	40 91 04 01 	lds	r20, 0x0104
 4ce:	50 91 05 01 	lds	r21, 0x0105
 4d2:	24 1b       	sub	r18, r20
 4d4:	35 0b       	sbc	r19, r21
 4d6:	e0 91 4a 01 	lds	r30, 0x014A
 4da:	f0 91 4b 01 	lds	r31, 0x014B
 4de:	e2 17       	cp	r30, r18
 4e0:	f3 07       	cpc	r31, r19
 4e2:	a0 f4       	brcc	.+40     	; 0x50c <malloc+0x124>
 4e4:	2e 1b       	sub	r18, r30
 4e6:	3f 0b       	sbc	r19, r31
 4e8:	28 17       	cp	r18, r24
 4ea:	39 07       	cpc	r19, r25
 4ec:	78 f0       	brcs	.+30     	; 0x50c <malloc+0x124>
 4ee:	ac 01       	movw	r20, r24
 4f0:	4e 5f       	subi	r20, 0xFE	; 254
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	24 17       	cp	r18, r20
 4f6:	35 07       	cpc	r19, r21
 4f8:	48 f0       	brcs	.+18     	; 0x50c <malloc+0x124>
 4fa:	4e 0f       	add	r20, r30
 4fc:	5f 1f       	adc	r21, r31
 4fe:	50 93 4b 01 	sts	0x014B, r21
 502:	40 93 4a 01 	sts	0x014A, r20
 506:	81 93       	st	Z+, r24
 508:	91 93       	st	Z+, r25
 50a:	02 c0       	rjmp	.+4      	; 0x510 <malloc+0x128>
 50c:	e0 e0       	ldi	r30, 0x00	; 0
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	cf 01       	movw	r24, r30
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <free>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	09 f4       	brne	.+2      	; 0x522 <free+0xa>
 520:	87 c0       	rjmp	.+270    	; 0x630 <free+0x118>
 522:	fc 01       	movw	r30, r24
 524:	32 97       	sbiw	r30, 0x02	; 2
 526:	13 82       	std	Z+3, r1	; 0x03
 528:	12 82       	std	Z+2, r1	; 0x02
 52a:	c0 91 4c 01 	lds	r28, 0x014C
 52e:	d0 91 4d 01 	lds	r29, 0x014D
 532:	20 97       	sbiw	r28, 0x00	; 0
 534:	81 f4       	brne	.+32     	; 0x556 <free+0x3e>
 536:	20 81       	ld	r18, Z
 538:	31 81       	ldd	r19, Z+1	; 0x01
 53a:	28 0f       	add	r18, r24
 53c:	39 1f       	adc	r19, r25
 53e:	80 91 4a 01 	lds	r24, 0x014A
 542:	90 91 4b 01 	lds	r25, 0x014B
 546:	82 17       	cp	r24, r18
 548:	93 07       	cpc	r25, r19
 54a:	79 f5       	brne	.+94     	; 0x5aa <free+0x92>
 54c:	f0 93 4b 01 	sts	0x014B, r31
 550:	e0 93 4a 01 	sts	0x014A, r30
 554:	6d c0       	rjmp	.+218    	; 0x630 <free+0x118>
 556:	de 01       	movw	r26, r28
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	ae 17       	cp	r26, r30
 55e:	bf 07       	cpc	r27, r31
 560:	50 f4       	brcc	.+20     	; 0x576 <free+0x5e>
 562:	12 96       	adiw	r26, 0x02	; 2
 564:	4d 91       	ld	r20, X+
 566:	5c 91       	ld	r21, X
 568:	13 97       	sbiw	r26, 0x03	; 3
 56a:	9d 01       	movw	r18, r26
 56c:	41 15       	cp	r20, r1
 56e:	51 05       	cpc	r21, r1
 570:	09 f1       	breq	.+66     	; 0x5b4 <free+0x9c>
 572:	da 01       	movw	r26, r20
 574:	f3 cf       	rjmp	.-26     	; 0x55c <free+0x44>
 576:	b3 83       	std	Z+3, r27	; 0x03
 578:	a2 83       	std	Z+2, r26	; 0x02
 57a:	40 81       	ld	r20, Z
 57c:	51 81       	ldd	r21, Z+1	; 0x01
 57e:	84 0f       	add	r24, r20
 580:	95 1f       	adc	r25, r21
 582:	8a 17       	cp	r24, r26
 584:	9b 07       	cpc	r25, r27
 586:	71 f4       	brne	.+28     	; 0x5a4 <free+0x8c>
 588:	8d 91       	ld	r24, X+
 58a:	9c 91       	ld	r25, X
 58c:	11 97       	sbiw	r26, 0x01	; 1
 58e:	84 0f       	add	r24, r20
 590:	95 1f       	adc	r25, r21
 592:	02 96       	adiw	r24, 0x02	; 2
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	80 83       	st	Z, r24
 598:	12 96       	adiw	r26, 0x02	; 2
 59a:	8d 91       	ld	r24, X+
 59c:	9c 91       	ld	r25, X
 59e:	13 97       	sbiw	r26, 0x03	; 3
 5a0:	93 83       	std	Z+3, r25	; 0x03
 5a2:	82 83       	std	Z+2, r24	; 0x02
 5a4:	21 15       	cp	r18, r1
 5a6:	31 05       	cpc	r19, r1
 5a8:	29 f4       	brne	.+10     	; 0x5b4 <free+0x9c>
 5aa:	f0 93 4d 01 	sts	0x014D, r31
 5ae:	e0 93 4c 01 	sts	0x014C, r30
 5b2:	3e c0       	rjmp	.+124    	; 0x630 <free+0x118>
 5b4:	d9 01       	movw	r26, r18
 5b6:	13 96       	adiw	r26, 0x03	; 3
 5b8:	fc 93       	st	X, r31
 5ba:	ee 93       	st	-X, r30
 5bc:	12 97       	sbiw	r26, 0x02	; 2
 5be:	4d 91       	ld	r20, X+
 5c0:	5d 91       	ld	r21, X+
 5c2:	a4 0f       	add	r26, r20
 5c4:	b5 1f       	adc	r27, r21
 5c6:	ea 17       	cp	r30, r26
 5c8:	fb 07       	cpc	r31, r27
 5ca:	79 f4       	brne	.+30     	; 0x5ea <free+0xd2>
 5cc:	80 81       	ld	r24, Z
 5ce:	91 81       	ldd	r25, Z+1	; 0x01
 5d0:	84 0f       	add	r24, r20
 5d2:	95 1f       	adc	r25, r21
 5d4:	02 96       	adiw	r24, 0x02	; 2
 5d6:	d9 01       	movw	r26, r18
 5d8:	11 96       	adiw	r26, 0x01	; 1
 5da:	9c 93       	st	X, r25
 5dc:	8e 93       	st	-X, r24
 5de:	82 81       	ldd	r24, Z+2	; 0x02
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	13 96       	adiw	r26, 0x03	; 3
 5e4:	9c 93       	st	X, r25
 5e6:	8e 93       	st	-X, r24
 5e8:	12 97       	sbiw	r26, 0x02	; 2
 5ea:	e0 e0       	ldi	r30, 0x00	; 0
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	9b 81       	ldd	r25, Y+3	; 0x03
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	19 f0       	breq	.+6      	; 0x5fc <free+0xe4>
 5f6:	fe 01       	movw	r30, r28
 5f8:	ec 01       	movw	r28, r24
 5fa:	f9 cf       	rjmp	.-14     	; 0x5ee <free+0xd6>
 5fc:	ce 01       	movw	r24, r28
 5fe:	02 96       	adiw	r24, 0x02	; 2
 600:	28 81       	ld	r18, Y
 602:	39 81       	ldd	r19, Y+1	; 0x01
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	20 91 4a 01 	lds	r18, 0x014A
 60c:	30 91 4b 01 	lds	r19, 0x014B
 610:	28 17       	cp	r18, r24
 612:	39 07       	cpc	r19, r25
 614:	69 f4       	brne	.+26     	; 0x630 <free+0x118>
 616:	30 97       	sbiw	r30, 0x00	; 0
 618:	29 f4       	brne	.+10     	; 0x624 <free+0x10c>
 61a:	10 92 4d 01 	sts	0x014D, r1
 61e:	10 92 4c 01 	sts	0x014C, r1
 622:	02 c0       	rjmp	.+4      	; 0x628 <free+0x110>
 624:	13 82       	std	Z+3, r1	; 0x03
 626:	12 82       	std	Z+2, r1	; 0x02
 628:	d0 93 4b 01 	sts	0x014B, r29
 62c:	c0 93 4a 01 	sts	0x014A, r28
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
