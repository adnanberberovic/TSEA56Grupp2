
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000264  0080010a  0080010a  000006b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000815  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028f  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b8  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c5  00000000  00000000  00001cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c1       	rjmp	.+624    	; 0x2be <__vector_19>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__vector_20>
  52:	00 00       	nop
  54:	b2 c0       	rjmp	.+356    	; 0x1ba <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 36       	cpi	r26, 0x6E	; 110
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d1       	rcall	.+622    	; 0x332 <main>
  c4:	a4 c2       	rjmp	.+1352   	; 0x60e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
{
	while(*lst_head != NULL)
	{
		pop_node(lst_head);
	}
}
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <send_BT_buffer>:
  f2:	44 e6       	ldi	r20, 0x64	; 100
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	bc 01       	movw	r22, r24
  f8:	8a ed       	ldi	r24, 0xDA	; 218
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	79 d2       	rcall	.+1266   	; 0x5f0 <strncpy>
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Write_Buffer>:
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	8c 01       	movw	r16, r24
 116:	f6 2e       	mov	r15, r22
 118:	ea 01       	movw	r28, r20
 11a:	88 81       	ld	r24, Y
 11c:	82 36       	cpi	r24, 0x62	; 98
 11e:	21 f4       	brne	.+8      	; 0x128 <Write_Buffer+0x1e>
 120:	18 82       	st	Y, r1
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	e5 df       	rcall	.-54     	; 0xf2 <send_BT_buffer>
 128:	88 81       	ld	r24, Y
 12a:	f8 01       	movw	r30, r16
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	f0 82       	st	Z, r15
 132:	88 81       	ld	r24, Y
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	88 83       	st	Y, r24
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	08 95       	ret

00000144 <Read_Buffer>:
 144:	fb 01       	movw	r30, r22
 146:	20 81       	ld	r18, Z
 148:	82 0f       	add	r24, r18
 14a:	91 1d       	adc	r25, r1
 14c:	dc 01       	movw	r26, r24
 14e:	8c 91       	ld	r24, X
 150:	90 81       	ld	r25, Z
 152:	9f 5f       	subi	r25, 0xFF	; 255
 154:	90 83       	st	Z, r25
 156:	08 95       	ret

00000158 <__vector_20>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	10 92 0f 01 	sts	0x010F, r1
 182:	60 91 c6 00 	lds	r22, 0x00C6
 186:	40 91 08 01 	lds	r20, 0x0108
 18a:	50 91 09 01 	lds	r21, 0x0109
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	bb df       	rcall	.-138    	; 0x10a <Write_Buffer>
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_21>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	0b b6       	in	r0, 0x3b	; 59
 1c6:	0f 92       	push	r0
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	e0 91 06 01 	lds	r30, 0x0106
 1e4:	f0 91 07 01 	lds	r31, 0x0107
 1e8:	80 81       	ld	r24, Z
 1ea:	84 36       	cpi	r24, 0x64	; 100
 1ec:	51 f4       	brne	.+20     	; 0x202 <__vector_21+0x48>
 1ee:	10 82       	st	Z, r1
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 0e 01 	sts	0x010E, r24
 1f6:	e1 ec       	ldi	r30, 0xC1	; 193
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	80 83       	st	Z, r24
 200:	08 c0       	rjmp	.+16     	; 0x212 <__vector_21+0x58>
 202:	10 92 0e 01 	sts	0x010E, r1
 206:	bf 01       	movw	r22, r30
 208:	8a ed       	ldi	r24, 0xDA	; 218
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9b df       	rcall	.-202    	; 0x144 <Read_Buffer>
 20e:	80 93 c6 00 	sts	0x00C6, r24
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <add_node>:
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	8b 01       	movw	r16, r22
 244:	2a 81       	ldd	r18, Y+2	; 0x02
 246:	3b 81       	ldd	r19, Y+3	; 0x03
 248:	21 15       	cp	r18, r1
 24a:	31 05       	cpc	r19, r1
 24c:	11 f0       	breq	.+4      	; 0x252 <add_node+0x1a>
 24e:	e9 01       	movw	r28, r18
 250:	f9 cf       	rjmp	.-14     	; 0x244 <add_node+0xc>
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	a5 d0       	rcall	.+330    	; 0x3a2 <malloc>
 258:	9b 83       	std	Y+3, r25	; 0x03
 25a:	8a 83       	std	Y+2, r24	; 0x02
 25c:	fc 01       	movw	r30, r24
 25e:	11 83       	std	Z+1, r17	; 0x01
 260:	00 83       	st	Z, r16
 262:	ea 81       	ldd	r30, Y+2	; 0x02
 264:	fb 81       	ldd	r31, Y+3	; 0x03
 266:	13 82       	std	Z+3, r1	; 0x03
 268:	12 82       	std	Z+2, r1	; 0x02
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <pop_node>:
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
 282:	e8 81       	ld	r30, Y
 284:	f9 81       	ldd	r31, Y+1	; 0x01
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	49 f0       	breq	.+18     	; 0x29c <pop_node+0x28>
 28a:	e2 80       	ldd	r14, Z+2	; 0x02
 28c:	f3 80       	ldd	r15, Z+3	; 0x03
 28e:	00 81       	ld	r16, Z
 290:	11 81       	ldd	r17, Z+1	; 0x01
 292:	cf 01       	movw	r24, r30
 294:	1e d1       	rcall	.+572    	; 0x4d2 <free>
 296:	f9 82       	std	Y+1, r15	; 0x01
 298:	e8 82       	st	Y, r14
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <pop_node+0x2c>
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	c8 01       	movw	r24, r16
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <SPI_send>:

void SPI_send(int tosend)
{
	add_node(head_SPIout, tosend); //Add node with tosend-value to desired list
 2b0:	bc 01       	movw	r22, r24
 2b2:	80 91 0c 01 	lds	r24, 0x010C
 2b6:	90 91 0d 01 	lds	r25, 0x010D
 2ba:	be cf       	rjmp	.-132    	; 0x238 <add_node>
 2bc:	08 95       	ret

000002be <__vector_19>:
}

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	int data = (int)SPDR;
 2e4:	6e b5       	in	r22, 0x2e	; 46
 2e6:	70 e0       	ldi	r23, 0x00	; 0
	add_node(head_SPIin, data); // Add received data to in-queue
 2e8:	80 91 0a 01 	lds	r24, 0x010A
 2ec:	90 91 0b 01 	lds	r25, 0x010B
 2f0:	a3 df       	rcall	.-186    	; 0x238 <add_node>
	if (head_SPIout == NULL)
 2f2:	80 91 0c 01 	lds	r24, 0x010C
 2f6:	90 91 0d 01 	lds	r25, 0x010D
 2fa:	89 2b       	or	r24, r25
 2fc:	19 f4       	brne	.+6      	; 0x304 <__vector_19+0x46>
	{
		SPDR = '-';
 2fe:	8d e2       	ldi	r24, 0x2D	; 45
 300:	8e bd       	out	0x2e, r24	; 46
 302:	04 c0       	rjmp	.+8      	; 0x30c <__vector_19+0x4e>
	}
	else
	{
		SPDR = (uint8_t)pop_node(&head_SPIout);
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	b5 df       	rcall	.-150    	; 0x274 <pop_node>
 30a:	8e bd       	out	0x2e, r24	; 46
	//}
	//else 
	//{
		//SPDR = '-'; //Return blank.
	//}
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0b be       	out	0x3b, r0	; 59
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <main>:


int main(void)
{
	
	head_SPIout = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to send and alloc memory.
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	35 d0       	rcall	.+106    	; 0x3a2 <malloc>
 338:	90 93 0d 01 	sts	0x010D, r25
 33c:	80 93 0c 01 	sts	0x010C, r24
	head_SPIout->next= NULL;
 340:	fc 01       	movw	r30, r24
 342:	13 82       	std	Z+3, r1	; 0x03
 344:	12 82       	std	Z+2, r1	; 0x02
	head_SPIout->val = 0;
 346:	11 82       	std	Z+1, r1	; 0x01
 348:	10 82       	st	Z, r1
	

	head_SPIin = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to receive and alloc memory.
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	29 d0       	rcall	.+82     	; 0x3a2 <malloc>
 350:	90 93 0b 01 	sts	0x010B, r25
 354:	80 93 0a 01 	sts	0x010A, r24
	head_SPIin->next= NULL;
 358:	fc 01       	movw	r30, r24
 35a:	13 82       	std	Z+3, r1	; 0x03
 35c:	12 82       	std	Z+2, r1	; 0x02
	head_SPIin->val = 0;
 35e:	11 82       	std	Z+1, r1	; 0x01
 360:	10 82       	st	Z, r1
	
	sleep_enable();
 362:	83 b7       	in	r24, 0x33	; 51
 364:	81 60       	ori	r24, 0x01	; 1
 366:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 368:	af de       	rcall	.-674    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 36a:	80 e1       	ldi	r24, 0x10	; 16
 36c:	85 b9       	out	0x05, r24	; 5
	head_SPIin->val = 0;
	
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 36e:	b1 de       	rcall	.-670    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 370:	b4 de       	rcall	.-664    	; 0xda <BT_init>
	sei();
 372:	78 94       	sei
	//char testbuffer2_[] = " 9/11 is a lie. ";
	while(1)
	{
		for (int i = 0; i<10; i++)
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	00 e0       	ldi	r16, 0x00	; 0
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	03 c0       	rjmp	.+6      	; 0x384 <main+0x52>
		{
			SPI_send(i);
 37e:	ce 01       	movw	r24, r28
 380:	97 df       	rcall	.-210    	; 0x2b0 <SPI_send>
	BT_init();
	sei();
	//char testbuffer2_[] = " 9/11 is a lie. ";
	while(1)
	{
		for (int i = 0; i<10; i++)
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	ca 30       	cpi	r28, 0x0A	; 10
 386:	d1 05       	cpc	r29, r1
 388:	d4 f3       	brlt	.-12     	; 0x37e <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	ff e7       	ldi	r31, 0x7F	; 127
 38c:	24 e8       	ldi	r18, 0x84	; 132
 38e:	8e e1       	ldi	r24, 0x1E	; 30
 390:	f1 50       	subi	r31, 0x01	; 1
 392:	20 40       	sbci	r18, 0x00	; 0
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x5e>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x68>
 39a:	00 00       	nop
 39c:	c0 2f       	mov	r28, r16
 39e:	d1 2f       	mov	r29, r17
 3a0:	f1 cf       	rjmp	.-30     	; 0x384 <main+0x52>

000003a2 <malloc>:
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	91 05       	cpc	r25, r1
 3aa:	10 f4       	brcc	.+4      	; 0x3b0 <malloc+0xe>
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	e0 91 6c 03 	lds	r30, 0x036C
 3b4:	f0 91 6d 03 	lds	r31, 0x036D
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a0 e0       	ldi	r26, 0x00	; 0
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	30 97       	sbiw	r30, 0x00	; 0
 3c2:	39 f1       	breq	.+78     	; 0x412 <malloc+0x70>
 3c4:	40 81       	ld	r20, Z
 3c6:	51 81       	ldd	r21, Z+1	; 0x01
 3c8:	48 17       	cp	r20, r24
 3ca:	59 07       	cpc	r21, r25
 3cc:	b8 f0       	brcs	.+46     	; 0x3fc <malloc+0x5a>
 3ce:	48 17       	cp	r20, r24
 3d0:	59 07       	cpc	r21, r25
 3d2:	71 f4       	brne	.+28     	; 0x3f0 <malloc+0x4e>
 3d4:	82 81       	ldd	r24, Z+2	; 0x02
 3d6:	93 81       	ldd	r25, Z+3	; 0x03
 3d8:	10 97       	sbiw	r26, 0x00	; 0
 3da:	29 f0       	breq	.+10     	; 0x3e6 <malloc+0x44>
 3dc:	13 96       	adiw	r26, 0x03	; 3
 3de:	9c 93       	st	X, r25
 3e0:	8e 93       	st	-X, r24
 3e2:	12 97       	sbiw	r26, 0x02	; 2
 3e4:	2c c0       	rjmp	.+88     	; 0x43e <malloc+0x9c>
 3e6:	90 93 6d 03 	sts	0x036D, r25
 3ea:	80 93 6c 03 	sts	0x036C, r24
 3ee:	27 c0       	rjmp	.+78     	; 0x43e <malloc+0x9c>
 3f0:	21 15       	cp	r18, r1
 3f2:	31 05       	cpc	r19, r1
 3f4:	31 f0       	breq	.+12     	; 0x402 <malloc+0x60>
 3f6:	42 17       	cp	r20, r18
 3f8:	53 07       	cpc	r21, r19
 3fa:	18 f0       	brcs	.+6      	; 0x402 <malloc+0x60>
 3fc:	a9 01       	movw	r20, r18
 3fe:	db 01       	movw	r26, r22
 400:	01 c0       	rjmp	.+2      	; 0x404 <malloc+0x62>
 402:	ef 01       	movw	r28, r30
 404:	9a 01       	movw	r18, r20
 406:	bd 01       	movw	r22, r26
 408:	df 01       	movw	r26, r30
 40a:	02 80       	ldd	r0, Z+2	; 0x02
 40c:	f3 81       	ldd	r31, Z+3	; 0x03
 40e:	e0 2d       	mov	r30, r0
 410:	d7 cf       	rjmp	.-82     	; 0x3c0 <malloc+0x1e>
 412:	21 15       	cp	r18, r1
 414:	31 05       	cpc	r19, r1
 416:	f9 f0       	breq	.+62     	; 0x456 <malloc+0xb4>
 418:	28 1b       	sub	r18, r24
 41a:	39 0b       	sbc	r19, r25
 41c:	24 30       	cpi	r18, 0x04	; 4
 41e:	31 05       	cpc	r19, r1
 420:	80 f4       	brcc	.+32     	; 0x442 <malloc+0xa0>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	61 15       	cp	r22, r1
 428:	71 05       	cpc	r23, r1
 42a:	21 f0       	breq	.+8      	; 0x434 <malloc+0x92>
 42c:	fb 01       	movw	r30, r22
 42e:	93 83       	std	Z+3, r25	; 0x03
 430:	82 83       	std	Z+2, r24	; 0x02
 432:	04 c0       	rjmp	.+8      	; 0x43c <malloc+0x9a>
 434:	90 93 6d 03 	sts	0x036D, r25
 438:	80 93 6c 03 	sts	0x036C, r24
 43c:	fe 01       	movw	r30, r28
 43e:	32 96       	adiw	r30, 0x02	; 2
 440:	44 c0       	rjmp	.+136    	; 0x4ca <malloc+0x128>
 442:	fe 01       	movw	r30, r28
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	81 93       	st	Z+, r24
 44a:	91 93       	st	Z+, r25
 44c:	22 50       	subi	r18, 0x02	; 2
 44e:	31 09       	sbc	r19, r1
 450:	39 83       	std	Y+1, r19	; 0x01
 452:	28 83       	st	Y, r18
 454:	3a c0       	rjmp	.+116    	; 0x4ca <malloc+0x128>
 456:	20 91 6a 03 	lds	r18, 0x036A
 45a:	30 91 6b 03 	lds	r19, 0x036B
 45e:	23 2b       	or	r18, r19
 460:	41 f4       	brne	.+16     	; 0x472 <malloc+0xd0>
 462:	20 91 02 01 	lds	r18, 0x0102
 466:	30 91 03 01 	lds	r19, 0x0103
 46a:	30 93 6b 03 	sts	0x036B, r19
 46e:	20 93 6a 03 	sts	0x036A, r18
 472:	20 91 00 01 	lds	r18, 0x0100
 476:	30 91 01 01 	lds	r19, 0x0101
 47a:	21 15       	cp	r18, r1
 47c:	31 05       	cpc	r19, r1
 47e:	41 f4       	brne	.+16     	; 0x490 <malloc+0xee>
 480:	2d b7       	in	r18, 0x3d	; 61
 482:	3e b7       	in	r19, 0x3e	; 62
 484:	40 91 04 01 	lds	r20, 0x0104
 488:	50 91 05 01 	lds	r21, 0x0105
 48c:	24 1b       	sub	r18, r20
 48e:	35 0b       	sbc	r19, r21
 490:	e0 91 6a 03 	lds	r30, 0x036A
 494:	f0 91 6b 03 	lds	r31, 0x036B
 498:	e2 17       	cp	r30, r18
 49a:	f3 07       	cpc	r31, r19
 49c:	a0 f4       	brcc	.+40     	; 0x4c6 <malloc+0x124>
 49e:	2e 1b       	sub	r18, r30
 4a0:	3f 0b       	sbc	r19, r31
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	78 f0       	brcs	.+30     	; 0x4c6 <malloc+0x124>
 4a8:	ac 01       	movw	r20, r24
 4aa:	4e 5f       	subi	r20, 0xFE	; 254
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	24 17       	cp	r18, r20
 4b0:	35 07       	cpc	r19, r21
 4b2:	48 f0       	brcs	.+18     	; 0x4c6 <malloc+0x124>
 4b4:	4e 0f       	add	r20, r30
 4b6:	5f 1f       	adc	r21, r31
 4b8:	50 93 6b 03 	sts	0x036B, r21
 4bc:	40 93 6a 03 	sts	0x036A, r20
 4c0:	81 93       	st	Z+, r24
 4c2:	91 93       	st	Z+, r25
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <malloc+0x128>
 4c6:	e0 e0       	ldi	r30, 0x00	; 0
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	cf 01       	movw	r24, r30
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <free>:
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f4       	brne	.+2      	; 0x4dc <free+0xa>
 4da:	87 c0       	rjmp	.+270    	; 0x5ea <free+0x118>
 4dc:	fc 01       	movw	r30, r24
 4de:	32 97       	sbiw	r30, 0x02	; 2
 4e0:	13 82       	std	Z+3, r1	; 0x03
 4e2:	12 82       	std	Z+2, r1	; 0x02
 4e4:	c0 91 6c 03 	lds	r28, 0x036C
 4e8:	d0 91 6d 03 	lds	r29, 0x036D
 4ec:	20 97       	sbiw	r28, 0x00	; 0
 4ee:	81 f4       	brne	.+32     	; 0x510 <free+0x3e>
 4f0:	20 81       	ld	r18, Z
 4f2:	31 81       	ldd	r19, Z+1	; 0x01
 4f4:	28 0f       	add	r18, r24
 4f6:	39 1f       	adc	r19, r25
 4f8:	80 91 6a 03 	lds	r24, 0x036A
 4fc:	90 91 6b 03 	lds	r25, 0x036B
 500:	82 17       	cp	r24, r18
 502:	93 07       	cpc	r25, r19
 504:	79 f5       	brne	.+94     	; 0x564 <free+0x92>
 506:	f0 93 6b 03 	sts	0x036B, r31
 50a:	e0 93 6a 03 	sts	0x036A, r30
 50e:	6d c0       	rjmp	.+218    	; 0x5ea <free+0x118>
 510:	de 01       	movw	r26, r28
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	ae 17       	cp	r26, r30
 518:	bf 07       	cpc	r27, r31
 51a:	50 f4       	brcc	.+20     	; 0x530 <free+0x5e>
 51c:	12 96       	adiw	r26, 0x02	; 2
 51e:	4d 91       	ld	r20, X+
 520:	5c 91       	ld	r21, X
 522:	13 97       	sbiw	r26, 0x03	; 3
 524:	9d 01       	movw	r18, r26
 526:	41 15       	cp	r20, r1
 528:	51 05       	cpc	r21, r1
 52a:	09 f1       	breq	.+66     	; 0x56e <free+0x9c>
 52c:	da 01       	movw	r26, r20
 52e:	f3 cf       	rjmp	.-26     	; 0x516 <free+0x44>
 530:	b3 83       	std	Z+3, r27	; 0x03
 532:	a2 83       	std	Z+2, r26	; 0x02
 534:	40 81       	ld	r20, Z
 536:	51 81       	ldd	r21, Z+1	; 0x01
 538:	84 0f       	add	r24, r20
 53a:	95 1f       	adc	r25, r21
 53c:	8a 17       	cp	r24, r26
 53e:	9b 07       	cpc	r25, r27
 540:	71 f4       	brne	.+28     	; 0x55e <free+0x8c>
 542:	8d 91       	ld	r24, X+
 544:	9c 91       	ld	r25, X
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	84 0f       	add	r24, r20
 54a:	95 1f       	adc	r25, r21
 54c:	02 96       	adiw	r24, 0x02	; 2
 54e:	91 83       	std	Z+1, r25	; 0x01
 550:	80 83       	st	Z, r24
 552:	12 96       	adiw	r26, 0x02	; 2
 554:	8d 91       	ld	r24, X+
 556:	9c 91       	ld	r25, X
 558:	13 97       	sbiw	r26, 0x03	; 3
 55a:	93 83       	std	Z+3, r25	; 0x03
 55c:	82 83       	std	Z+2, r24	; 0x02
 55e:	21 15       	cp	r18, r1
 560:	31 05       	cpc	r19, r1
 562:	29 f4       	brne	.+10     	; 0x56e <free+0x9c>
 564:	f0 93 6d 03 	sts	0x036D, r31
 568:	e0 93 6c 03 	sts	0x036C, r30
 56c:	3e c0       	rjmp	.+124    	; 0x5ea <free+0x118>
 56e:	d9 01       	movw	r26, r18
 570:	13 96       	adiw	r26, 0x03	; 3
 572:	fc 93       	st	X, r31
 574:	ee 93       	st	-X, r30
 576:	12 97       	sbiw	r26, 0x02	; 2
 578:	4d 91       	ld	r20, X+
 57a:	5d 91       	ld	r21, X+
 57c:	a4 0f       	add	r26, r20
 57e:	b5 1f       	adc	r27, r21
 580:	ea 17       	cp	r30, r26
 582:	fb 07       	cpc	r31, r27
 584:	79 f4       	brne	.+30     	; 0x5a4 <free+0xd2>
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	84 0f       	add	r24, r20
 58c:	95 1f       	adc	r25, r21
 58e:	02 96       	adiw	r24, 0x02	; 2
 590:	d9 01       	movw	r26, r18
 592:	11 96       	adiw	r26, 0x01	; 1
 594:	9c 93       	st	X, r25
 596:	8e 93       	st	-X, r24
 598:	82 81       	ldd	r24, Z+2	; 0x02
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	13 96       	adiw	r26, 0x03	; 3
 59e:	9c 93       	st	X, r25
 5a0:	8e 93       	st	-X, r24
 5a2:	12 97       	sbiw	r26, 0x02	; 2
 5a4:	e0 e0       	ldi	r30, 0x00	; 0
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	9b 81       	ldd	r25, Y+3	; 0x03
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <free+0xe4>
 5b0:	fe 01       	movw	r30, r28
 5b2:	ec 01       	movw	r28, r24
 5b4:	f9 cf       	rjmp	.-14     	; 0x5a8 <free+0xd6>
 5b6:	ce 01       	movw	r24, r28
 5b8:	02 96       	adiw	r24, 0x02	; 2
 5ba:	28 81       	ld	r18, Y
 5bc:	39 81       	ldd	r19, Y+1	; 0x01
 5be:	82 0f       	add	r24, r18
 5c0:	93 1f       	adc	r25, r19
 5c2:	20 91 6a 03 	lds	r18, 0x036A
 5c6:	30 91 6b 03 	lds	r19, 0x036B
 5ca:	28 17       	cp	r18, r24
 5cc:	39 07       	cpc	r19, r25
 5ce:	69 f4       	brne	.+26     	; 0x5ea <free+0x118>
 5d0:	30 97       	sbiw	r30, 0x00	; 0
 5d2:	29 f4       	brne	.+10     	; 0x5de <free+0x10c>
 5d4:	10 92 6d 03 	sts	0x036D, r1
 5d8:	10 92 6c 03 	sts	0x036C, r1
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <free+0x110>
 5de:	13 82       	std	Z+3, r1	; 0x03
 5e0:	12 82       	std	Z+2, r1	; 0x02
 5e2:	d0 93 6b 03 	sts	0x036B, r29
 5e6:	c0 93 6a 03 	sts	0x036A, r28
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <strncpy>:
 5f0:	fb 01       	movw	r30, r22
 5f2:	dc 01       	movw	r26, r24
 5f4:	41 50       	subi	r20, 0x01	; 1
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	48 f0       	brcs	.+18     	; 0x60c <strncpy+0x1c>
 5fa:	01 90       	ld	r0, Z+
 5fc:	0d 92       	st	X+, r0
 5fe:	00 20       	and	r0, r0
 600:	c9 f7       	brne	.-14     	; 0x5f4 <strncpy+0x4>
 602:	01 c0       	rjmp	.+2      	; 0x606 <strncpy+0x16>
 604:	1d 92       	st	X+, r1
 606:	41 50       	subi	r20, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	e0 f7       	brcc	.-8      	; 0x604 <strncpy+0x14>
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
