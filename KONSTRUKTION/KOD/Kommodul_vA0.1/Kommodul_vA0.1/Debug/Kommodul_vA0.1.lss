
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800116  00800116  00000856  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a93  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bf  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069a  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089d  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fd c1       	rjmp	.+1018   	; 0x448 <__vector_19>
  4e:	00 00       	nop
  50:	f8 c0       	rjmp	.+496    	; 0x242 <__vector_20>
  52:	00 00       	nop
  54:	62 c1       	rjmp	.+708    	; 0x31a <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3f d2       	rcall	.+1150   	; 0x542 <main>
  c4:	71 c3       	rjmp	.+1762   	; 0x7a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
{
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) && !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 e9       	ldi	r24, 0x98	; 152
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	89 2b       	or	r24, r25
 102:	49 f4       	brne	.+18     	; 0x116 <add_node+0x24>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	28 d2       	rcall	.+1104   	; 0x55a <malloc>
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
 10e:	fc 01       	movw	r30, r24
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	10 83       	st	Z, r17
 116:	09 90       	ld	r0, Y+
 118:	d8 81       	ld	r29, Y
 11a:	c0 2d       	mov	r28, r0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	11 f0       	breq	.+4      	; 0x128 <add_node+0x36>
 124:	ec 01       	movw	r28, r24
 126:	fa cf       	rjmp	.-12     	; 0x11c <add_node+0x2a>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	16 d2       	rcall	.+1068   	; 0x55a <malloc>
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	18 83       	st	Y, r17
 134:	fc 01       	movw	r30, r24
 136:	12 82       	std	Z+2, r1	; 0x02
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <pop_node>:
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	e8 81       	ld	r30, Y
 150:	f9 81       	ldd	r31, Y+1	; 0x01
 152:	30 97       	sbiw	r30, 0x00	; 0
 154:	49 f0       	breq	.+18     	; 0x168 <pop_node+0x26>
 156:	01 81       	ldd	r16, Z+1	; 0x01
 158:	12 81       	ldd	r17, Z+2	; 0x02
 15a:	f0 80       	ld	r15, Z
 15c:	cf 01       	movw	r24, r30
 15e:	95 d2       	rcall	.+1322   	; 0x68a <free>
 160:	19 83       	std	Y+1, r17	; 0x01
 162:	08 83       	st	Y, r16
 164:	8f 2d       	mov	r24, r15
 166:	01 c0       	rjmp	.+2      	; 0x16a <pop_node+0x28>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	08 95       	ret

00000176 <flush_list>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	fc 01       	movw	r30, r24
 17c:	c0 81       	ld	r28, Z
 17e:	d1 81       	ldd	r29, Z+1	; 0x01
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	59 f0       	breq	.+22     	; 0x19a <flush_list+0x24>
 184:	11 82       	std	Z+1, r1	; 0x01
 186:	10 82       	st	Z, r1
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	19 f0       	breq	.+6      	; 0x196 <flush_list+0x20>
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	f0 df       	rcall	.-32     	; 0x176 <flush_list>
 196:	ce 01       	movw	r24, r28
 198:	78 d2       	rcall	.+1264   	; 0x68a <free>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <send_BT_buffer>:
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	7c 01       	movw	r14, r24
 1ae:	8b 01       	movw	r16, r22
 1b0:	86 e1       	ldi	r24, 0x16	; 22
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	e0 df       	rcall	.-64     	; 0x176 <flush_list>
 1b6:	10 16       	cp	r1, r16
 1b8:	11 06       	cpc	r1, r17
 1ba:	54 f4       	brge	.+20     	; 0x1d0 <send_BT_buffer+0x30>
 1bc:	e7 01       	movw	r28, r14
 1be:	0e 0d       	add	r16, r14
 1c0:	1f 1d       	adc	r17, r15
 1c2:	69 91       	ld	r22, Y+
 1c4:	86 e1       	ldi	r24, 0x16	; 22
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	94 df       	rcall	.-216    	; 0xf2 <add_node>
 1ca:	c0 17       	cp	r28, r16
 1cc:	d1 07       	cpc	r29, r17
 1ce:	c9 f7       	brne	.-14     	; 0x1c2 <send_BT_buffer+0x22>
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	80 83       	st	Z, r24
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <BT_StartBitCheck>:
 1e8:	85 34       	cpi	r24, 0x45	; 69
 1ea:	f9 f0       	breq	.+62     	; 0x22a <BT_StartBitCheck+0x42>
 1ec:	18 f4       	brcc	.+6      	; 0x1f4 <BT_StartBitCheck+0xc>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	31 f0       	breq	.+12     	; 0x1fe <BT_StartBitCheck+0x16>
 1f2:	08 95       	ret
 1f4:	87 35       	cpi	r24, 0x57	; 87
 1f6:	79 f0       	breq	.+30     	; 0x216 <BT_StartBitCheck+0x2e>
 1f8:	89 35       	cpi	r24, 0x59	; 89
 1fa:	b9 f0       	breq	.+46     	; 0x22a <BT_StartBitCheck+0x42>
 1fc:	08 95       	ret
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 1c 01 	sts	0x011C, r24
 204:	10 92 1d 01 	sts	0x011D, r1
 208:	10 92 1b 01 	sts	0x011B, r1
 20c:	10 92 1a 01 	sts	0x011A, r1
 210:	10 92 1e 01 	sts	0x011E, r1
 214:	08 95       	ret
 216:	10 92 1b 01 	sts	0x011B, r1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 1d 01 	sts	0x011D, r24
 220:	10 92 1c 01 	sts	0x011C, r1
 224:	10 92 1e 01 	sts	0x011E, r1
 228:	08 95       	ret
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 1e 01 	sts	0x011E, r24
 230:	10 92 1a 01 	sts	0x011A, r1
 234:	10 92 1b 01 	sts	0x011B, r1
 238:	10 92 1d 01 	sts	0x011D, r1
 23c:	10 92 1c 01 	sts	0x011C, r1
 240:	08 95       	ret

00000242 <__vector_20>:
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	0b b6       	in	r0, 0x3b	; 59
 24e:	0f 92       	push	r0
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	80 91 c6 00 	lds	r24, 0x00C6
 26c:	90 91 1c 01 	lds	r25, 0x011C
 270:	91 11       	cpse	r25, r1
 272:	0a c0       	rjmp	.+20     	; 0x288 <__vector_20+0x46>
 274:	90 91 1d 01 	lds	r25, 0x011D
 278:	91 11       	cpse	r25, r1
 27a:	1b c0       	rjmp	.+54     	; 0x2b2 <__vector_20+0x70>
 27c:	90 91 1b 01 	lds	r25, 0x011B
 280:	91 11       	cpse	r25, r1
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <__vector_20+0x86>
 284:	b1 df       	rcall	.-158    	; 0x1e8 <BT_StartBitCheck>
 286:	15 c0       	rjmp	.+42     	; 0x2b2 <__vector_20+0x70>
 288:	91 30       	cpi	r25, 0x01	; 1
 28a:	99 f4       	brne	.+38     	; 0x2b2 <__vector_20+0x70>
 28c:	87 35       	cpi	r24, 0x57	; 87
 28e:	89 f0       	breq	.+34     	; 0x2b2 <__vector_20+0x70>
 290:	90 91 1a 01 	lds	r25, 0x011A
 294:	e9 2f       	mov	r30, r25
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	e0 5f       	subi	r30, 0xF0	; 240
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 83       	st	Z, r24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 0f       	add	r24, r25
 2a2:	80 93 1a 01 	sts	0x011A, r24
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <__vector_20+0x70>
 2aa:	10 92 1c 01 	sts	0x011C, r1
 2ae:	10 92 1a 01 	sts	0x011A, r1
 2b2:	80 91 1d 01 	lds	r24, 0x011D
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <__vector_20+0x86>
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	6e df       	rcall	.-292    	; 0x1a0 <send_BT_buffer>
 2c4:	10 92 1d 01 	sts	0x011D, r1
 2c8:	80 91 1b 01 	lds	r24, 0x011B
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	39 f4       	brne	.+14     	; 0x2de <__vector_20+0x9c>
 2d0:	63 e0       	ldi	r22, 0x03	; 3
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	63 df       	rcall	.-314    	; 0x1a0 <send_BT_buffer>
 2da:	10 92 1b 01 	sts	0x011B, r1
 2de:	80 91 1e 01 	lds	r24, 0x011E
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	39 f4       	brne	.+14     	; 0x2f4 <__vector_20+0xb2>
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	85 e2       	ldi	r24, 0x25	; 37
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	58 df       	rcall	.-336    	; 0x1a0 <send_BT_buffer>
 2f0:	10 92 1e 01 	sts	0x011E, r1
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0b be       	out	0x3b, r0	; 59
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_21>:
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	0b b6       	in	r0, 0x3b	; 59
 326:	0f 92       	push	r0
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
 340:	80 91 16 01 	lds	r24, 0x0116
 344:	90 91 17 01 	lds	r25, 0x0117
 348:	89 2b       	or	r24, r25
 34a:	31 f4       	brne	.+12     	; 0x358 <__vector_21+0x3e>
 34c:	e1 ec       	ldi	r30, 0xC1	; 193
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	80 83       	st	Z, r24
 356:	05 c0       	rjmp	.+10     	; 0x362 <__vector_21+0x48>
 358:	86 e1       	ldi	r24, 0x16	; 22
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	f2 de       	rcall	.-540    	; 0x142 <pop_node>
 35e:	80 93 c6 00 	sts	0x00C6, r24
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0b be       	out	0x3b, r0	; 59
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <SPI_send>:
	
}
void SPI_send(uint8_t tosend)
{
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
 388:	68 2f       	mov	r22, r24
 38a:	88 e1       	ldi	r24, 0x18	; 24
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	b1 ce       	rjmp	.-670    	; 0xf2 <add_node>
 390:	08 95       	ret

00000392 <SPI_send_arr>:
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
	int i = 0;
	while(i < size)
 39a:	16 16       	cp	r1, r22
 39c:	17 06       	cpc	r1, r23
 39e:	4c f4       	brge	.+18     	; 0x3b2 <SPI_send_arr+0x20>
 3a0:	ec 01       	movw	r28, r24
 3a2:	8c 01       	movw	r16, r24
 3a4:	06 0f       	add	r16, r22
 3a6:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 3a8:	89 91       	ld	r24, Y+
 3aa:	ee df       	rcall	.-36     	; 0x388 <SPI_send>
	add_node(&head_SPIout, tosend); //Add node with tosend-value to desired list
}
void SPI_send_arr(uint8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)
 3ac:	c0 17       	cp	r28, r16
 3ae:	d1 07       	cpc	r29, r17
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <SPI_StartBitCheck>:
void SPI_StartBitCheck(uint8_t in_)
{
	switch (in_){
 3bc:	85 34       	cpi	r24, 0x45	; 69
 3be:	69 f1       	breq	.+90     	; 0x41a <SPI_StartBitCheck+0x5e>
 3c0:	18 f4       	brcc	.+6      	; 0x3c8 <SPI_StartBitCheck+0xc>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	31 f0       	breq	.+12     	; 0x3d2 <SPI_StartBitCheck+0x16>
 3c6:	35 c0       	rjmp	.+106    	; 0x432 <SPI_StartBitCheck+0x76>
 3c8:	8e 3f       	cpi	r24, 0xFE	; 254
 3ca:	d9 f0       	breq	.+54     	; 0x402 <SPI_StartBitCheck+0x46>
 3cc:	8f 3f       	cpi	r24, 0xFF	; 255
 3ce:	69 f0       	breq	.+26     	; 0x3ea <SPI_StartBitCheck+0x2e>
 3d0:	30 c0       	rjmp	.+96     	; 0x432 <SPI_StartBitCheck+0x76>
		
		case 1: 
		speedFlag_ = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	80 93 21 01 	sts	0x0121, r24
		speedoutFlag_ = 0;
 3d8:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 3dc:	10 92 22 01 	sts	0x0122, r1
		mapFlag_ = 0;
 3e0:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 3e4:	10 92 1f 01 	sts	0x011F, r1
		break;
 3e8:	08 95       	ret
		
		case 255: 
		sensorFlag_ = 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 22 01 	sts	0x0122, r24
		speedoutFlag_ = 0;
 3f0:	10 92 20 01 	sts	0x0120, r1
		speedFlag_ = 0;
 3f4:	10 92 21 01 	sts	0x0121, r1
		mapFlag_ = 0;		
 3f8:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 3fc:	10 92 1f 01 	sts	0x011F, r1
		break; 
 400:	08 95       	ret
		
		case 254:
		speedoutFlag_ = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 20 01 	sts	0x0120, r24
		sensorFlag_ = 0;
 408:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 40c:	10 92 21 01 	sts	0x0121, r1
		mapFlag_ = 0;		
 410:	10 92 23 01 	sts	0x0123, r1
		counter_ = 0;
 414:	10 92 1f 01 	sts	0x011F, r1
		break;
 418:	08 95       	ret
		
		case 69:
		mapFlag_ = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 23 01 	sts	0x0123, r24
		speedoutFlag_ = 0;
 420:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 424:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 428:	10 92 21 01 	sts	0x0121, r1
		counter_ = 0;
 42c:	10 92 1f 01 	sts	0x011F, r1
		break;
 430:	08 95       	ret
		
		default: 
		mapFlag_ = 0;
 432:	10 92 23 01 	sts	0x0123, r1
		speedoutFlag_ = 0;
 436:	10 92 20 01 	sts	0x0120, r1
		sensorFlag_ = 0;
 43a:	10 92 22 01 	sts	0x0122, r1
		speedFlag_ = 0;
 43e:	10 92 21 01 	sts	0x0121, r1
		counter_ = 0;
 442:	10 92 1f 01 	sts	0x011F, r1
 446:	08 95       	ret

00000448 <__vector_19>:
	}
}
// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0b b6       	in	r0, 0x3b	; 59
 454:	0f 92       	push	r0
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	uint8_t data = SPDR;
 46e:	8e b5       	in	r24, 0x2e	; 46
	
	if ( (speedFlag_ == 0) && (sensorFlag_ == 0) && (speedoutFlag_ == 0)){
 470:	90 91 21 01 	lds	r25, 0x0121
 474:	91 11       	cpse	r25, r1
 476:	0a c0       	rjmp	.+20     	; 0x48c <__vector_19+0x44>
 478:	90 91 22 01 	lds	r25, 0x0122
 47c:	91 11       	cpse	r25, r1
 47e:	06 c0       	rjmp	.+12     	; 0x48c <__vector_19+0x44>
 480:	90 91 20 01 	lds	r25, 0x0120
 484:	91 11       	cpse	r25, r1
 486:	18 c0       	rjmp	.+48     	; 0x4b8 <__vector_19+0x70>
		SPI_StartBitCheck(data);
 488:	99 df       	rcall	.-206    	; 0x3bc <SPI_StartBitCheck>
 48a:	2b c0       	rjmp	.+86     	; 0x4e2 <__vector_19+0x9a>
	}
	
	else if (sensorFlag_ == 1){
 48c:	90 91 22 01 	lds	r25, 0x0122
 490:	91 30       	cpi	r25, 0x01	; 1
 492:	91 f4       	brne	.+36     	; 0x4b8 <__vector_19+0x70>
	arrSensor[counter_] = data; //Load into correct pos of array 0-6
 494:	90 91 1f 01 	lds	r25, 0x011F
 498:	e9 2f       	mov	r30, r25
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	ea 5f       	subi	r30, 0xFA	; 250
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	80 83       	st	Z, r24
	counter_++;
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
 4a4:	97 30       	cpi	r25, 0x07	; 7
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__vector_19+0x66>
		SPI_StartBitCheck(data);
	}
	
	else if (sensorFlag_ == 1){
	arrSensor[counter_] = data; //Load into correct pos of array 0-6
	counter_++;
 4a8:	90 93 1f 01 	sts	0x011F, r25
 4ac:	1a c0       	rjmp	.+52     	; 0x4e2 <__vector_19+0x9a>
		if (counter_ == (sizeof(arrSensor)/sizeof(arrSensor[0])) ){  //all values in.
				counter_ = 0;
 4ae:	10 92 1f 01 	sts	0x011F, r1
				sensorFlag_ = 0;
 4b2:	10 92 22 01 	sts	0x0122, r1
 4b6:	15 c0       	rjmp	.+42     	; 0x4e2 <__vector_19+0x9a>
		}
	}
	else if (speedoutFlag_ == 1){
 4b8:	90 91 20 01 	lds	r25, 0x0120
 4bc:	91 30       	cpi	r25, 0x01	; 1
 4be:	89 f4       	brne	.+34     	; 0x4e2 <__vector_19+0x9a>
		arrSpeedout[counter_] = data; //Load into correct pos of array 0-3
 4c0:	90 91 1f 01 	lds	r25, 0x011F
 4c4:	e9 2f       	mov	r30, r25
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	e3 5f       	subi	r30, 0xF3	; 243
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	80 83       	st	Z, r24
		counter_++;
 4ce:	9f 5f       	subi	r25, 0xFF	; 255
		if (counter_ == (sizeof(arrSpeedout)/sizeof(arrSpeedout[0])) ){  //all values in.
 4d0:	93 30       	cpi	r25, 0x03	; 3
 4d2:	19 f0       	breq	.+6      	; 0x4da <__vector_19+0x92>
				sensorFlag_ = 0;
		}
	}
	else if (speedoutFlag_ == 1){
		arrSpeedout[counter_] = data; //Load into correct pos of array 0-3
		counter_++;
 4d4:	90 93 1f 01 	sts	0x011F, r25
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_19+0x9a>
		if (counter_ == (sizeof(arrSpeedout)/sizeof(arrSpeedout[0])) ){  //all values in.
			counter_ = 0;
 4da:	10 92 1f 01 	sts	0x011F, r1
			speedoutFlag_ = 0;
 4de:	10 92 20 01 	sts	0x0120, r1
		}
	}
	
	// Speed is to be sent.
	if (speedFlag_ == 1){
 4e2:	80 91 21 01 	lds	r24, 0x0121
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	61 f4       	brne	.+24     	; 0x502 <__vector_19+0xba>
		SPI_send_arr(arrSpeed,(sizeof(arrSpeed)/sizeof(arrSpeed[0])));
 4ea:	65 e0       	ldi	r22, 0x05	; 5
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	4f df       	rcall	.-354    	; 0x392 <SPI_send_arr>
		SPDR =  pop_node(&head_SPIout);
 4f4:	88 e1       	ldi	r24, 0x18	; 24
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	24 de       	rcall	.-952    	; 0x142 <pop_node>
 4fa:	8e bd       	out	0x2e, r24	; 46
		speedFlag_ = 0;
 4fc:	10 92 21 01 	sts	0x0121, r1
		return;
 500:	0d c0       	rjmp	.+26     	; 0x51c <__vector_19+0xd4>
	}
	

	if (head_SPIout == NULL){ //Sendback function will always be performed when something is to be sent.
 502:	80 91 18 01 	lds	r24, 0x0118
 506:	90 91 19 01 	lds	r25, 0x0119
 50a:	89 2b       	or	r24, r25
 50c:	19 f4       	brne	.+6      	; 0x514 <__vector_19+0xcc>
		uint8_t stop_bit = 255;
		SPDR = stop_bit;
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	8e bd       	out	0x2e, r24	; 46
 512:	04 c0       	rjmp	.+8      	; 0x51c <__vector_19+0xd4>
	}
	else{
		SPDR = pop_node(&head_SPIout);
 514:	88 e1       	ldi	r24, 0x18	; 24
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	14 de       	rcall	.-984    	; 0x142 <pop_node>
 51a:	8e bd       	out	0x2e, r24	; 46
	}
	
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0b be       	out	0x3b, r0	; 59
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <main>:



int main(void)
{	
	Flag_ = 0;
 542:	10 92 24 01 	sts	0x0124, r1
	sleep_enable();
 546:	83 b7       	in	r24, 0x33	; 51
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 54c:	bd dd       	rcall	.-1158   	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 54e:	80 e1       	ldi	r24, 0x10	; 16
 550:	85 b9       	out	0x05, r24	; 5
{	
	Flag_ = 0;
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 552:	bf dd       	rcall	.-1154   	; 0xd2 <SPI_SlaveInit>
	BT_init();
 554:	c2 dd       	rcall	.-1148   	; 0xda <BT_init>
	sei();
 556:	78 94       	sei
 558:	ff cf       	rjmp	.-2      	; 0x558 <main+0x16>

0000055a <malloc>:
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	91 05       	cpc	r25, r1
 562:	10 f4       	brcc	.+4      	; 0x568 <malloc+0xe>
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	e0 91 2a 01 	lds	r30, 0x012A
 56c:	f0 91 2b 01 	lds	r31, 0x012B
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	30 97       	sbiw	r30, 0x00	; 0
 57a:	39 f1       	breq	.+78     	; 0x5ca <malloc+0x70>
 57c:	40 81       	ld	r20, Z
 57e:	51 81       	ldd	r21, Z+1	; 0x01
 580:	48 17       	cp	r20, r24
 582:	59 07       	cpc	r21, r25
 584:	b8 f0       	brcs	.+46     	; 0x5b4 <malloc+0x5a>
 586:	48 17       	cp	r20, r24
 588:	59 07       	cpc	r21, r25
 58a:	71 f4       	brne	.+28     	; 0x5a8 <malloc+0x4e>
 58c:	82 81       	ldd	r24, Z+2	; 0x02
 58e:	93 81       	ldd	r25, Z+3	; 0x03
 590:	10 97       	sbiw	r26, 0x00	; 0
 592:	29 f0       	breq	.+10     	; 0x59e <malloc+0x44>
 594:	13 96       	adiw	r26, 0x03	; 3
 596:	9c 93       	st	X, r25
 598:	8e 93       	st	-X, r24
 59a:	12 97       	sbiw	r26, 0x02	; 2
 59c:	2c c0       	rjmp	.+88     	; 0x5f6 <malloc+0x9c>
 59e:	90 93 2b 01 	sts	0x012B, r25
 5a2:	80 93 2a 01 	sts	0x012A, r24
 5a6:	27 c0       	rjmp	.+78     	; 0x5f6 <malloc+0x9c>
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	31 f0       	breq	.+12     	; 0x5ba <malloc+0x60>
 5ae:	42 17       	cp	r20, r18
 5b0:	53 07       	cpc	r21, r19
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <malloc+0x60>
 5b4:	a9 01       	movw	r20, r18
 5b6:	db 01       	movw	r26, r22
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <malloc+0x62>
 5ba:	ef 01       	movw	r28, r30
 5bc:	9a 01       	movw	r18, r20
 5be:	bd 01       	movw	r22, r26
 5c0:	df 01       	movw	r26, r30
 5c2:	02 80       	ldd	r0, Z+2	; 0x02
 5c4:	f3 81       	ldd	r31, Z+3	; 0x03
 5c6:	e0 2d       	mov	r30, r0
 5c8:	d7 cf       	rjmp	.-82     	; 0x578 <malloc+0x1e>
 5ca:	21 15       	cp	r18, r1
 5cc:	31 05       	cpc	r19, r1
 5ce:	f9 f0       	breq	.+62     	; 0x60e <malloc+0xb4>
 5d0:	28 1b       	sub	r18, r24
 5d2:	39 0b       	sbc	r19, r25
 5d4:	24 30       	cpi	r18, 0x04	; 4
 5d6:	31 05       	cpc	r19, r1
 5d8:	80 f4       	brcc	.+32     	; 0x5fa <malloc+0xa0>
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	9b 81       	ldd	r25, Y+3	; 0x03
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
 5e2:	21 f0       	breq	.+8      	; 0x5ec <malloc+0x92>
 5e4:	fb 01       	movw	r30, r22
 5e6:	93 83       	std	Z+3, r25	; 0x03
 5e8:	82 83       	std	Z+2, r24	; 0x02
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <malloc+0x9a>
 5ec:	90 93 2b 01 	sts	0x012B, r25
 5f0:	80 93 2a 01 	sts	0x012A, r24
 5f4:	fe 01       	movw	r30, r28
 5f6:	32 96       	adiw	r30, 0x02	; 2
 5f8:	44 c0       	rjmp	.+136    	; 0x682 <malloc+0x128>
 5fa:	fe 01       	movw	r30, r28
 5fc:	e2 0f       	add	r30, r18
 5fe:	f3 1f       	adc	r31, r19
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	22 50       	subi	r18, 0x02	; 2
 606:	31 09       	sbc	r19, r1
 608:	39 83       	std	Y+1, r19	; 0x01
 60a:	28 83       	st	Y, r18
 60c:	3a c0       	rjmp	.+116    	; 0x682 <malloc+0x128>
 60e:	20 91 28 01 	lds	r18, 0x0128
 612:	30 91 29 01 	lds	r19, 0x0129
 616:	23 2b       	or	r18, r19
 618:	41 f4       	brne	.+16     	; 0x62a <malloc+0xd0>
 61a:	20 91 02 01 	lds	r18, 0x0102
 61e:	30 91 03 01 	lds	r19, 0x0103
 622:	30 93 29 01 	sts	0x0129, r19
 626:	20 93 28 01 	sts	0x0128, r18
 62a:	20 91 00 01 	lds	r18, 0x0100
 62e:	30 91 01 01 	lds	r19, 0x0101
 632:	21 15       	cp	r18, r1
 634:	31 05       	cpc	r19, r1
 636:	41 f4       	brne	.+16     	; 0x648 <malloc+0xee>
 638:	2d b7       	in	r18, 0x3d	; 61
 63a:	3e b7       	in	r19, 0x3e	; 62
 63c:	40 91 04 01 	lds	r20, 0x0104
 640:	50 91 05 01 	lds	r21, 0x0105
 644:	24 1b       	sub	r18, r20
 646:	35 0b       	sbc	r19, r21
 648:	e0 91 28 01 	lds	r30, 0x0128
 64c:	f0 91 29 01 	lds	r31, 0x0129
 650:	e2 17       	cp	r30, r18
 652:	f3 07       	cpc	r31, r19
 654:	a0 f4       	brcc	.+40     	; 0x67e <malloc+0x124>
 656:	2e 1b       	sub	r18, r30
 658:	3f 0b       	sbc	r19, r31
 65a:	28 17       	cp	r18, r24
 65c:	39 07       	cpc	r19, r25
 65e:	78 f0       	brcs	.+30     	; 0x67e <malloc+0x124>
 660:	ac 01       	movw	r20, r24
 662:	4e 5f       	subi	r20, 0xFE	; 254
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	24 17       	cp	r18, r20
 668:	35 07       	cpc	r19, r21
 66a:	48 f0       	brcs	.+18     	; 0x67e <malloc+0x124>
 66c:	4e 0f       	add	r20, r30
 66e:	5f 1f       	adc	r21, r31
 670:	50 93 29 01 	sts	0x0129, r21
 674:	40 93 28 01 	sts	0x0128, r20
 678:	81 93       	st	Z+, r24
 67a:	91 93       	st	Z+, r25
 67c:	02 c0       	rjmp	.+4      	; 0x682 <malloc+0x128>
 67e:	e0 e0       	ldi	r30, 0x00	; 0
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	cf 01       	movw	r24, r30
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <free>:
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	09 f4       	brne	.+2      	; 0x694 <free+0xa>
 692:	87 c0       	rjmp	.+270    	; 0x7a2 <free+0x118>
 694:	fc 01       	movw	r30, r24
 696:	32 97       	sbiw	r30, 0x02	; 2
 698:	13 82       	std	Z+3, r1	; 0x03
 69a:	12 82       	std	Z+2, r1	; 0x02
 69c:	c0 91 2a 01 	lds	r28, 0x012A
 6a0:	d0 91 2b 01 	lds	r29, 0x012B
 6a4:	20 97       	sbiw	r28, 0x00	; 0
 6a6:	81 f4       	brne	.+32     	; 0x6c8 <free+0x3e>
 6a8:	20 81       	ld	r18, Z
 6aa:	31 81       	ldd	r19, Z+1	; 0x01
 6ac:	28 0f       	add	r18, r24
 6ae:	39 1f       	adc	r19, r25
 6b0:	80 91 28 01 	lds	r24, 0x0128
 6b4:	90 91 29 01 	lds	r25, 0x0129
 6b8:	82 17       	cp	r24, r18
 6ba:	93 07       	cpc	r25, r19
 6bc:	79 f5       	brne	.+94     	; 0x71c <free+0x92>
 6be:	f0 93 29 01 	sts	0x0129, r31
 6c2:	e0 93 28 01 	sts	0x0128, r30
 6c6:	6d c0       	rjmp	.+218    	; 0x7a2 <free+0x118>
 6c8:	de 01       	movw	r26, r28
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	ae 17       	cp	r26, r30
 6d0:	bf 07       	cpc	r27, r31
 6d2:	50 f4       	brcc	.+20     	; 0x6e8 <free+0x5e>
 6d4:	12 96       	adiw	r26, 0x02	; 2
 6d6:	4d 91       	ld	r20, X+
 6d8:	5c 91       	ld	r21, X
 6da:	13 97       	sbiw	r26, 0x03	; 3
 6dc:	9d 01       	movw	r18, r26
 6de:	41 15       	cp	r20, r1
 6e0:	51 05       	cpc	r21, r1
 6e2:	09 f1       	breq	.+66     	; 0x726 <free+0x9c>
 6e4:	da 01       	movw	r26, r20
 6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <free+0x44>
 6e8:	b3 83       	std	Z+3, r27	; 0x03
 6ea:	a2 83       	std	Z+2, r26	; 0x02
 6ec:	40 81       	ld	r20, Z
 6ee:	51 81       	ldd	r21, Z+1	; 0x01
 6f0:	84 0f       	add	r24, r20
 6f2:	95 1f       	adc	r25, r21
 6f4:	8a 17       	cp	r24, r26
 6f6:	9b 07       	cpc	r25, r27
 6f8:	71 f4       	brne	.+28     	; 0x716 <free+0x8c>
 6fa:	8d 91       	ld	r24, X+
 6fc:	9c 91       	ld	r25, X
 6fe:	11 97       	sbiw	r26, 0x01	; 1
 700:	84 0f       	add	r24, r20
 702:	95 1f       	adc	r25, r21
 704:	02 96       	adiw	r24, 0x02	; 2
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	80 83       	st	Z, r24
 70a:	12 96       	adiw	r26, 0x02	; 2
 70c:	8d 91       	ld	r24, X+
 70e:	9c 91       	ld	r25, X
 710:	13 97       	sbiw	r26, 0x03	; 3
 712:	93 83       	std	Z+3, r25	; 0x03
 714:	82 83       	std	Z+2, r24	; 0x02
 716:	21 15       	cp	r18, r1
 718:	31 05       	cpc	r19, r1
 71a:	29 f4       	brne	.+10     	; 0x726 <free+0x9c>
 71c:	f0 93 2b 01 	sts	0x012B, r31
 720:	e0 93 2a 01 	sts	0x012A, r30
 724:	3e c0       	rjmp	.+124    	; 0x7a2 <free+0x118>
 726:	d9 01       	movw	r26, r18
 728:	13 96       	adiw	r26, 0x03	; 3
 72a:	fc 93       	st	X, r31
 72c:	ee 93       	st	-X, r30
 72e:	12 97       	sbiw	r26, 0x02	; 2
 730:	4d 91       	ld	r20, X+
 732:	5d 91       	ld	r21, X+
 734:	a4 0f       	add	r26, r20
 736:	b5 1f       	adc	r27, r21
 738:	ea 17       	cp	r30, r26
 73a:	fb 07       	cpc	r31, r27
 73c:	79 f4       	brne	.+30     	; 0x75c <free+0xd2>
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	84 0f       	add	r24, r20
 744:	95 1f       	adc	r25, r21
 746:	02 96       	adiw	r24, 0x02	; 2
 748:	d9 01       	movw	r26, r18
 74a:	11 96       	adiw	r26, 0x01	; 1
 74c:	9c 93       	st	X, r25
 74e:	8e 93       	st	-X, r24
 750:	82 81       	ldd	r24, Z+2	; 0x02
 752:	93 81       	ldd	r25, Z+3	; 0x03
 754:	13 96       	adiw	r26, 0x03	; 3
 756:	9c 93       	st	X, r25
 758:	8e 93       	st	-X, r24
 75a:	12 97       	sbiw	r26, 0x02	; 2
 75c:	e0 e0       	ldi	r30, 0x00	; 0
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	9b 81       	ldd	r25, Y+3	; 0x03
 764:	00 97       	sbiw	r24, 0x00	; 0
 766:	19 f0       	breq	.+6      	; 0x76e <free+0xe4>
 768:	fe 01       	movw	r30, r28
 76a:	ec 01       	movw	r28, r24
 76c:	f9 cf       	rjmp	.-14     	; 0x760 <free+0xd6>
 76e:	ce 01       	movw	r24, r28
 770:	02 96       	adiw	r24, 0x02	; 2
 772:	28 81       	ld	r18, Y
 774:	39 81       	ldd	r19, Y+1	; 0x01
 776:	82 0f       	add	r24, r18
 778:	93 1f       	adc	r25, r19
 77a:	20 91 28 01 	lds	r18, 0x0128
 77e:	30 91 29 01 	lds	r19, 0x0129
 782:	28 17       	cp	r18, r24
 784:	39 07       	cpc	r19, r25
 786:	69 f4       	brne	.+26     	; 0x7a2 <free+0x118>
 788:	30 97       	sbiw	r30, 0x00	; 0
 78a:	29 f4       	brne	.+10     	; 0x796 <free+0x10c>
 78c:	10 92 2b 01 	sts	0x012B, r1
 790:	10 92 2a 01 	sts	0x012A, r1
 794:	02 c0       	rjmp	.+4      	; 0x79a <free+0x110>
 796:	13 82       	std	Z+3, r1	; 0x03
 798:	12 82       	std	Z+2, r1	; 0x02
 79a:	d0 93 29 01 	sts	0x0129, r29
 79e:	c0 93 28 01 	sts	0x0128, r28
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
