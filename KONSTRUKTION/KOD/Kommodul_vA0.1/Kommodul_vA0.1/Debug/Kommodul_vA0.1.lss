
Kommodul_vA0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000005ce  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800124  00800124  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a6  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000285  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047a  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000766  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0d c1       	rjmp	.+538    	; 0x268 <__vector_19>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__vector_20>
  52:	00 00       	nop
  54:	a3 c0       	rjmp	.+326    	; 0x19c <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0b d1       	rcall	.+534    	; 0x2da <main>
  c4:	82 c2       	rjmp	.+1284   	; 0x5ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Komm_InitPortDirections>:
	
	memset(outSPDR, '\0', BuffSize);
	strncpy(outSPDR, buffer, BuffSize); //Copy what to send into outSPDR
	(*posBuff_SPIout) = 0; // start reading from beginning
	ongoing_SPI_transfer = 1; //something to send.
	while(((ongoing_SPI_transfer == 1) & !(outSPDR[(*posBuff_SPIout)] == '\0'))); //Wait until entire buffer is sent.
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <SPI_SlaveInit>:
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	83 ee       	ldi	r24, 0xE3	; 227
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <BT_init>:
  da:	10 92 c5 00 	sts	0x00C5, r1
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	80 93 c4 00 	sts	0x00C4, r24
  e4:	88 ed       	ldi	r24, 0xD8	; 216
  e6:	80 93 c1 00 	sts	0x00C1, r24
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
  f0:	08 95       	ret

000000f2 <add_node>:
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	16 2f       	mov	r17, r22
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	3a 81       	ldd	r19, Y+2	; 0x02
 100:	21 15       	cp	r18, r1
 102:	31 05       	cpc	r19, r1
 104:	11 f0       	breq	.+4      	; 0x10a <add_node+0x18>
 106:	e9 01       	movw	r28, r18
 108:	f9 cf       	rjmp	.-14     	; 0xfc <add_node+0xa>
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	36 d1       	rcall	.+620    	; 0x37c <malloc>
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	fc 01       	movw	r30, r24
 116:	10 83       	st	Z, r17
 118:	e9 81       	ldd	r30, Y+1	; 0x01
 11a:	fa 81       	ldd	r31, Y+2	; 0x02
 11c:	12 82       	std	Z+2, r1	; 0x02
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <pop_node>:
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	e8 81       	ld	r30, Y
 136:	f9 81       	ldd	r31, Y+1	; 0x01
 138:	30 97       	sbiw	r30, 0x00	; 0
 13a:	41 f0       	breq	.+16     	; 0x14c <pop_node+0x24>
 13c:	01 81       	ldd	r16, Z+1	; 0x01
 13e:	12 81       	ldd	r17, Z+2	; 0x02
 140:	f0 80       	ld	r15, Z
 142:	cf 01       	movw	r24, r30
 144:	b3 d1       	rcall	.+870    	; 0x4ac <free>
 146:	19 83       	std	Y+1, r17	; 0x01
 148:	08 83       	st	Y, r16
 14a:	01 c0       	rjmp	.+2      	; 0x14e <pop_node+0x26>
 14c:	f1 2c       	mov	r15, r1
 14e:	8f 2d       	mov	r24, r15
 150:	99 27       	eor	r25, r25
 152:	87 fd       	sbrc	r24, 7
 154:	90 95       	com	r25
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	08 95       	ret

00000162 <__vector_20>:
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	0b b6       	in	r0, 0x3b	; 59
 16e:	0f 92       	push	r0
 170:	8f 93       	push	r24
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	e1 ec       	ldi	r30, 0xC1	; 193
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	80 83       	st	Z, r24
 180:	e6 ec       	ldi	r30, 0xC6	; 198
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 83       	st	Z, r24
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0b be       	out	0x3b, r0	; 59
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_21>:
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	0b b6       	in	r0, 0x3b	; 59
 1a8:	0f 92       	push	r0
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	80 91 26 01 	lds	r24, 0x0126
 1c6:	90 91 27 01 	lds	r25, 0x0127
 1ca:	89 2b       	or	r24, r25
 1cc:	31 f4       	brne	.+12     	; 0x1da <__vector_21+0x3e>
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	80 83       	st	Z, r24
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <__vector_21+0x48>
 1da:	86 e2       	ldi	r24, 0x26	; 38
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	a4 df       	rcall	.-184    	; 0x128 <pop_node>
 1e0:	80 93 c6 00 	sts	0x00C6, r24
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0b be       	out	0x3b, r0	; 59
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <flush_list>:
	
}


void flush_list(buffer_ ** lst_head)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
	while(*lst_head != NULL)
 210:	88 81       	ld	r24, Y
 212:	99 81       	ldd	r25, Y+1	; 0x01
 214:	89 2b       	or	r24, r25
 216:	31 f0       	breq	.+12     	; 0x224 <flush_list+0x1a>
	{
		pop_node(lst_head);
 218:	ce 01       	movw	r24, r28
 21a:	86 df       	rcall	.-244    	; 0x128 <pop_node>
}


void flush_list(buffer_ ** lst_head)
{
	while(*lst_head != NULL)
 21c:	88 81       	ld	r24, Y
 21e:	99 81       	ldd	r25, Y+1	; 0x01
 220:	89 2b       	or	r24, r25
 222:	d1 f7       	brne	.-12     	; 0x218 <flush_list+0xe>
	{
		pop_node(lst_head);
	}
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <SPI_send>:

void SPI_send(int tosend)
{
	add_node(head_SPIout, tosend); //Add node with tosend-value to desired list
 22a:	68 2f       	mov	r22, r24
 22c:	80 91 2a 01 	lds	r24, 0x012A
 230:	90 91 2b 01 	lds	r25, 0x012B
 234:	5e cf       	rjmp	.-324    	; 0xf2 <add_node>
 236:	08 95       	ret

00000238 <SPI_send_arr>:
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	int i = 0;
	while(i < size)// +2 due to continu
 240:	16 16       	cp	r1, r22
 242:	17 06       	cpc	r1, r23
 244:	64 f4       	brge	.+24     	; 0x25e <SPI_send_arr+0x26>
 246:	ec 01       	movw	r28, r24
 248:	8c 01       	movw	r16, r24
 24a:	06 0f       	add	r16, r22
 24c:	17 1f       	adc	r17, r23
	{
		SPI_send(tosend[i]);
 24e:	89 91       	ld	r24, Y+
 250:	99 27       	eor	r25, r25
 252:	87 fd       	sbrc	r24, 7
 254:	90 95       	com	r25
 256:	e9 df       	rcall	.-46     	; 0x22a <SPI_send>
}

void SPI_send_arr(int8_t tosend[], int size) // lenght of array = sizeof(array)/sizeof(element in array)
{
	int i = 0;
	while(i < size)// +2 due to continu
 258:	c0 17       	cp	r28, r16
 25a:	d1 07       	cpc	r29, r17
 25c:	c1 f7       	brne	.-16     	; 0x24e <SPI_send_arr+0x16>
	{
		SPI_send(tosend[i]);
		i++;
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <__vector_19>:

// Interrupt method runs when SPI transmission/reception is completed.
ISR(SPI_STC_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	0b b6       	in	r0, 0x3b	; 59
 274:	0f 92       	push	r0
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	int data = (int)SPDR;
 28e:	6e b5       	in	r22, 0x2e	; 46
	add_node(head_SPIin, data); // Add received data to in-queue
 290:	80 91 28 01 	lds	r24, 0x0128
 294:	90 91 29 01 	lds	r25, 0x0129
 298:	2c df       	rcall	.-424    	; 0xf2 <add_node>
	if (head_SPIout == NULL)
 29a:	80 91 2a 01 	lds	r24, 0x012A
 29e:	90 91 2b 01 	lds	r25, 0x012B
 2a2:	89 2b       	or	r24, r25
 2a4:	19 f4       	brne	.+6      	; 0x2ac <__vector_19+0x44>
	{
		int8_t stop_bit = -128; //0b10000000, cant be shown on lcd as -128 due to limits in print func.
		SPDR = stop_bit;
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	8e bd       	out	0x2e, r24	; 46
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__vector_19+0x4c>
	}
	else
	{
		SPDR = (int8_t)pop_node(&head_SPIout);
 2ac:	8a e2       	ldi	r24, 0x2A	; 42
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	3b df       	rcall	.-394    	; 0x128 <pop_node>
 2b2:	8e bd       	out	0x2e, r24	; 46
	}
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <main>:


int main(void)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	6d 97       	sbiw	r28, 0x1d	; 29
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61

	head_SPIout = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to send and alloc memory.
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	44 d0       	rcall	.+136    	; 0x37c <malloc>
 2f4:	90 93 2b 01 	sts	0x012B, r25
 2f8:	80 93 2a 01 	sts	0x012A, r24
	head_SPIout->next= NULL;
 2fc:	fc 01       	movw	r30, r24
 2fe:	12 82       	std	Z+2, r1	; 0x02
 300:	11 82       	std	Z+1, r1	; 0x01
	head_SPIout->val = 0;
 302:	10 82       	st	Z, r1
	

	head_SPIin = (buffer_ *)malloc(sizeof(buffer_)); //Define head of list for SPI- values to receive and alloc memory.
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	39 d0       	rcall	.+114    	; 0x37c <malloc>
 30a:	90 93 29 01 	sts	0x0129, r25
 30e:	80 93 28 01 	sts	0x0128, r24
	head_SPIin->next= NULL;
 312:	fc 01       	movw	r30, r24
 314:	12 82       	std	Z+2, r1	; 0x02
 316:	11 82       	std	Z+1, r1	; 0x01
	head_SPIin->val = 0;
 318:	10 82       	st	Z, r1
	
	head_BTin = (buffer_ *)malloc(sizeof(buffer_));
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	2e d0       	rcall	.+92     	; 0x37c <malloc>
 320:	90 93 25 01 	sts	0x0125, r25
 324:	80 93 24 01 	sts	0x0124, r24
	head_BTin->next= NULL;
 328:	fc 01       	movw	r30, r24
 32a:	12 82       	std	Z+2, r1	; 0x02
 32c:	11 82       	std	Z+1, r1	; 0x01
	head_BTin->val = 0;
 32e:	10 82       	st	Z, r1
	head_BTout = (buffer_ *)malloc(sizeof(buffer_));
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	23 d0       	rcall	.+70     	; 0x37c <malloc>
 336:	90 93 27 01 	sts	0x0127, r25
 33a:	80 93 26 01 	sts	0x0126, r24
	head_BTout->next= NULL;
 33e:	fc 01       	movw	r30, r24
 340:	12 82       	std	Z+2, r1	; 0x02
 342:	11 82       	std	Z+1, r1	; 0x01
	head_BTout->val = 0;
 344:	10 82       	st	Z, r1
	
	
	sleep_enable();
 346:	83 b7       	in	r24, 0x33	; 51
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	83 bf       	out	0x33, r24	; 51
	Komm_InitPortDirections();
 34c:	bd de       	rcall	.-646    	; 0xc8 <Komm_InitPortDirections>
}

// Initiate port values.
void Komm_InitPortValues(void)
{
	PORTB = 1<<PORTB4;
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	85 b9       	out	0x05, r24	; 5
	
	
	sleep_enable();
	Komm_InitPortDirections();
	Komm_InitPortValues();
	SPI_SlaveInit();
 352:	bf de       	rcall	.-642    	; 0xd2 <SPI_SlaveInit>
	BT_init();
 354:	c2 de       	rcall	.-636    	; 0xda <BT_init>
	sei();
 356:	78 94       	sei
	//flush_list(&head_SPIout);
	//flush_list(&head_SPIin);
	int8_t array[] ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
 358:	8d e1       	ldi	r24, 0x1D	; 29
 35a:	e6 e0       	ldi	r30, 0x06	; 6
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	de 01       	movw	r26, r28
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	01 90       	ld	r0, Z+
 364:	0d 92       	st	X+, r0
 366:	8a 95       	dec	r24
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x88>
	SPI_send_arr(array, (sizeof(array)/sizeof(array[0]))); // sizeof(array)/sizeof(element in array) = lenght of array
 36a:	6d e1       	ldi	r22, 0x1D	; 29
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	62 df       	rcall	.-316    	; 0x238 <SPI_send_arr>
	while(1)
	{
		flush_list(&head_SPIin);
 374:	88 e2       	ldi	r24, 0x28	; 40
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	48 df       	rcall	.-368    	; 0x20a <flush_list>
 37a:	fc cf       	rjmp	.-8      	; 0x374 <main+0x9a>

0000037c <malloc>:
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	10 f4       	brcc	.+4      	; 0x38a <malloc+0xe>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	e0 91 2e 01 	lds	r30, 0x012E
 38e:	f0 91 2f 01 	lds	r31, 0x012F
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	30 97       	sbiw	r30, 0x00	; 0
 39c:	39 f1       	breq	.+78     	; 0x3ec <malloc+0x70>
 39e:	40 81       	ld	r20, Z
 3a0:	51 81       	ldd	r21, Z+1	; 0x01
 3a2:	48 17       	cp	r20, r24
 3a4:	59 07       	cpc	r21, r25
 3a6:	b8 f0       	brcs	.+46     	; 0x3d6 <malloc+0x5a>
 3a8:	48 17       	cp	r20, r24
 3aa:	59 07       	cpc	r21, r25
 3ac:	71 f4       	brne	.+28     	; 0x3ca <malloc+0x4e>
 3ae:	82 81       	ldd	r24, Z+2	; 0x02
 3b0:	93 81       	ldd	r25, Z+3	; 0x03
 3b2:	10 97       	sbiw	r26, 0x00	; 0
 3b4:	29 f0       	breq	.+10     	; 0x3c0 <malloc+0x44>
 3b6:	13 96       	adiw	r26, 0x03	; 3
 3b8:	9c 93       	st	X, r25
 3ba:	8e 93       	st	-X, r24
 3bc:	12 97       	sbiw	r26, 0x02	; 2
 3be:	2c c0       	rjmp	.+88     	; 0x418 <malloc+0x9c>
 3c0:	90 93 2f 01 	sts	0x012F, r25
 3c4:	80 93 2e 01 	sts	0x012E, r24
 3c8:	27 c0       	rjmp	.+78     	; 0x418 <malloc+0x9c>
 3ca:	21 15       	cp	r18, r1
 3cc:	31 05       	cpc	r19, r1
 3ce:	31 f0       	breq	.+12     	; 0x3dc <malloc+0x60>
 3d0:	42 17       	cp	r20, r18
 3d2:	53 07       	cpc	r21, r19
 3d4:	18 f0       	brcs	.+6      	; 0x3dc <malloc+0x60>
 3d6:	a9 01       	movw	r20, r18
 3d8:	db 01       	movw	r26, r22
 3da:	01 c0       	rjmp	.+2      	; 0x3de <malloc+0x62>
 3dc:	ef 01       	movw	r28, r30
 3de:	9a 01       	movw	r18, r20
 3e0:	bd 01       	movw	r22, r26
 3e2:	df 01       	movw	r26, r30
 3e4:	02 80       	ldd	r0, Z+2	; 0x02
 3e6:	f3 81       	ldd	r31, Z+3	; 0x03
 3e8:	e0 2d       	mov	r30, r0
 3ea:	d7 cf       	rjmp	.-82     	; 0x39a <malloc+0x1e>
 3ec:	21 15       	cp	r18, r1
 3ee:	31 05       	cpc	r19, r1
 3f0:	f9 f0       	breq	.+62     	; 0x430 <malloc+0xb4>
 3f2:	28 1b       	sub	r18, r24
 3f4:	39 0b       	sbc	r19, r25
 3f6:	24 30       	cpi	r18, 0x04	; 4
 3f8:	31 05       	cpc	r19, r1
 3fa:	80 f4       	brcc	.+32     	; 0x41c <malloc+0xa0>
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	9b 81       	ldd	r25, Y+3	; 0x03
 400:	61 15       	cp	r22, r1
 402:	71 05       	cpc	r23, r1
 404:	21 f0       	breq	.+8      	; 0x40e <malloc+0x92>
 406:	fb 01       	movw	r30, r22
 408:	93 83       	std	Z+3, r25	; 0x03
 40a:	82 83       	std	Z+2, r24	; 0x02
 40c:	04 c0       	rjmp	.+8      	; 0x416 <malloc+0x9a>
 40e:	90 93 2f 01 	sts	0x012F, r25
 412:	80 93 2e 01 	sts	0x012E, r24
 416:	fe 01       	movw	r30, r28
 418:	32 96       	adiw	r30, 0x02	; 2
 41a:	44 c0       	rjmp	.+136    	; 0x4a4 <malloc+0x128>
 41c:	fe 01       	movw	r30, r28
 41e:	e2 0f       	add	r30, r18
 420:	f3 1f       	adc	r31, r19
 422:	81 93       	st	Z+, r24
 424:	91 93       	st	Z+, r25
 426:	22 50       	subi	r18, 0x02	; 2
 428:	31 09       	sbc	r19, r1
 42a:	39 83       	std	Y+1, r19	; 0x01
 42c:	28 83       	st	Y, r18
 42e:	3a c0       	rjmp	.+116    	; 0x4a4 <malloc+0x128>
 430:	20 91 2c 01 	lds	r18, 0x012C
 434:	30 91 2d 01 	lds	r19, 0x012D
 438:	23 2b       	or	r18, r19
 43a:	41 f4       	brne	.+16     	; 0x44c <malloc+0xd0>
 43c:	20 91 02 01 	lds	r18, 0x0102
 440:	30 91 03 01 	lds	r19, 0x0103
 444:	30 93 2d 01 	sts	0x012D, r19
 448:	20 93 2c 01 	sts	0x012C, r18
 44c:	20 91 00 01 	lds	r18, 0x0100
 450:	30 91 01 01 	lds	r19, 0x0101
 454:	21 15       	cp	r18, r1
 456:	31 05       	cpc	r19, r1
 458:	41 f4       	brne	.+16     	; 0x46a <malloc+0xee>
 45a:	2d b7       	in	r18, 0x3d	; 61
 45c:	3e b7       	in	r19, 0x3e	; 62
 45e:	40 91 04 01 	lds	r20, 0x0104
 462:	50 91 05 01 	lds	r21, 0x0105
 466:	24 1b       	sub	r18, r20
 468:	35 0b       	sbc	r19, r21
 46a:	e0 91 2c 01 	lds	r30, 0x012C
 46e:	f0 91 2d 01 	lds	r31, 0x012D
 472:	e2 17       	cp	r30, r18
 474:	f3 07       	cpc	r31, r19
 476:	a0 f4       	brcc	.+40     	; 0x4a0 <malloc+0x124>
 478:	2e 1b       	sub	r18, r30
 47a:	3f 0b       	sbc	r19, r31
 47c:	28 17       	cp	r18, r24
 47e:	39 07       	cpc	r19, r25
 480:	78 f0       	brcs	.+30     	; 0x4a0 <malloc+0x124>
 482:	ac 01       	movw	r20, r24
 484:	4e 5f       	subi	r20, 0xFE	; 254
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	24 17       	cp	r18, r20
 48a:	35 07       	cpc	r19, r21
 48c:	48 f0       	brcs	.+18     	; 0x4a0 <malloc+0x124>
 48e:	4e 0f       	add	r20, r30
 490:	5f 1f       	adc	r21, r31
 492:	50 93 2d 01 	sts	0x012D, r21
 496:	40 93 2c 01 	sts	0x012C, r20
 49a:	81 93       	st	Z+, r24
 49c:	91 93       	st	Z+, r25
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <malloc+0x128>
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	cf 01       	movw	r24, r30
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <free>:
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <free+0xa>
 4b4:	87 c0       	rjmp	.+270    	; 0x5c4 <free+0x118>
 4b6:	fc 01       	movw	r30, r24
 4b8:	32 97       	sbiw	r30, 0x02	; 2
 4ba:	13 82       	std	Z+3, r1	; 0x03
 4bc:	12 82       	std	Z+2, r1	; 0x02
 4be:	c0 91 2e 01 	lds	r28, 0x012E
 4c2:	d0 91 2f 01 	lds	r29, 0x012F
 4c6:	20 97       	sbiw	r28, 0x00	; 0
 4c8:	81 f4       	brne	.+32     	; 0x4ea <free+0x3e>
 4ca:	20 81       	ld	r18, Z
 4cc:	31 81       	ldd	r19, Z+1	; 0x01
 4ce:	28 0f       	add	r18, r24
 4d0:	39 1f       	adc	r19, r25
 4d2:	80 91 2c 01 	lds	r24, 0x012C
 4d6:	90 91 2d 01 	lds	r25, 0x012D
 4da:	82 17       	cp	r24, r18
 4dc:	93 07       	cpc	r25, r19
 4de:	79 f5       	brne	.+94     	; 0x53e <free+0x92>
 4e0:	f0 93 2d 01 	sts	0x012D, r31
 4e4:	e0 93 2c 01 	sts	0x012C, r30
 4e8:	6d c0       	rjmp	.+218    	; 0x5c4 <free+0x118>
 4ea:	de 01       	movw	r26, r28
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	ae 17       	cp	r26, r30
 4f2:	bf 07       	cpc	r27, r31
 4f4:	50 f4       	brcc	.+20     	; 0x50a <free+0x5e>
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	4d 91       	ld	r20, X+
 4fa:	5c 91       	ld	r21, X
 4fc:	13 97       	sbiw	r26, 0x03	; 3
 4fe:	9d 01       	movw	r18, r26
 500:	41 15       	cp	r20, r1
 502:	51 05       	cpc	r21, r1
 504:	09 f1       	breq	.+66     	; 0x548 <free+0x9c>
 506:	da 01       	movw	r26, r20
 508:	f3 cf       	rjmp	.-26     	; 0x4f0 <free+0x44>
 50a:	b3 83       	std	Z+3, r27	; 0x03
 50c:	a2 83       	std	Z+2, r26	; 0x02
 50e:	40 81       	ld	r20, Z
 510:	51 81       	ldd	r21, Z+1	; 0x01
 512:	84 0f       	add	r24, r20
 514:	95 1f       	adc	r25, r21
 516:	8a 17       	cp	r24, r26
 518:	9b 07       	cpc	r25, r27
 51a:	71 f4       	brne	.+28     	; 0x538 <free+0x8c>
 51c:	8d 91       	ld	r24, X+
 51e:	9c 91       	ld	r25, X
 520:	11 97       	sbiw	r26, 0x01	; 1
 522:	84 0f       	add	r24, r20
 524:	95 1f       	adc	r25, r21
 526:	02 96       	adiw	r24, 0x02	; 2
 528:	91 83       	std	Z+1, r25	; 0x01
 52a:	80 83       	st	Z, r24
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	8d 91       	ld	r24, X+
 530:	9c 91       	ld	r25, X
 532:	13 97       	sbiw	r26, 0x03	; 3
 534:	93 83       	std	Z+3, r25	; 0x03
 536:	82 83       	std	Z+2, r24	; 0x02
 538:	21 15       	cp	r18, r1
 53a:	31 05       	cpc	r19, r1
 53c:	29 f4       	brne	.+10     	; 0x548 <free+0x9c>
 53e:	f0 93 2f 01 	sts	0x012F, r31
 542:	e0 93 2e 01 	sts	0x012E, r30
 546:	3e c0       	rjmp	.+124    	; 0x5c4 <free+0x118>
 548:	d9 01       	movw	r26, r18
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	fc 93       	st	X, r31
 54e:	ee 93       	st	-X, r30
 550:	12 97       	sbiw	r26, 0x02	; 2
 552:	4d 91       	ld	r20, X+
 554:	5d 91       	ld	r21, X+
 556:	a4 0f       	add	r26, r20
 558:	b5 1f       	adc	r27, r21
 55a:	ea 17       	cp	r30, r26
 55c:	fb 07       	cpc	r31, r27
 55e:	79 f4       	brne	.+30     	; 0x57e <free+0xd2>
 560:	80 81       	ld	r24, Z
 562:	91 81       	ldd	r25, Z+1	; 0x01
 564:	84 0f       	add	r24, r20
 566:	95 1f       	adc	r25, r21
 568:	02 96       	adiw	r24, 0x02	; 2
 56a:	d9 01       	movw	r26, r18
 56c:	11 96       	adiw	r26, 0x01	; 1
 56e:	9c 93       	st	X, r25
 570:	8e 93       	st	-X, r24
 572:	82 81       	ldd	r24, Z+2	; 0x02
 574:	93 81       	ldd	r25, Z+3	; 0x03
 576:	13 96       	adiw	r26, 0x03	; 3
 578:	9c 93       	st	X, r25
 57a:	8e 93       	st	-X, r24
 57c:	12 97       	sbiw	r26, 0x02	; 2
 57e:	e0 e0       	ldi	r30, 0x00	; 0
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	9b 81       	ldd	r25, Y+3	; 0x03
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	19 f0       	breq	.+6      	; 0x590 <free+0xe4>
 58a:	fe 01       	movw	r30, r28
 58c:	ec 01       	movw	r28, r24
 58e:	f9 cf       	rjmp	.-14     	; 0x582 <free+0xd6>
 590:	ce 01       	movw	r24, r28
 592:	02 96       	adiw	r24, 0x02	; 2
 594:	28 81       	ld	r18, Y
 596:	39 81       	ldd	r19, Y+1	; 0x01
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	20 91 2c 01 	lds	r18, 0x012C
 5a0:	30 91 2d 01 	lds	r19, 0x012D
 5a4:	28 17       	cp	r18, r24
 5a6:	39 07       	cpc	r19, r25
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <free+0x118>
 5aa:	30 97       	sbiw	r30, 0x00	; 0
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <free+0x10c>
 5ae:	10 92 2f 01 	sts	0x012F, r1
 5b2:	10 92 2e 01 	sts	0x012E, r1
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <free+0x110>
 5b8:	13 82       	std	Z+3, r1	; 0x03
 5ba:	12 82       	std	Z+2, r1	; 0x02
 5bc:	d0 93 2d 01 	sts	0x012D, r29
 5c0:	c0 93 2c 01 	sts	0x012C, r28
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
