
Sensormodul_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000212  00800100  00800100  0000038a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000411  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fa  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032a  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d7  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000542  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c1       	rjmp	.+652    	; 0x2da <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f7 c0       	rjmp	.+494    	; 0x250 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	83 d0       	rcall	.+262    	; 0x1ca <main>
  c4:	26 c1       	rjmp	.+588    	; 0x312 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Sensor_InitPortDirections>:
	
	hyp = (front + back)/2 + 80; //100 är avståndet mellan sensorerna
	cath = hyp * cos(angle*M_PI/180);
	
	return (int8_t)(cath/10);
}
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	11 b8       	out	0x01, r1	; 1
  ce:	08 95       	ret

000000d0 <SPI_SlaveInit>:
  d0:	1d bc       	out	0x2d, r1	; 45
  d2:	83 ee       	ldi	r24, 0xE3	; 227
  d4:	8c bd       	out	0x2c, r24	; 44
  d6:	08 95       	ret

000000d8 <distance_table_generator>:
  d8:	e0 e1       	ldi	r30, 0x10	; 16
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	2c e5       	ldi	r18, 0x5C	; 92
  de:	31 e0       	ldi	r19, 0x01	; 1
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	81 93       	st	Z+, r24
  e6:	91 93       	st	Z+, r25
  e8:	e2 17       	cp	r30, r18
  ea:	f3 07       	cpc	r31, r19
  ec:	d9 f7       	brne	.-10     	; 0xe4 <distance_table_generator+0xc>
  ee:	8a ea       	ldi	r24, 0xAA	; 170
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 5d 01 	sts	0x015D, r25
  f6:	80 93 5c 01 	sts	0x015C, r24
  fa:	88 ea       	ldi	r24, 0xA8	; 168
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 5f 01 	sts	0x015F, r25
 102:	80 93 5e 01 	sts	0x015E, r24
 106:	84 ea       	ldi	r24, 0xA4	; 164
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 61 01 	sts	0x0161, r25
 10e:	80 93 60 01 	sts	0x0160, r24
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 63 01 	sts	0x0163, r25
 11a:	80 93 62 01 	sts	0x0162, r24
 11e:	8c e9       	ldi	r24, 0x9C	; 156
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 65 01 	sts	0x0165, r25
 126:	80 93 64 01 	sts	0x0164, r24
 12a:	86 e9       	ldi	r24, 0x96	; 150
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 67 01 	sts	0x0167, r25
 132:	80 93 66 01 	sts	0x0166, r24
 136:	80 e9       	ldi	r24, 0x90	; 144
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 69 01 	sts	0x0169, r25
 13e:	80 93 68 01 	sts	0x0168, r24
 142:	ea e6       	ldi	r30, 0x6A	; 106
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	22 e9       	ldi	r18, 0x92	; 146
 148:	31 e0       	ldi	r19, 0x01	; 1
 14a:	8c e8       	ldi	r24, 0x8C	; 140
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	81 93       	st	Z+, r24
 150:	91 93       	st	Z+, r25
 152:	02 97       	sbiw	r24, 0x02	; 2
 154:	e2 17       	cp	r30, r18
 156:	f3 07       	cpc	r31, r19
 158:	d1 f7       	brne	.-12     	; 0x14e <distance_table_generator+0x76>
 15a:	e2 e9       	ldi	r30, 0x92	; 146
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	84 e6       	ldi	r24, 0x64	; 100
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	81 93       	st	Z+, r24
 164:	91 93       	st	Z+, r25
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	8c 33       	cpi	r24, 0x3C	; 60
 16a:	91 05       	cpc	r25, r1
 16c:	d1 f7       	brne	.-12     	; 0x162 <distance_table_generator+0x8a>
 16e:	1e c0       	rjmp	.+60     	; 0x1ac <distance_table_generator+0xd4>
 170:	9b 01       	movw	r18, r22
 172:	24 1b       	sub	r18, r20
 174:	35 0b       	sbc	r19, r21
 176:	21 93       	st	Z+, r18
 178:	31 93       	st	Z+, r19
 17a:	9c 01       	movw	r18, r24
 17c:	99 23       	and	r25, r25
 17e:	14 f4       	brge	.+4      	; 0x184 <distance_table_generator+0xac>
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	2e 7f       	andi	r18, 0xFE	; 254
 186:	28 17       	cp	r18, r24
 188:	39 07       	cpc	r19, r25
 18a:	11 f4       	brne	.+4      	; 0x190 <distance_table_generator+0xb8>
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	86 39       	cpi	r24, 0x96	; 150
 194:	91 05       	cpc	r25, r1
 196:	61 f7       	brne	.-40     	; 0x170 <distance_table_generator+0x98>
 198:	ec e3       	ldi	r30, 0x3C	; 60
 19a:	f2 e0       	ldi	r31, 0x02	; 2
 19c:	8e e0       	ldi	r24, 0x0E	; 14
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	11 92       	st	Z+, r1
 1a2:	11 92       	st	Z+, r1
 1a4:	e8 17       	cp	r30, r24
 1a6:	f9 07       	cpc	r31, r25
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <distance_table_generator+0xc8>
 1aa:	08 95       	ret
 1ac:	8c e3       	ldi	r24, 0x3C	; 60
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 e3 01 	sts	0x01E3, r25
 1b4:	80 93 e2 01 	sts	0x01E2, r24
 1b8:	e4 ee       	ldi	r30, 0xE4	; 228
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	89 e6       	ldi	r24, 0x69	; 105
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	6c e3       	ldi	r22, 0x3C	; 60
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	e3 cf       	rjmp	.-58     	; 0x190 <distance_table_generator+0xb8>

000001ca <main>:
	int8_t wall_reflex_information;
	int reflex_bool;
	int8_t left_wall_counter;
	int8_t right_wall_counter;
	
	distance_table_generator(); //Skapa avståndstabellen
 1ca:	86 df       	rcall	.-244    	; 0xd8 <distance_table_generator>
	DDRB = 1<<DDB6;
	DDRA = 0;
}
void Sensor_InitPortValues()
{
	PORTB = 1<<PORTB4;
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	85 b9       	out	0x05, r24	; 5
	int8_t right_wall_counter;
	
	distance_table_generator(); //Skapa avståndstabellen
	
	Sensor_InitPortValues();
	Sensor_InitPortDirections();
 1d0:	7b df       	rcall	.-266    	; 0xc8 <Sensor_InitPortDirections>
	SPI_SlaveInit();
 1d2:	7e df       	rcall	.-260    	; 0xd0 <SPI_SlaveInit>
	
	sei(); //Aktiverar globala avbrott
 1d4:	78 94       	sei
	ADCSRA = 143; //Aktivera ADC, ADC-interrupt, Sätt division factor till 128. 20 MHz/128 = 156,25 kHz
 1d6:	8f e8       	ldi	r24, 0x8F	; 143
 1d8:	80 93 7a 00 	sts	0x007A, r24
		
	while(1)
	{
		
//_________________________________________Avläsning________________________________________
		for(int i = 0; i < 8; i++)
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
		
		wall_reflex_information = ( (reflex_bool * 64) + (left_wall_counter * 8) + (right_wall_counter) );
			
		//Förhindra avbrott under uppdateringen - höj avbrottsnivån så inga bussavbrott kommer.
		cli();
		send_buffer[0] = 1; //angle;     ****************************TESTAR MED FASTA VÄRDEN********************************
 1e0:	6e e0       	ldi	r22, 0x0E	; 14
 1e2:	73 e0       	ldi	r23, 0x03	; 3
 1e4:	bb 24       	eor	r11, r11
 1e6:	b3 94       	inc	r11
		send_buffer[1] = 2; //offset;    ****************************TESTAR MED FASTA VÄRDEN********************************
 1e8:	4f e0       	ldi	r20, 0x0F	; 15
 1ea:	53 e0       	ldi	r21, 0x03	; 3
 1ec:	68 94       	set
 1ee:	cc 24       	eor	r12, r12
 1f0:	c1 f8       	bld	r12, 1
		send_buffer[2] = 3; //front_sensor;****************************TESTAR MED FASTA VÄRDEN********************************
 1f2:	20 e1       	ldi	r18, 0x10	; 16
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f3 e0       	ldi	r31, 0x03	; 3
 1fa:	df 2e       	mov	r13, r31
 1fc:	f0 2d       	mov	r31, r0
		send_buffer[3] = 4; //wall_reflex_information;****************************TESTAR MED FASTA VÄRDEN********************************
 1fe:	c1 e1       	ldi	r28, 0x11	; 17
 200:	d3 e0       	ldi	r29, 0x03	; 3
 202:	68 94       	set
 204:	ee 24       	eor	r14, r14
 206:	e2 f8       	bld	r14, 2
		
	while(1)
	{
		
//_________________________________________Avläsning________________________________________
		for(int i = 0; i < 8; i++)
 208:	f1 2c       	mov	r15, r1
 20a:	00 e0       	ldi	r16, 0x00	; 0
		{
			ADMUX = 32 + i; //Öka admux, sätt ADLAR (bit 5 = 32)
 20c:	0f 2e       	mov	r0, r31
 20e:	fc e7       	ldi	r31, 0x7C	; 124
 210:	8f 2e       	mov	r8, r31
 212:	91 2c       	mov	r9, r1
 214:	f0 2d       	mov	r31, r0
			ADCSRA |= (1<<6); //Börja ADC
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	0b c0       	rjmp	.+22     	; 0x232 <main+0x68>
	{
		
//_________________________________________Avläsning________________________________________
		for(int i = 0; i < 8; i++)
		{
			ADMUX = 32 + i; //Öka admux, sätt ADLAR (bit 5 = 32)
 21c:	10 e2       	ldi	r17, 0x20	; 32
 21e:	18 0f       	add	r17, r24
 220:	d4 01       	movw	r26, r8
 222:	1c 93       	st	X, r17
			ADCSRA |= (1<<6); //Börja ADC
 224:	10 81       	ld	r17, Z
 226:	10 64       	ori	r17, 0x40	; 64
 228:	10 83       	st	Z, r17
			
		while(ADCSRA & 1<<ADSC)
 22a:	10 81       	ld	r17, Z
 22c:	16 fd       	sbrc	r17, 6
 22e:	fd cf       	rjmp	.-6      	; 0x22a <main+0x60>
		
	while(1)
	{
		
//_________________________________________Avläsning________________________________________
		for(int i = 0; i < 8; i++)
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	88 30       	cpi	r24, 0x08	; 8
 234:	91 05       	cpc	r25, r1
 236:	94 f3       	brlt	.-28     	; 0x21c <main+0x52>
		//För avläsning - and:a bort de ointressanta bitarna och dividera med rätt faktor.
		
		wall_reflex_information = ( (reflex_bool * 64) + (left_wall_counter * 8) + (right_wall_counter) );
			
		//Förhindra avbrott under uppdateringen - höj avbrottsnivån så inga bussavbrott kommer.
		cli();
 238:	f8 94       	cli
		send_buffer[0] = 1; //angle;     ****************************TESTAR MED FASTA VÄRDEN********************************
 23a:	db 01       	movw	r26, r22
 23c:	bc 92       	st	X, r11
		send_buffer[1] = 2; //offset;    ****************************TESTAR MED FASTA VÄRDEN********************************
 23e:	da 01       	movw	r26, r20
 240:	cc 92       	st	X, r12
		send_buffer[2] = 3; //front_sensor;****************************TESTAR MED FASTA VÄRDEN********************************
 242:	d9 01       	movw	r26, r18
 244:	dc 92       	st	X, r13
		send_buffer[3] = 4; //wall_reflex_information;****************************TESTAR MED FASTA VÄRDEN********************************
 246:	e8 82       	st	Y, r14
		sei();
 248:	78 94       	sei
		
	while(1)
	{
		
//_________________________________________Avläsning________________________________________
		for(int i = 0; i < 8; i++)
 24a:	8f 2d       	mov	r24, r15
 24c:	90 2f       	mov	r25, r16
		//Skicka till Styrmodul via SPI
		
		
		//_________________________________________TEST________________________________________
		//_delay_ms(250);
	}			
 24e:	f1 cf       	rjmp	.-30     	; 0x232 <main+0x68>

00000250 <__vector_24>:
}

ISR(ADC_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
	if ( (ADMUX-32 == 7) || (ADMUX-32 == 2) || (ADMUX-32 == 5) ){
 26a:	80 91 7c 00 	lds	r24, 0x007C
 26e:	87 32       	cpi	r24, 0x27	; 39
 270:	41 f0       	breq	.+16     	; 0x282 <__vector_24+0x32>
 272:	80 91 7c 00 	lds	r24, 0x007C
 276:	82 32       	cpi	r24, 0x22	; 34
 278:	21 f0       	breq	.+8      	; 0x282 <__vector_24+0x32>
 27a:	80 91 7c 00 	lds	r24, 0x007C
 27e:	85 32       	cpi	r24, 0x25	; 37
 280:	69 f4       	brne	.+26     	; 0x29c <__vector_24+0x4c>
	sensor_data[ADMUX-32] = ADCH; // Ifall det är långa sensorn eller reflex ska den inte konverteras.
 282:	e0 91 7c 00 	lds	r30, 0x007C
 286:	80 91 79 00 	lds	r24, 0x0079
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	e0 54       	subi	r30, 0x40	; 64
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	91 83       	std	Z+1, r25	; 0x01
 298:	80 83       	st	Z, r24
 29a:	12 c0       	rjmp	.+36     	; 0x2c0 <__vector_24+0x70>
	}
	else
	{
	sensor_data[ADMUX-32] = distance_table[ADCH];
 29c:	e0 91 7c 00 	lds	r30, 0x007C
 2a0:	a0 91 79 00 	lds	r26, 0x0079
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e0 54       	subi	r30, 0x40	; 64
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	aa 0f       	add	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a0 5f       	subi	r26, 0xF0	; 240
 2b6:	be 4f       	sbci	r27, 0xFE	; 254
 2b8:	8d 91       	ld	r24, X+
 2ba:	9c 91       	ld	r25, X
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
	}	
		
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_19>:

ISR(SPI_STC_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	8f 93       	push	r24
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	int8_t inval_ = (int8_t)SPDR;
 2ee:	ee b5       	in	r30, 0x2e	; 46
	
	SPDR = send_buffer[inval_];
 2f0:	ff 27       	eor	r31, r31
 2f2:	e7 fd       	sbrc	r30, 7
 2f4:	f0 95       	com	r31
 2f6:	e2 5f       	subi	r30, 0xF2	; 242
 2f8:	fc 4f       	sbci	r31, 0xFC	; 252
 2fa:	80 81       	ld	r24, Z
 2fc:	8e bd       	out	0x2e, r24	; 46
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0b be       	out	0x3b, r0	; 59
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
