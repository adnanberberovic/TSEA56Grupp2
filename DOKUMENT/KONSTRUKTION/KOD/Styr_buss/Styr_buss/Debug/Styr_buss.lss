
Styr_buss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ab  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018b  00000000  00000000  000004d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000276  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000205  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b2  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__vector_19>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	28 d0       	rcall	.+80     	; 0xea <main>
  9a:	60 c0       	rjmp	.+192    	; 0x15c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Styr_InitPortDirections>:
} 

//Setups port values, more specifically puts SS on high.
void Styr_InitPortValues(void)
{
	PORTB = 1<<PORTB3 | 1<<PORTB4;
  9e:	8f e4       	ldi	r24, 0x4F	; 79
  a0:	81 b9       	out	0x01, r24	; 1
  a2:	8f eb       	ldi	r24, 0xBF	; 191
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	08 95       	ret

000000b0 <SPI_MasterInit>:
}

//Configures device as spi master.
void SPI_MasterInit(void)
{
	SPSR = 0<<SPI2X;
  b0:	1d bc       	out	0x2d, r1	; 45
	SPCR = 1<<SPIE | 1<<SPE | 1<<DORD | 1<<MSTR | 0<<CPOL | 0<<CPHA | 1<<SPR1 | 1<<SPR0;
  b2:	83 ef       	ldi	r24, 0xF3	; 243
  b4:	8c bd       	out	0x2c, r24	; 44
  b6:	08 95       	ret

000000b8 <SPI_MasterTransmit>:
}

//Initiates commiunication with other modules.
unsigned char SPI_MasterTransmit(unsigned char cData, char target)
{
	if (target == 'k') //k as in kommunikation
  b8:	6b 36       	cpi	r22, 0x6B	; 107
  ba:	11 f4       	brne	.+4      	; 0xc0 <SPI_MasterTransmit+0x8>
	{
		PORTB = 0<<PORTB4;
  bc:	15 b8       	out	0x05, r1	; 5
  be:	03 c0       	rjmp	.+6      	; 0xc6 <SPI_MasterTransmit+0xe>
	}
	else if (target == 's')	//s as in sensor
  c0:	63 37       	cpi	r22, 0x73	; 115
  c2:	09 f4       	brne	.+2      	; 0xc6 <SPI_MasterTransmit+0xe>
	{
		PORTB = 0<<PORTB5;
  c4:	15 b8       	out	0x05, r1	; 5
	}
	//Load data into SPI data register.
	SPDR = cData; 
  c6:	8e bd       	out	0x2e, r24	; 46
	
	//wait until transmission completes.
	while(!(SPSR & (1<<SPIF)));
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <SPI_MasterTransmit+0x10>
	
	PORTB = 1<<PORTB4 | 1<<PORTB5;
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	85 b9       	out	0x05, r24	; 5
	
	return SPDR;
  d2:	8e b5       	in	r24, 0x2e	; 46
}
  d4:	08 95       	ret

000000d6 <__vector_19>:

ISR(SPI_STC_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
	
}
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <main>:

int main(void)
{
	unsigned char SPDRrec_ = 0;
	sei();
  ea:	78 94       	sei
	sleep_enable();
  ec:	83 b7       	in	r24, 0x33	; 51
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	83 bf       	out	0x33, r24	; 51
	Styr_InitPortDirections();
  f2:	d5 df       	rcall	.-86     	; 0x9e <Styr_InitPortDirections>
} 

//Setups port values, more specifically puts SS on high.
void Styr_InitPortValues(void)
{
	PORTB = 1<<PORTB3 | 1<<PORTB4;
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	85 b9       	out	0x05, r24	; 5
	unsigned char SPDRrec_ = 0;
	sei();
	sleep_enable();
	Styr_InitPortDirections();
	Styr_InitPortValues();
	SPI_MasterInit();
  f8:	db df       	rcall	.-74     	; 0xb0 <SPI_MasterInit>
	SPDRrec_ = SPI_MasterTransmit(0x01, 'k');
  fa:	6b e6       	ldi	r22, 0x6B	; 107
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	dc df       	rcall	.-72     	; 0xb8 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x18>
 106:	00 00       	nop
	_delay_us(10);
	SPDRrec_ = SPI_MasterTransmit(0x1F, 'k');
 108:	6b e6       	ldi	r22, 0x6B	; 107
 10a:	8f e1       	ldi	r24, 0x1F	; 31
 10c:	d5 df       	rcall	.-86     	; 0xb8 <SPI_MasterTransmit>
	if (SPDRrec_ == 0x0F)
 10e:	8f 30       	cpi	r24, 0x0F	; 15
 110:	19 f4       	brne	.+6      	; 0x118 <main+0x2e>
	{
		PORTC = (1<<PORTC0);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	88 b9       	out	0x08, r24	; 8
 116:	04 c0       	rjmp	.+8      	; 0x120 <main+0x36>
	}
	if (SPDRrec_ == 0x00)
 118:	81 11       	cpse	r24, r1
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x36>
	{
		PORTC = (1<<PORTC0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	88 b9       	out	0x08, r24	; 8
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x38>
 126:	00 00       	nop
	}
	_delay_us(10);
	SPDRrec_ = SPI_MasterTransmit(0x0F, 'k');
 128:	6b e6       	ldi	r22, 0x6B	; 107
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	c5 df       	rcall	.-118    	; 0xb8 <SPI_MasterTransmit>
	if (SPDRrec_ == 0x1E)
 12e:	8e 31       	cpi	r24, 0x1E	; 30
 130:	11 f4       	brne	.+4      	; 0x136 <main+0x4c>
	{
		PORTC = (1<<PORTC0);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	88 b9       	out	0x08, r24	; 8
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x4e>
 13c:	00 00       	nop
	}
	_delay_us(10);
	SPDRrec_ = SPI_MasterTransmit(0x1F, 'k');
 13e:	6b e6       	ldi	r22, 0x6B	; 107
 140:	8f e1       	ldi	r24, 0x1F	; 31
 142:	ba df       	rcall	.-140    	; 0xb8 <SPI_MasterTransmit>
	if (SPDRrec_ == 0x0E)
 144:	8e 30       	cpi	r24, 0x0E	; 14
 146:	19 f4       	brne	.+6      	; 0x14e <main+0x64>
	{
		PORTC = (1<<PORTC0);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	88 b9       	out	0x08, r24	; 8
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0x68>
	}
	if (SPDRrec_ == 0x0F)
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	09 f0       	breq	.+2      	; 0x154 <main+0x6a>
 152:	03 c0       	rjmp	.+6      	; 0x15a <main+0x70>
	{
		PORTC = (1<<PORTC0);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	88 b9       	out	0x08, r24	; 8
 158:	fc cf       	rjmp	.-8      	; 0x152 <main+0x68>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x70>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
